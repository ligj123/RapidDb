#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define db__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer db__create_buffer
#endif

#ifdef yy_delete_buffer
#define db__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer db__delete_buffer
#endif

#ifdef yy_scan_buffer
#define db__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer db__scan_buffer
#endif

#ifdef yy_scan_string
#define db__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string db__scan_string
#endif

#ifdef yy_scan_bytes
#define db__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes db__scan_bytes
#endif

#ifdef yy_init_buffer
#define db__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer db__init_buffer
#endif

#ifdef yy_flush_buffer
#define db__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer db__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define db__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state db__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define db__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer db__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define db_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state db_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define db_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state db_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define db_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack db_ensure_buffer_stack
#endif

#ifdef yylex
#define db_lex_ALREADY_DEFINED
#else
#define yylex db_lex
#endif

#ifdef yyrestart
#define db_restart_ALREADY_DEFINED
#else
#define yyrestart db_restart
#endif

#ifdef yylex_init
#define db_lex_init_ALREADY_DEFINED
#else
#define yylex_init db_lex_init
#endif

#ifdef yylex_init_extra
#define db_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra db_lex_init_extra
#endif

#ifdef yylex_destroy
#define db_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy db_lex_destroy
#endif

#ifdef yyget_debug
#define db_get_debug_ALREADY_DEFINED
#else
#define yyget_debug db_get_debug
#endif

#ifdef yyset_debug
#define db_set_debug_ALREADY_DEFINED
#else
#define yyset_debug db_set_debug
#endif

#ifdef yyget_extra
#define db_get_extra_ALREADY_DEFINED
#else
#define yyget_extra db_get_extra
#endif

#ifdef yyset_extra
#define db_set_extra_ALREADY_DEFINED
#else
#define yyset_extra db_set_extra
#endif

#ifdef yyget_in
#define db_get_in_ALREADY_DEFINED
#else
#define yyget_in db_get_in
#endif

#ifdef yyset_in
#define db_set_in_ALREADY_DEFINED
#else
#define yyset_in db_set_in
#endif

#ifdef yyget_out
#define db_get_out_ALREADY_DEFINED
#else
#define yyget_out db_get_out
#endif

#ifdef yyset_out
#define db_set_out_ALREADY_DEFINED
#else
#define yyset_out db_set_out
#endif

#ifdef yyget_leng
#define db_get_leng_ALREADY_DEFINED
#else
#define yyget_leng db_get_leng
#endif

#ifdef yyget_text
#define db_get_text_ALREADY_DEFINED
#else
#define yyget_text db_get_text
#endif

#ifdef yyget_lineno
#define db_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno db_get_lineno
#endif

#ifdef yyset_lineno
#define db_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno db_set_lineno
#endif

#ifdef yyget_column
#define db_get_column_ALREADY_DEFINED
#else
#define yyget_column db_get_column
#endif

#ifdef yyset_column
#define db_set_column_ALREADY_DEFINED
#else
#define yyset_column db_set_column
#endif

#ifdef yywrap
#define db_wrap_ALREADY_DEFINED
#else
#define yywrap db_wrap
#endif

#ifdef yyget_lval
#define db_get_lval_ALREADY_DEFINED
#else
#define yyget_lval db_get_lval
#endif

#ifdef yyset_lval
#define db_set_lval_ALREADY_DEFINED
#else
#define yyset_lval db_set_lval
#endif

#ifdef yyget_lloc
#define db_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc db_get_lloc
#endif

#ifdef yyset_lloc
#define db_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc db_set_lloc
#endif

#ifdef yyalloc
#define db_alloc_ALREADY_DEFINED
#else
#define yyalloc db_alloc
#endif

#ifdef yyrealloc
#define db_realloc_ALREADY_DEFINED
#else
#define yyrealloc db_realloc
#endif

#ifdef yyfree
#define db_free_ALREADY_DEFINED
#else
#define yyfree db_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define db_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1432] =
    {   0,
        0,    0,  198,  198,    2,    2,  202,  200,    4,    4,
      200,  200,  189,  200,  196,  189,  189,  193,  189,  189,
      189,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  189,  198,  199,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  183,    0,
      188,    1,    0,  191,  190,  193,  185,  184,  182,  186,

      195,  195,  195,  195,  195,  195,   12,  195,  195,  195,
      195,  195,  195,   23,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,   79,
      195,  195,   82,   91,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  111,  195,  195,  116,  119,  120,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  158,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  187,  198,  197,    2,    2,    2,    2,    2,

        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,  194,    0,  190,    5,  195,    7,  195,  195,
       10,  195,   13,  195,  195,   15,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,   42,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,   56,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,   67,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
       86,  195,  195,   94,  195,  195,  195,  195,  195,  195,
      102,  195,  104,  195,  195,  112,  195,  195,  195,  117,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  142,  195,  195,
      195,  195,  195,  195,  195,  150,  195,  195,  195,  195,
      195,  159,  195,  195,  195,  195,  195,  195,  195,  169,
      195,  195,  195,  195,  195,  195,  195,  195,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,   21,  195,   24,  195,   26,
       27,   28,  195,  195,  195,   34,  195,  195,  195,  195,

      195,   40,   43,  195,  195,  195,  195,  195,   49,  195,
      195,  195,   54,   55,  195,  195,  195,  195,  195,  195,
      195,   64,  195,  195,  195,   69,   70,  195,  195,   74,
      195,   76,   77,  195,  195,  195,  195,  195,  195,   90,
      195,   93,   95,   96,  195,   98,  195,  195,  101,  195,
      195,  195,  195,  195,  114,  195,  195,  195,  195,  123,
      195,  195,  126,  195,  195,  195,  195,  131,  195,  195,
      195,  195,  136,  195,  195,  195,  195,  144,  145,  195,
      195,  195,  195,  195,  195,  154,  155,  156,  195,  161,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      173,  195,  175,  195,  177,  178,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    6,
        8,  195,   11,  195,  195,  195,   18,  195,  195,  195,
      195,  195,  195,  195,  195,  195,   35,  195,   37,  195,
      195,  195,  195,  195,  195,  195,   48,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,   63,   65,  195,
      195,  195,   72,  195,   78,   80,  195,   83,   84,  195,
      195,  195,  195,   97,   99,  195,  103,  105,  195,  108,

      195,  195,  195,  195,  121,  122,  195,  195,  195,  195,
      195,  130,  195,  195,  134,  195,  195,  195,  195,  143,
      195,  195,  195,  149,  151,  195,  195,  195,  195,  195,
      164,  195,  195,  195,  195,  170,  195,  195,  195,  176,
      179,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  195,  195,  195,   17,  195,
       20,  195,  195,  195,   29,  195,   31,  195,   36,  195,
      195,  195,  195,  195,  195,   47,  195,   51,  195,   53,
       57,   58,  195,   60,  195,  195,  195,   68,   71,   73,
       75,   81,   85,  195,  195,  195,   92,  100,  106,  109,
      195,  113,  195,  118,  195,  195,  195,  195,  195,  132,

      195,  195,  137,  139,  141,  195,  147,  195,  152,  195,
      195,  195,  195,  195,  165,  166,  167,  168,  171,  195,
      195,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    9,

      195,   16,   19,   22,   25,  195,   30,   32,   33,  195,
      195,  195,  195,   45,   46,  195,  195,   59,   61,   62,
      195,   87,  195,  195,  107,  110,  195,  195,  195,  195,
      128,  129,  195,  195,  138,  140,  195,  148,  195,  195,
      195,  195,  195,  172,  174,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  195,  195,    0,   38,   41,  195,   50,

       52,  195,  195,   89,  115,  195,  195,  195,  133,  135,
      146,  195,  195,  195,  162,  195,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  195,  195,    0,   39,  195,   66,   88,  195,  125,
      127,  153,  157,  195,  163,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  195,    0,    0,   44,  124,  195,    2,    2,    2,
        2,    2,    2,    2,    0,  195,    0,  180,  160,    2,
        2,    2,    2,    2,    0,  195,    0,    2,    2,    2,

        0,  195,    0,    2,    2,    2,    0,   14,    0,    2,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,  181,    2,    2,    0,    2,    0,    2,  192,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    6,
        6,    6,    6,    6,    9,   10,    6,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,    6,    6,   21,
       22,   23,    6,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        6,    1,    6,    6,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    6,   77,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1439] =
    {   0,
        0,    0,  765,  755,   77,    0,  738,10406,  153,  155,
      690,    0,10406,  683,10406,  150,  149,  161,  160,  661,
      645,  157,  168,  166,  208,  210,  261,  150,  218,  252,
      149,  160,  254,  279,  280,  298,  229,    0,  309,  349,
      397,  202,  304,  340,  165,  580,    0,  626,    0,  206,
      252,  591,  607,    0,  570,    0,  242,  455,  466,  238,
      554,  544,  486,  563,  617,  669,  717,  769,  349,  817,
      860,  389,  477,  555,  911,  963, 1012, 1061,  557, 1109,
     1161, 1209,  600, 1257, 1301,  661,  482,  298,10406,  551,
    10406,10406,  540, 1338, 1365, 1376,10406,10406,10406,10406,

        0,  168,  195,  338,  352,  207,  269,  297,  402,  504,
      348,  344,  351,    0,  475,  371,  704,  461,  392,  532,
      727,  537,  390,  399,  456,  475,  485,  780,  483,  487,
      497,  547,  543,  554,  558,  559,  587,  563,  589,    0,
      604,  604,  657,  607,  614,  602,  622,  724,  779,  606,
      613,  649,  650,  648,  659,  660,  682,  680,    0,  688,
      676,  719,  709,  733,  762,  724,  787,  741,  780,  764,
      828,  821,  777,  801,  806,  833,  836,  828,  840,  830,
      839,  837,  839,  855,  878,  891,  883,  879,  903,  873,
      866,  897,10406,    0,10406,    0,  346,    0,  547,    0,

        0,  530, 1386, 1396, 1407,    0,    0,    0,    0,  948,
      978, 1024, 1066, 1404, 1108, 1209, 1151, 1451, 1497, 1249,
     1201, 1260, 1300, 1395, 1425, 1537, 1415, 1481, 1577, 1629,
     1494, 1598, 1652, 1601, 1665, 1671, 1720, 1707, 1725, 1763,
     1767, 1805, 1809, 1847, 1853, 1861, 1889, 1897, 1903, 1938,
     1939, 1987, 1947, 1991, 2000, 2041, 2082, 2133, 2059, 2125,
     2134, 2169, 2175, 2215, 2218, 2239, 2262, 2231, 2275, 2298,
     2319, 2311, 2347, 2099, 2355, 2371, 2390, 2404, 2418, 2467,
      958, 2437, 2470, 2481, 2511, 2530, 2524, 2554, 2572, 2575,
     2596, 2615, 2642, 2689, 2661, 2684, 2703, 2750, 2719, 2747,

     2778,    0,10406,  523, 1574,    0,  897,    0,  899,  915,
        0,  927,    0,  915,  916,    0,  923,  932,  919,  947,
      972,  965,  968, 1036,  970,  974,  983,  990, 1000, 1014,
     1030, 1013, 1032, 1083, 1045, 1055, 1063, 1073, 1099, 1078,
     1093, 1082, 1114, 1107, 1123,    0, 1129, 1128, 1137, 1137,
     1146, 1150, 1154, 1173, 1179, 1172, 1206, 1209, 1214, 1230,
     1214, 1230, 1255, 1247, 1252, 1266, 1263, 1275, 1284, 1312,
     1406, 1297, 1307,    0, 1302, 1318, 1397, 1411, 1451, 1452,
        0, 1453, 1440, 1449, 1453,    0, 1479, 1486, 1492, 1495,
     1510, 1514, 1510, 1553, 1533, 1556, 1539, 1550, 1548, 1581,

     1574, 1596, 1594, 1588, 1606, 1612, 1631,    0, 1627, 1628,
     1639, 1648, 1641, 1645, 1655,    0, 1669, 1670, 1677, 1693,
     1709,    0, 1701, 1733, 1712, 1713, 1718, 1742, 1756,    0,
     1754, 1748, 1770, 1757, 1763, 1785, 1776, 1771,    0,  507,
     1846, 2791, 2799, 2802, 2842, 2843, 2846, 2889, 2886, 2892,
     2900, 2930, 2938, 2946, 2949, 2982, 2991, 2990, 3026, 3043,
     3037, 3050, 3080, 3083, 3113, 3094, 3127, 3148, 3157, 3208,
     3192, 3200, 3236, 3252, 3253, 3258, 3299, 3304, 3304, 3298,
     3347, 3344, 3353, 3377, 3400, 3396, 3419, 3438, 3447, 3468,
     3489, 3492, 3508, 3532, 3538, 3551, 3574, 3592, 3600, 3628,

     3641, 3652, 3682, 3690, 3706, 3730, 3138, 3734, 3753, 3772,
     3781, 3802, 3821, 3805, 3872, 3851, 3875, 3905, 3913, 3916,
     3929, 3957, 3971, 3970, 4001, 4012, 4025, 4036, 4055, 4106,
     4071, 4099, 4124, 4137, 4148, 4167, 4178, 4197, 4216, 4225,
     4246, 4260, 4249, 4279, 4295, 4298, 4319, 4333, 4347, 4361,
     4377, 4385, 4391, 4427, 4433, 4436, 4457, 4471, 4480, 4501,
     4515, 4555, 4534, 4504, 4576, 4579, 4590, 4614, 4620, 4628,
     4644, 4658, 4686, 4694,  492, 1780, 1804, 1802, 1806,  454,
     1851, 1839, 1849, 1859, 1855,    0, 1865,    0, 1877,    0,
        0, 1886, 1893, 1932, 1901,    0, 1909, 1940, 1946, 1962,

     1967, 1950,    0, 1963, 1968, 1974, 1984, 2008, 1995, 2013,
     2008, 2009,    0,    0, 2007, 2013, 2014, 2025, 2048, 2053,
     2052,    0, 2038, 2044, 2060,    0,    0, 2062, 2048,    0,
     2056,    0, 2056, 2084, 2081, 2079, 2095, 2097, 2179,    0,
     2115,    0,    0,    0, 2109,    0, 2120, 2145,    0, 2150,
     2171, 2157, 2151, 2169,    0, 2195, 2196, 2186, 2188,    0,
     2196, 2210,    0, 2239, 2247, 2272, 2279,    0, 2275, 2274,
     2273, 2303,    0, 2294, 2295, 2324, 2323,    0,    0, 2329,
     2341, 2344, 2344, 2371, 2363,    0,    0, 2362, 2365,    0,
     2389, 2386, 2399, 2399, 2420, 2405, 2415, 2428, 2433, 2431,

        0, 2437,    0, 2458,    0, 2455,  489, 4705, 4724, 4735,
     4743, 4766, 4787, 4784, 4808, 4829, 4832, 4838, 4862, 4873,
     4881, 4892, 4911, 4925, 4946, 4931, 4965, 4976, 4979, 5009,
     4995, 5030, 5049, 5033, 5063, 5077, 5093, 5101, 5107, 5149,
     5148, 5162, 5193, 5192, 5206, 5234, 5247, 5248, 5283, 5289,
     5313, 5332, 5343, 5362, 5373, 5376, 5397, 5416, 5420, 5444,
     5462, 5463, 5498, 5504, 5507, 5528, 5547, 5556, 5582, 5591,
     5636, 5600, 5633, 5644, 5647, 5677, 5680, 5691, 5710, 5731,
     5734, 5752, 5775, 5778, 5813, 5821, 5822, 5862, 5865, 5876,
     5900, 5911, 5919, 5952, 5955, 5963, 5996, 5999, 6007, 6037,

     6050, 6053, 6061, 6091, 6097, 6105, 6135, 6138, 6159, 6141,
     6182, 6183, 6206, 6227, 6230, 6248, 6271, 6279, 6290, 6309,
     6320, 6323, 6351, 6364, 6365, 6405, 6406, 6419, 6449, 6457,
     6473, 6499, 6503, 6527, 6541, 6557, 6560, 6571,  487,    0,
        0, 2449,    0, 2468, 2473, 2487,    0, 2519, 2508, 2532,
     2530, 2537, 2531, 2533, 2557, 2564,    0, 2585,    0, 2578,
     2596, 2589, 2586, 2602, 2610, 2627,    0, 2631, 2621, 2630,
     2640, 2646, 2632, 2635, 2664, 2696, 2711,    0,    0, 2696,
     2709, 2733, 2731, 2746,    0,    0, 2737,    0,    0, 2753,
     2776, 2790, 2795,    0,    0, 2818,    0,    0, 2820, 2825,

     2845, 2831, 2851, 2844,    0,    0, 2863, 2849, 2868, 2857,
     2891,    0, 2915, 2912,    0, 2928, 2958, 2994, 2987,    0,
     2999, 3008, 3015,    0, 2998, 3008, 3007, 3056, 3057, 3046,
        0, 3104, 3111, 3112, 3136,    0, 3138, 3157, 3160,    0,
        0,  486, 6590, 6601, 6604, 6620, 6639, 6653, 6669, 6672,
     6693, 6702, 6723, 6726, 6749, 6768, 6772, 6796, 6810, 6814,
     6845, 6854, 6868, 6887, 6908, 6922, 6911, 6941, 6962, 6965,
     6976, 7006, 6995, 7019, 7030, 7054, 7063, 7072, 7103, 7116,
     7112, 7147, 7156, 7170, 7189, 7200, 7208, 7219, 7238, 7249,
     7252, 7268, 7292, 7296, 7310, 7334, 7338, 7352, 7378, 7382,

     7396, 7420, 7424, 7448, 7466, 7469, 7502, 7511, 7515, 7546,
     7555, 7569, 7593, 7604, 7607, 7628, 7642, 7651, 7670, 7694,
     7700, 7718, 7736, 7744, 7762, 7788, 7780, 7806, 7824, 7842,
     7866, 7872, 7885, 7896, 7920, 7926, 7944, 7950, 7968, 7974,
     7998, 8004, 8017, 8028,  479, 3186, 3187, 3202,    0, 3196,
        0, 3201, 3212, 3205, 3211, 3245,    0, 3256,    0, 3250,
     3265, 3286, 3318, 3318, 3333,    0, 3358,    0, 3367,    0,
        0,    0, 3368,    0, 3361, 3358, 3375,    0,    0,    0,
        0,    0,    0, 3389, 3408, 3416,    0,    0, 3402,    0,
     3410,    0, 3425,    0, 3407, 3427, 3436, 3459, 3442,    0,

     3465, 3466, 3456, 3459,    0, 3471,    0, 3485,    0, 3498,
     3509, 3512, 3514, 3535,    0,    0,    0,    0,    0, 3523,
     3543,  432, 8052, 8058, 8076, 8082, 8100, 8106, 8124, 8130,
     8154, 8165, 8168, 8184, 8198, 8212, 8226, 8240, 8256, 8275,
     8289, 8298, 8317, 8336, 8340, 8359, 8378, 8382, 8401, 8422,
     8425, 8431, 8455, 8469, 8473, 8497, 8511, 8515, 8539, 8553,
     8557, 8581, 8600, 8597, 8611, 8630, 8641, 8644, 8660, 8674,
     8693, 8702, 8721, 8742, 8763, 8772, 8786, 8814, 8817, 8838,
     8847, 8861, 8880, 8889, 8903, 8922, 8931, 8950, 8973, 8974,
     9004, 9015, 9018, 9034, 9048, 9062, 9078, 9081,  436,    0,

     3555,    0,    0,    0,    0, 3555,    0,    0,    0,  354,
     3559, 3562, 3568,    0,    0, 3569, 3556,    0,    0,    0,
     3567,    0, 3596, 3593,    0,    0, 3589, 3605, 3602, 3604,
        0,    0, 3603, 3618,    0,    0, 3610,    0, 3617, 3641,
     3638, 3656, 3667,    0,    0,  434, 9092, 9122, 9116, 9125,
     9146, 9160, 9176, 9179, 9190, 9209, 9233, 9230, 9251, 9277,
     9274, 9295, 9298, 9328, 9319, 9342, 9366, 9370, 9384, 9410,
     9414, 9433, 9452, 9463, 9487, 9471, 9506, 9515, 9529, 9553,
     9567, 9571, 9595, 9609, 9613, 9639, 9653, 9662, 9683, 9686,
     9702, 9716,  435, 3655, 3660, 3733, 3664,    0, 3669,    0,

        0, 3700, 3712,    0,    0, 3719, 3725, 3736,    0,    0,
        0, 3731, 3744, 3752,    0, 3759,  434, 9732, 9740, 3858,
     9751, 9770, 9781, 9784, 9800, 9819, 9828, 9842, 9866, 9877,
     9880, 9896, 9915, 9924, 9938, 9957, 9971, 9992,10001,10015,
      430, 3774,  356, 3783,    0, 3807,    0,    0, 3796,    0,
        0,    0,    0, 3832,    0,  429,10036,10057, 3835,10039,
    10060,10081,10090,10104,10123,10132,10146,10165,10176,10184,
      425, 3839, 3925, 3831,    0,    0, 3841,  424,10200, 4007,
     3838,10214,10230,10233,  421, 3861, 3867,10406,    0,  420,
    10254, 3870,    0,10263,  385, 3866, 3888,  381,10277, 3897,

      379, 3902, 3906,  350,10301, 3913,  343,    0, 3957,  335,
    10298, 3964,  332, 3964,  328, 3965,  294, 3984,  290, 3994,
      279,10406,  271,    0,  267,  247,  216,  186,10406,    0,
    10406,10375,10380,  184,10385,10390,10395,10400
    } ;

static const flex_int16_t yy_def[1439] =
    {   0,
     1431,    1, 1432, 1432, 1431,    5, 1431, 1431, 1431, 1431,
     1431, 1433, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1431, 1435, 1431, 1436, 1436,
     1431, 1436, 1437, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1438, 1438,   64,   64,   64,   65,   67,   65,
       67,   67,   67,   64,   64,   65,   65,   65,   67,   64,
       65,   65,   67,   67,   67,   67, 1436, 1431, 1431, 1433,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1431, 1435, 1431, 1436, 1436, 1436, 1437, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   64,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   64,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   64,   67,   67,   67,   67,   67,   67,
       65,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   65,   67,   67,   64,   67,   67,   67,   67,

       67, 1436, 1431, 1431, 1431, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1436, 1436,
     1436,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  237,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  237,  237,  237,  237,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   64,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,  237,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1431, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1436,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,  237,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67, 1431, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1436,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1431, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1436,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67, 1431, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1436,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67, 1431, 1434, 1434, 1431, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1436,   67,   67, 1436,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
     1431, 1434, 1434, 1431, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1436,   67,   67, 1436,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
     1431, 1434, 1431, 1431, 1434, 1434, 1434, 1436,   67, 1436,
     1436,   67,   67,   67, 1431, 1434, 1431, 1431, 1434, 1436,
       67, 1436, 1436,   67, 1431, 1434, 1431, 1436,   67, 1436,

     1431, 1434, 1431, 1436,   67, 1436, 1431, 1434, 1431, 1436,
       67, 1436, 1431, 1431, 1436, 1436, 1431, 1431, 1436, 1436,
     1431, 1431, 1436, 1436, 1431, 1436, 1431, 1436, 1431, 1436,
        0, 1431, 1431, 1431, 1431, 1431, 1431, 1431
    } ;

static const flex_int16_t yy_nxt[10484] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   38,   45,   38,    8,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   38,   45,   38,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   79,   86,   79,   49,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       79,   86,   79,   87,   88,   88,   88,   88,   92,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   93,
       95,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   97,   98,  102,  135,  103,  145,  146,  101,  115,
      136,  104,  192,  105,  306,  110,  116,  106,  107,  111,

      108,  109,  112,  117, 1430,  113,  118,  197,   88,  119,
      102,  135,  103,  145,  146,  114,  115,  136,  104,  192,
      105,  306,  110,  116,  106,  107,  111,  108,  109,  112,
      117,  120,  113,  118, 1429,  121,  119,  307,  185,  122,
      186,  137,  114,  187,  125,  123,  126,  312,  124,  138,
      201,  127,  163,   88,   88,  139,  128, 1428,  120,  206,
      207,  202,  121,  164,  307,  185,  122,  186,  137,  165,
      187,  125,  123,  126,  312,  124,  138, 1427,  127,  163,
      140,  147,  139,  128,  129,  148,  141,  142,  143, 1426,
      164,  149,  130,  144,  313,  131,  165, 1425,  132,   88,

       88,  133,  150,  154,  134, 1423,  151,  140,  147, 1421,
      152,  129,  148,  141,  142,  143,  153,  155,  149,  130,
      144,  313,  131,  156,  157,  132,  158,  188,  133,  150,
      154,  134,  166,  151,  159,  189,  167,  152,  160,  314,
      168,  161,  162,  153,  155, 1419,  169,  197,   88, 1417,
      156,  157, 1415,  158,  188, 1296, 1296, 1373, 1373,  166,
     1413,  159,  189,  167, 1410,  160,  314,  168,  161,  162,
      190,  191,  308,  169,  170,  310,  171,  320,  311,  172,
      309,  321,  173,  244,  174,  210,  175,  176,  322,  245,
      210,  177,  178, 1407,  325,  210, 1404,  190,  191,  308,

     1401,  170,  310,  171,  320,  311,  172,  309,  321,  173,
      244,  174,  210,  175,  176,  322,  245,  210,  177,  178,
      179,  325,  210,  210,  180,  210,  254,  181,  182,  315,
      210,  316,  333,  343,  183,  210,  344,  184, 1398, 1395,
     1390, 1385, 1378, 1371, 1356, 1341, 1317,  179, 1293, 1246,
      210,  180,  210,  254,  181,  182,  315,  210,  316,  333,
      343,  183,  210,  344,  184,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  204,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  196,  196,  331,  196,
      196,  196,  196,  196,  196,  196, 1199,  345,  332, 1122,

     1045,  346,  942,  844,  255,  839,  196,  196,  196,  323,
      347,  210,  211,  210,  212,  331,  324,  353,  210,  707,
      213,  354,  214,  210,  345,  332,  215,  216,  346,  217,
      218,  255,  317,  318,  355,  575,  323,  347,  210,  211,
      210,  212,  440,  324,  353,  210,  319,  213,  354,  214,
      210,  439,  304,  215,  216,  303,  217,  218,  302,  317,
      318,  355,  196,  196,  196,  209,  196,  196,  196,  196,
      196,  196,  196,  319,  334,  208,  200,  341,  342,  335,
      358,  356,  256,  196,  196,  196,  257,  357,  359,  210,
      219,  210,  258,  210,  220,  360,  361,  221,  210,  364,

      222,  334,  210,  210,  341,  342,  335,  358,  356,  256,
      223,  196,  198,  257,  357,  359,  210,  219,  210,  258,
      210,  220,  360,  361,  221,  210,  364,  222,  362,  210,
      210,  363,  365,  195,  210,  366,  294,  223,  295,  196,
      224,  296,  367,  372,  210,  373,  210,  225,  210,  374,
      375,  210,  381,  382,  226,  362,  193,  227,  363,  365,
      228,  210,  366,  294,  210,  295,  100,  224,  296,  367,
      372,  210,  373,  210,  225,  210,  374,  375,  210,  381,
      382,  226,   99,  368,  227,  383,  384,  228,  301,   91,
      385,  210,  229,  369,  388,  210,  230,  210,  370,  371,

      231,  386,  210,  210,  387,  389,  232,  210,  390,  233,
      368,   89,  383,  384,  391,  301,  210,  385,  392,  229,
      369,  388,  210,  230,  210,  370,  371,  231,  386,  210,
      210,  387,  389,  232,  210,  390,  233, 1431,  326,  327,
      328,  391,  329,  210,  210,  392,  393,  330,  210,  394,
      336,  234,  337,  235,  210,  338,  395,  376,  236,  377,
      398,  339,   48,  237,  210,  326,  327,  328,  340,  329,
      402,  210,   48,  393,  330,  210,  394,  336,  234,  337,
      235,  210,  338,  395,  376,  236,  377,  398,  339,  396,
      237,  210,  238,  397,  405,  340, 1431,  402, 1431,  210,

      239, 1431,  378,  240,  379,  348,  241,  349,  411,  242,
      399,  350,  243, 1431,  403,  380,  396, 1431,  351,  238,
      397,  405,  352,  400,  412,  404,  210,  239,  401,  378,
      240,  379,  348,  241,  349,  411,  242,  399,  350,  243,
      246,  403,  380, 1431,  409,  351,  413,  210,  247,  352,
      400,  412,  404,  406,  248,  401,  414,  210,  410,  415,
      210, 1431,  407,  416,  417,  418,  420,  246, 1431, 1431,
      408,  409,  421,  413,  210,  247,  419,  422,  423, 1431,
      406,  248, 1431,  414,  210,  410,  415,  210,  249,  407,
      416,  417,  418,  420,  250,  251,  252,  408,  424,  421,

      436,  253,  425,  419,  422,  423,  210, 1431,  437,  426,
      430, 1431,  427,  432,  431,  249, 1431,  428, 1431,  433,
      438,  250,  251,  252,  576,  424,  577,  436,  253,  425,
      434, 1431,  429,  210,  259,  437,  426,  430,  260,  427,
      432,  431,  261,  435,  428,  210,  433,  438,  262,  578,
      579,  576,  580,  577, 1431, 1431,  581,  434,  210,  429,
      582,  259, 1431,  583,  584,  260, 1431, 1431, 1431,  261,
      435, 1431,  210, 1431, 1431,  262,  578,  579,  585,  580,
     1431,  545,  210,  581,  210,  210,  263,  582,  210,  210,
      583,  584, 1431,  210,  210,  546,  586, 1431,  210,  587,

      264,  210,  588,  210,  442,  585,  265,  266,  545,  210,
      592,  210,  210,  263,  210,  210,  210,  593,  594,  210,
      210,  210,  546,  586,  210,  210,  587,  264,  210,  588,
      210,  442,  595,  265,  266,  210, 1431,  592, 1431,  210,
      267,  210,  210, 1431,  593,  594,  210,  596,  268,  210,
      597,  210,  269,  598,  599,  270,  271, 1431,  210,  595,
      210,  589,  210,  590, 1431,  210,  443,  267, 1431,  210,
      210, 1431,  600, 1431,  596,  268,  210,  597,  591,  269,
      598,  599,  270,  271,  272,  210,  603,  210,  589,  604,
      590,  210,  210,  443,  605,  273,  606,  210,  210,  600,

      444,  274,  210,  609,  210,  591,  601,  210,  445, 1431,
      602,  272,  210,  603, 1431, 1431,  604, 1431,  210, 1431,
      610,  605,  273,  606,  611,  210,  607,  444,  274,  210,
      609,  210,  275,  601,  210,  445,  276,  602,  612,  210,
      277,  608,  210,  210,  210,  613,  278,  610,  448,  210,
      614,  611,  615,  607,  210,  616,  210, 1431, 1431,  275,
     1431, 1431,  617,  276, 1431,  612, 1431,  277,  608,  210,
      210,  210,  613,  278, 1431,  448,  210,  614,  618,  615,
      619,  210,  616,  210,  210,  210,  279,  210,  280,  617,
      620,  281,  210,  450,  282,  621,  283,  210,  284,  285,

      622,  210,  623,  286,  287,  618,  624,  619, 1431, 1431,
     1431,  210,  210,  279,  210,  280, 1431,  620,  281,  210,
      450,  282,  621,  283,  210,  284,  285,  622,  210,  623,
      286,  287,  288,  624,  449,  210,  289,  210,  457,  290,
      291,  625,  210,  210,  626,  210,  292,  210,  627,  293,
      210, 1431,  210, 1431,  628,  210, 1431,  629, 1431,  288,
      630,  449,  210,  289,  210,  457,  290,  291,  625,  210,
      210,  626,  210,  292,  210,  627,  293,  210,  456,  210,
      297,  628,  210,  210,  629,  210,  631,  630,  298,  632,
      210,  210,  633,  210,  210,  210,  210,  458,  210,  634,

      635,  210,  636,  210, 1431,  456,  210,  297, 1431, 1431,
      210,  637,  210,  631, 1431,  298,  632,  210,  210,  633,
      210,  210,  210,  210,  458,  210,  634,  635,  210,  636,
      210,  299,  300,  210,  210,  210,  210,  210,  637,  638,
      641,  210,  210,  642,  643,  644,  210,  210,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  299,  300,
     1431,  210,  210,  210,  210, 1431,  638,  641,  210,  210,
      642,  643,  644,  210,  210,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,   95,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  204,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  446,  645,  459,
      447,  210, 1431,  639, 1431, 1431,  460,  646,  210, 1431,
      210,  210,  467,  640, 1431,  210,  210, 1431,  461,  210,
      210, 1431,  468, 1431,  446,  645,  459,  447,  210,  210,
      639,  210,  210,  460,  646,  210,  210,  210,  210,  467,
      640,  210,  210,  210,  647,  461,  210,  210,  451,  468,
      452,  649,  650,  651,  648,  210,  210,  210,  210,  210,
     1431,  652,  210,  210, 1431, 1431,  653,  210,  210, 1431,

     1431,  647,  654, 1431, 1431,  451, 1431,  452,  649,  650,
      651,  648,  210, 1431,  210,  210, 1431,  210,  652,  210,
      655,  469,  210,  653,  210,  453,  454,  210,  210,  654,
      210,  210,  656,  210,  477,  478,  657,  658,  210,  455,
      210,  659,  210,  210,  210, 1431, 1431,  655,  469,  210,
      660, 1431,  453,  454,  210,  210, 1431,  210,  210,  656,
      210,  477,  478,  657,  658,  210,  455,  210,  659,  663,
      210,  462,  463,  464,  666,  465,  661,  660,  210,  667,
      466,  664,  668,  210,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  665,  662,  663, 1431,  462,  463,

      464,  666,  465,  661,  669,  210,  667,  466,  664,  668,
      210,  210, 1431,  210, 1431, 1431,  670, 1431,  210,  470,
     1431,  665,  662,  210,  471, 1431,  671, 1431,  672,  673,
     1431,  669,  210,  674,  210,  210, 1431,  210,  210,  210,
      210,  479,  481,  670,  210,  210,  470,  210, 1431,  675,
      210,  471,  472,  671,  473,  672,  673,  474,  676,  210,
      674,  210,  210,  475,  210,  210,  210,  677,  479,  481,
      476,  210, 1431,  678,  210,  210,  675,  679, 1431,  472,
     1431,  473,  680,  681,  474,  676,  210,  682,  210,  480,
      475,  482,  210,  210,  677,  683,  483,  476,  210,  210,

      678,  210,  210,  684,  679,  210,  210,  210,  685,  680,
      681,  210,  210,  210,  682,  210,  480,  210,  482,  686,
      210, 1431,  683,  483, 1431,  210,  210, 1431,  210,  687,
      684, 1431,  210,  210,  210,  685,  688,  689,  210,  210,
     1431,  489, 1431,  210,  210,  484,  686,  485,  210,  692,
      693,  486,  694,  210,  210,  695,  687,  210,  487,  490,
      690,  210,  488,  688,  689,  696,  210,  210,  489,  691,
      210,  210,  484, 1431,  485,  210,  692,  693,  486,  694,
      210,  210,  695,  697,  210,  487,  490,  690,  210,  488,
      698,  699,  696,  210,  210,  700,  691,  210,  210,  210,

      491,  492,  701,  210,  210,  702,  705,  493,  210,  210,
      697,  706, 1431,  210, 1431, 1431, 1431,  698,  699, 1431,
      840,  703,  700, 1431,  210,  704,  210,  491,  492,  701,
      210,  210,  702,  705,  493,  210,  210, 1431,  706,  210,
      210,  210,  494,  495,  841,  210,  210,  840,  703,  842,
      210,  210,  704,  843, 1431,  210,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  210, 1431,  210,  494,
      495,  841,  210,  210,  845, 1431,  842,  210,  210,  846,
      843,  210,  210,  210,  496,  847,  848,  210,  210,  210,
      497,  849,  850,  210,  210,  210, 1431,  210, 1431,  210,

      851,  845,  498, 1431, 1431,  499,  846,  210,  210,  852,
      210,  496,  847,  848,  210,  210,  210,  497,  849,  850,
      210,  210,  210,  210,  210,  500,  210,  851,  853,  498,
      210,  210,  499,  210,  210,  210,  852,  210,  210,  210,
      501,  856, 1431,  210,  210, 1431, 1431, 1431, 1431,  210,
      210,  857,  500, 1431, 1431,  853, 1431,  210,  210,  854,
      210, 1431,  210,  855,  210,  210,  210,  501,  856,  502,
      210,  210,  210,  210,  210,  210,  210,  503,  857,  210,
      210,  210,  858,  508,  210,  210,  854,  859,  210,  860,
      855,  861,  862,  210, 1431, 1431,  502,  863, 1431,  210,

      210,  210,  210,  864,  503, 1431,  210,  210,  210,  858,
      508,  210,  210,  504,  859,  210,  860,  865,  861,  862,
      210,  210,  509,  505,  863,  210,  866,  210,  506,  507,
      864,  867,  210,  210,  210,  868,  210,  210,  869,  870,
      504,  210, 1431,  871,  865,  872,  210,  510,  210,  509,
      505,  873,  210,  866,  210,  506,  507,  874,  867,  210,
      210,  210,  868,  210,  210,  869,  870,  875,  210,  511,
      871,  876,  872,  210,  510,  210,  877,  210,  873,  878,
      879,  880,  210,  881,  874,  882,  883,  210, 1431, 1431,
     1431, 1431,  884,  210,  875,  210,  511,  885,  876, 1431,

      210, 1431,  210,  877,  210,  517,  878,  879,  880,  210,
      881,  886,  882,  883,  210,  512,  210,  513,  210,  884,
      210,  887,  210,  210,  885,  888,  532,  210,  210, 1431,
      533, 1431,  517,  210, 1431,  889,  210,  890,  886, 1431,
     1431, 1431,  512,  210,  513,  210,  210, 1431,  887,  893,
      210,  894,  888,  532,  895,  210,  514,  533,  515,  210,
      210,  210,  889,  210,  890,  518,  210,  210,  210,  516,
      519,  210,  896,  210,  210,  210,  893,  897,  894,  210,
      210,  895, 1431,  514, 1431,  515,  210,  900,  210, 1431,
     1431,  901,  518,  210,  210,  210,  516,  519,  210,  896,

      902,  210,  210,  210,  897,  520,  210,  210,  891,  210,
      210,  210,  898,  899,  900,  210,  210,  521,  901,  892,
      903,  210, 1431,  904, 1431, 1431,  905,  902,  906, 1431,
      210,  907,  520, 1431, 1431,  891,  210,  210,  210,  898,
      899,  908,  210,  210,  521, 1431,  892,  903,  210,  210,
      904,  210,  524,  905,  210,  906,  210,  522,  907,  210,
      523,  210,  525, 1431,  210,  210,  909,  210,  908, 1431,
      910, 1431,  210,  210, 1431,  210,  210,  210,  210,  524,
      210,  210, 1431,  210,  522,  210,  210,  523,  210,  525,
      526,  210,  210,  909,  210,  911,  210,  910,  210,  210,

      210,  527,  210,  210,  210, 1431,  912,  210,  210,  210,
      913,  210,  210, 1431,  914,  915,  210,  526, 1431, 1431,
     1431,  210,  911,  210, 1431,  210, 1431,  916,  527,  917,
      210,  918,  210,  912,  210,  210,  210,  913,  210,  210,
      528,  914,  915,  210,  210,  210,  529,  210,  210,  919,
      920,  530,  210,  210,  916,  210,  917,  210,  918,  210,
      210,  210, 1431,  921, 1431,  210,  210,  528,  922, 1431,
      531,  210,  210,  529,  210,  923,  919,  920,  530,  210,
      210,  210,  210,  210,  210, 1431,  924,  210,  210,  210,
      921,  534,  210,  210,  535,  922,  210,  531,  925, 1431,

      926,  210,  923,  927, 1431,  210,  928,  536,  210, 1431,
      210, 1431,  537,  924,  929,  210,  210,  210,  534,  538,
      210,  535, 1431,  210,  210,  925,  210,  926,  210,  930,
      927,  210,  210,  928,  536,  931,  210, 1431,  539,  537,
      210,  929,  932,  933,  210,  210,  538,  934,  541,  540,
      210,  210,  210,  210,  210,  935,  930,  936,  210,  210,
      937,  938,  931,  210,  210,  539, 1431,  210,  547,  932,
      933,  210,  210,  210,  934,  541,  540,  210,  210,  210,
      939,  210,  935,  210,  936,  940,  210,  937,  938, 1431,
     1431,  210,  542,  548, 1431,  547,  941, 1046,  210, 1047,

      210,  543, 1048,  210,  210,  210,  210,  939,  210,  544,
      210,  210,  940,  210, 1049,  210,  210,  210, 1431,  542,
      548,  549,  210,  941, 1046, 1431, 1047,  210,  543, 1048,
      210,  210, 1431,  210,  550,  210,  544, 1431,  210, 1431,
      210, 1049,  210,  210,  210,  210, 1050,  210,  549,  210,
     1051, 1431,  210,  551,  210, 1052, 1053,  210,  210,  552,
      210,  550, 1054, 1431,  210,  210,  210, 1055, 1431, 1056,
      210,  210,  210, 1050,  210, 1431,  210, 1051,  553,  210,
      551, 1431, 1052, 1053,  210,  210,  552,  210,  210, 1054,
      210,  210,  210,  210, 1055,  210, 1056,  210,  210, 1057,

      210, 1058,  556,  210, 1431,  553,  210,  554,  210,  210,
     1431,  210, 1059,  210, 1060,  210,  210,  210,  555, 1061,
     1062,  210,  210, 1063, 1431, 1064, 1057,  210, 1058,  556,
      210,  557,  210,  210,  554,  210,  210,  210,  210, 1059,
      210, 1060,  210,  210, 1065,  555, 1061, 1062,  210,  210,
     1063,  210, 1064,  558, 1066, 1431,  210,  210,  557,  210,
     1431,  210, 1067, 1068,  210,  559, 1069, 1070, 1431,  210,
     1431, 1065,  210, 1071, 1072, 1431,  210, 1073,  210,  210,
      558, 1066,  210,  210, 1431,  560, 1431,  564,  210, 1067,
     1068, 1431,  559, 1069, 1070,  210, 1431,  210, 1431,  210,

     1071, 1072,  565, 1431, 1073, 1074,  210,  210, 1431,  210,
     1431,  566,  560,  561,  564,  567, 1431, 1431,  210, 1431,
      562,  210,  210,  563,  210,  210, 1431, 1075, 1431,  565,
      210,  210, 1074, 1431,  210,  210, 1076,  568,  566,  210,
      561, 1077,  567,  569,  210,  210,  572,  562,  210,  210,
      563, 1078,  210,  210, 1075,  210, 1431,  210,  210, 1431,
      210, 1431,  210, 1076,  568,  210,  210, 1079, 1077, 1431,
      569,  210, 1080,  572, 1431, 1081,  210,  570, 1078, 1082,
      210,  210,  210,  210,  210, 1431,  210,  210,  210,  573,
      571,  210,  210,  210, 1079, 1083,  210, 1431, 1431, 1080,

     1431,  574, 1081, 1084,  570, 1431, 1082, 1431,  210, 1431,
      210,  210,  210,  210,  210,  210,  573,  571,  210,  210,
      210, 1431, 1083,  210,  210,  210,  708,  210,  574, 1087,
     1084, 1085,  210,  210, 1086,  210,  210,  210,  210,  210,
      210,  210, 1431,  210, 1088,  210,  210, 1089,  210, 1431,
     1431,  210,  210,  708,  210, 1431, 1087, 1431, 1085,  210,
      210, 1086,  210,  210,  210,  210, 1090,  210, 1091,  709,
      210, 1088,  210, 1092, 1089,  210,  210,  710,  210,  210,
      210, 1093,  210,  210,  210, 1431, 1094,  210,  210,  210,
     1095, 1096,  210, 1090, 1097, 1091,  709, 1098, 1431, 1431,

     1092, 1431, 1431,  210,  710,  210,  210,  210, 1093,  210,
      210,  210,  711, 1094,  210,  210,  210, 1095, 1096,  210,
      210, 1097,  210,  210, 1098,  210,  210,  210,  210,  712,
      210, 1099,  210,  210,  210,  210,  210, 1431,  210,  711,
      713,  210, 1100, 1101, 1431, 1431,  210,  210, 1431,  210,
      210, 1102,  210,  210,  210,  210,  712,  210, 1099,  210,
      210,  210,  210,  210,  210,  210,  210,  713,  210, 1100,
     1101,  210,  210,  210,  210,  714,  210,  715, 1102,  210,
      210, 1103,  210,  210,  210,  210, 1431,  210, 1431, 1431,
      210,  210,  210,  210,  716,  210, 1431, 1431,  210,  210,

     1431,  210,  714,  210,  715, 1431,  210,  210, 1103,  210,
      210,  210,  210,  717,  210,  718,  210,  210,  210,  210,
     1104,  716,  210,  210,  719,  210,  210,  210,  210, 1105,
     1106,  210,  210, 1431, 1107, 1431,  210,  210, 1108, 1109,
      717, 1431,  718,  210, 1431,  210, 1431, 1104, 1110, 1111,
      210,  719,  210,  210,  210,  210, 1105, 1106,  210,  210,
      720, 1107,  210,  210,  210, 1108, 1109,  210,  721, 1431,
      722,  210,  210,  210,  210, 1110, 1111,  724,  210, 1112,
     1113,  210, 1114,  210,  210,  723,  210,  720, 1431,  210,
     1431,  210, 1431,  725,  210,  721,  210,  722,  210,  210,

      210,  210, 1431, 1431,  724,  210, 1112, 1113,  210, 1114,
      210,  210,  723,  210,  210,  726,  210,  210,  210,  210,
      725,  210, 1431,  210,  210,  727,  210, 1431,  210,  210,
      729, 1115, 1431, 1431, 1431,  210, 1431, 1116, 1431, 1117,
      210,  210,  726,  210,  210, 1431,  210,  210,  210,  210,
      730,  210,  727,  210,  210,  210,  210,  729, 1115,  210,
      728,  210,  210,  210, 1116,  771, 1117,  210,  210,  210,
     1431, 1431,  210,  210,  210,  772,  210,  730, 1118, 1119,
     1120,  210,  210, 1121,  210,  210,  210,  728,  210,  731,
      210,  210,  771,  210,  210,  210,  210,  732,  210,  210,

      210, 1431,  772,  210, 1431, 1118, 1119, 1120, 1431,  210,
     1121,  210,  210, 1200, 1431, 1431,  731, 1431,  210, 1431,
      210,  210, 1431, 1201,  732,  210,  210, 1431,  210, 1202,
      210,  733, 1203,  735,  736,  734,  210, 1204,  210, 1205,
     1200,  210,  210, 1431,  210, 1431,  210, 1206, 1431,  210,
     1201, 1431, 1207,  210,  210,  210, 1202, 1431,  733, 1203,
      735,  736,  734,  210, 1204,  210, 1205,  737,  210,  210,
      210,  210,  210,  210, 1206,  738,  210,  210,  210, 1207,
      739,  210,  210,  741,  210,  210,  210, 1208,  210,  210,
     1209,  210, 1210,  210,  737,  740,  210,  210,  210,  210,

      210, 1431,  738, 1431,  210,  210, 1211,  739, 1431,  210,
      741,  210,  210,  210, 1208,  210,  210, 1209,  210, 1210,
      210, 1212,  740,  210,  210,  210,  742,  210,  744,  210,
      210,  210,  210, 1211,  210,  210,  745,  210,  210,  210,
      210,  210,  210, 1213,  210,  210,  743, 1431, 1212, 1431,
      210,  210, 1214,  742, 1431,  744,  210,  210,  210,  210,
     1431,  210,  210,  745,  210,  210,  210,  210,  210,  210,
     1213,  210,  210,  743,  746, 1215,  747,  210,  210, 1214,
      210,  210, 1216,  210, 1431,  210, 1431,  210,  210,  210,
      210, 1431, 1217,  210,  210, 1218, 1431, 1219, 1431,  210,

     1220,  746, 1215,  747,  748,  210, 1221,  210,  210, 1216,
      210,  210,  210,  210,  210,  210,  210,  210,  210, 1217,
      210,  210, 1218,  210, 1219,  749,  210, 1220, 1431, 1222,
      210,  748,  210, 1221,  210, 1223,  210,  750,  210, 1224,
      210,  210,  210, 1225, 1226,  210,  210, 1431, 1227, 1228,
      210, 1431,  749,  751, 1431,  210, 1222,  210, 1229,  210,
      210,  210, 1223,  210,  750,  210, 1224, 1230,  210,  210,
     1225, 1226,  210,  210,  210, 1227, 1228, 1431,  752,  210,
      751,  210,  210,  210,  210, 1229, 1231,  210,  753, 1232,
     1233, 1234,  210,  210, 1230,  754, 1431, 1235, 1431,  210,

     1236,  210,  210, 1431,  210,  752,  210, 1237,  210,  210,
      210,  210,  755, 1231,  210,  753, 1232, 1233, 1234, 1238,
      210, 1239,  754,  210, 1235,  210,  756, 1236,  210,  210,
      210,  210, 1240,  210, 1237,  210,  210, 1241,  210,  755,
     1431,  210,  210,  757,  210, 1431, 1238, 1431, 1239,  210,
      210, 1431,  210,  756,  210,  210, 1242,  210, 1431, 1240,
      210, 1243,  210, 1244, 1241,  210,  210,  758,  210,  210,
      757,  210,  759,  210,  210,  760,  210, 1245,  210,  210,
     1294,  210, 1295, 1242,  210,  210, 1297,  210, 1243, 1298,
     1244, 1299,  210,  210,  758,  210, 1300,  210, 1301,  759,

      210,  210,  760, 1302, 1245,  210,  210, 1294,  210, 1295,
      210,  210,  210, 1297,  210,  210, 1298,  761, 1299,  210,
      210, 1303,  762, 1300,  210, 1301,  210, 1304,  210, 1305,
     1302,  763, 1306,  210,  210,  210,  210,  210,  210, 1307,
     1308,  210,  210, 1431,  761, 1309,  210,  210, 1303,  762,
     1431, 1310, 1311,  210, 1304,  210, 1305, 1312,  763, 1306,
      210,  210,  210,  210,  210,  210, 1307, 1308,  210,  210,
      764, 1431, 1309,  210,  210,  210, 1313,  210, 1310, 1311,
     1314,  765,  210, 1315, 1312,  766,  210,  210,  210,  210,
     1431,  210, 1431,  210, 1316, 1342,  210,  764,  210, 1431,

     1343,  210,  210, 1313,  210, 1345, 1431, 1314,  765,  210,
     1315, 1346,  766,  210,  210,  210,  210,  768,  210,  767,
      210, 1316, 1342,  210,  210,  210,  210, 1343,  210, 1347,
     1431,  210, 1345,  769, 1296, 1296,  210, 1431, 1346, 1431,
      210, 1431,  210,  210,  768,  210,  767,  210, 1431, 1431,
      210,  210,  210,  210, 1348,  210, 1347,  770,  210, 1349,
      769, 1350, 1431,  210,  210, 1351,  210,  210,  210,  210,
      210,  210, 1431, 1344,  210,  210,  210,  773, 1352,  210,
      210, 1348, 1353, 1354,  770, 1355, 1349,  210, 1350,  774,
     1431,  210, 1351,  210,  210,  210, 1431,  210,  210,  210,

     1344, 1372,  210,  210,  773, 1352,  210,  210,  210, 1353,
     1354, 1431, 1355,  210,  210,  210,  774,  210,  210, 1431,
     1374,  210,  210,  775, 1431, 1431,  210,  210, 1372,  776,
     1431,  778, 1431,  210, 1375,  210,  210, 1376,  210,  210,
      210,  210,  210,  210,  210,  210,  210, 1374,  210,  210,
      775,  210,  777, 1431,  210,  210,  776,  210,  778, 1320,
     1296, 1375,  210,  210, 1376,  210,  210,  210,  210, 1377,
      210, 1431, 1381,  210, 1386,  210, 1388, 1389,  210,  777,
      781, 1431,  210, 1393,  210,  210, 1431,  210, 1396,  210,
     1397, 1431,  210, 1400,  210,  779, 1377,  210, 1359, 1381,

     1431, 1386, 1402, 1388, 1389,  780,  210,  781,  210,  210,
     1393,  210,  210,  210,  210, 1396,  210, 1397,  210,  210,
     1400,  210,  779, 1431,  210, 1359, 1373, 1373, 1403, 1402,
     1431, 1431,  780,  210,  782,  210,  210, 1406,  210,  210,
      210,  210, 1431,  210, 1408,  210,  210,  210,  210,  210,
      210,  210,  210, 1409,  210, 1403,  783,  210,  784,  210,
     1412,  782,  210,  210, 1406,  210,  210, 1431,  210, 1387,
      210, 1408,  785,  210,  210,  210,  210,  210,  210,  210,
     1409,  210, 1431,  783,  210,  784,  210, 1412, 1414,  210,
      210,  210,  210,  210,  786, 1416, 1387,  210,  210,  785,

     1418, 1420,  210,  210,  787,  210,  210,  210, 1380, 1373,
     1431,  210,  210, 1422, 1431, 1414,  210,  210,  210, 1431,
      210,  786, 1416, 1424, 1431,  210, 1431, 1418, 1420, 1431,
      210,  787,  210,  210,  210,  210, 1431,  210,  210,  210,
     1422,  788,  210,  210,  210, 1431,  210,  210,  210, 1431,
     1424, 1392,  790,  789, 1431, 1431, 1431, 1431,  210,  210,
     1431,  210,  210,  791,  210, 1431,  210, 1431,  788,  210,
      210,  210,  210,  210,  210,  210, 1431,  210, 1392,  790,
      789, 1431,  210, 1431, 1431,  210,  210, 1431,  210,  210,
      791,  210, 1431,  210, 1431,  792,  210,  210,  210,  210,

     1431,  210, 1431, 1431,  210,  210, 1431,  795, 1431,  210,
     1431, 1431,  210, 1431, 1431, 1431,  210,  210,  210, 1431,
     1431, 1431,  792,  210,  796, 1431,  210, 1431,  210,  793,
      210, 1431,  210, 1431,  795, 1431, 1431,  797, 1431,  210,
      210,  210,  210, 1431,  210, 1431, 1431,  210,  794, 1431,
     1431,  796,  210,  210, 1431, 1431,  793,  210,  210,  798,
      210, 1431, 1431, 1431,  797,  210,  799,  210,  210,  210,
      210,  210, 1431,  210,  210,  794, 1431, 1431,  210,  210,
     1431, 1431,  800,  210,  210,  210,  798,  210, 1431,  210,
      801, 1431,  210,  799,  210, 1431, 1431,  210,  210, 1431,

      210,  210, 1431,  210, 1431,  210, 1431, 1431,  210,  800,
      210,  210,  210,  210,  210, 1431,  210,  801, 1431,  210,
      802,  210, 1431, 1431,  210, 1431, 1431,  803,  210, 1431,
      210,  210, 1431,  210, 1431,  210, 1431, 1431,  210,  210,
      210,  210, 1431,  210, 1431, 1431,  210,  802, 1431, 1431,
      804,  210,  210, 1431,  803, 1431, 1431,  210,  210,  210,
      210,  210,  210, 1431, 1431,  210,  805, 1431, 1431, 1431,
      210,  210, 1431,  806, 1431, 1431,  808,  804, 1431,  210,
      210, 1431,  210,  210,  210,  210,  210,  210,  210,  210,
      210, 1431,  210,  805,  210,  210,  210,  807,  210, 1431,

      806,  210, 1431,  808, 1431, 1431,  210,  210, 1431,  210,
      210, 1431,  210,  210,  210,  210, 1431,  210, 1431,  210,
      210,  210,  210,  210,  807,  210, 1431, 1431,  210,  210,
     1431,  210,  210,  210,  210,  809,  210, 1431, 1431,  210,
      210,  210,  210,  810,  210, 1431, 1431,  210, 1431, 1431,
     1431, 1431,  210,  210, 1431,  210,  210,  811,  210,  210,
      210,  210,  809,  210, 1431,  210,  210,  812,  210,  210,
      810,  210, 1431, 1431,  210, 1431, 1431, 1431, 1431,  210,
      210,  210,  210,  210,  811, 1431, 1431,  210,  210,  813,
     1431, 1431,  210,  210,  812,  210,  210,  210, 1431, 1431,

     1431,  210,  210,  814, 1431, 1431,  210,  210,  210, 1431,
      210,  210, 1431,  210, 1431,  210,  813,  815,  210,  210,
      210,  210,  210,  210,  210,  816,  210,  210, 1431,  210,
      814,  210,  210, 1431,  210, 1431, 1431,  210,  210, 1431,
      210, 1431, 1431, 1431,  815,  210,  210, 1431,  210, 1431,
      210, 1431,  816,  210,  210, 1431, 1431, 1431,  210,  210,
     1431,  210, 1431,  210,  210,  817, 1431,  210,  210,  210,
      210, 1431,  819,  210,  210,  818, 1431,  210, 1431,  210,
     1431, 1431,  210, 1431,  820, 1431, 1431, 1431,  210, 1431,
      210,  210,  817,  210,  210,  210,  210,  210,  210,  819,

      210,  210,  818,  210,  210,  210,  210,  210, 1431,  210,
     1431,  820,  210, 1431,  210, 1431,  821,  210,  210, 1431,
      210,  210, 1431, 1431, 1431,  210,  210,  828,  822, 1431,
      210, 1431,  210, 1431,  210,  210, 1431,  823,  210,  210,
      210,  210,  210,  821,  210,  210, 1431,  210,  210,  210,
      210,  210,  824,  210,  828,  822,  210, 1431, 1431, 1431,
     1431,  210,  210, 1431,  823,  210, 1431,  210,  210,  210,
      210,  827,  210, 1431,  210,  210,  210,  210,  210,  824,
      210, 1431, 1431,  210, 1431, 1431, 1431, 1431,  210,  210,
     1431,  210,  825, 1431,  826,  210,  210,  210,  827, 1431,

     1431,  210,  210,  829, 1431, 1431, 1431,  210, 1431, 1431,
      210, 1431,  210,  210, 1431,  210,  210,  210,  210,  825,
      210,  826,  210,  210,  210,  210,  830, 1431,  210, 1431,
      829,  210, 1431, 1431, 1431, 1431,  210,  210, 1431,  210,
      210, 1431,  210, 1431,  210,  832, 1431,  210,  210,  210,
      210,  210,  210,  830,  210,  210,  210,  831,  210, 1431,
      210,  210,  210,  210,  210, 1431,  210, 1431, 1431,  210,
     1431, 1431,  832,  833,  210,  210, 1431,  210,  210, 1431,
      210,  210,  210,  210,  831,  210,  834,  210,  210,  210,
      210,  210,  210,  210,  835, 1431,  210, 1431,  836,  210,

      833,  210, 1431, 1431,  210,  210, 1431,  210, 1431, 1431,
     1431, 1431,  210,  834, 1431, 1431,  837,  210, 1431,  210,
      210,  835,  210, 1431, 1431,  836,  210,  210,  210, 1431,
      210,  210,  210, 1431,  838,  210, 1431, 1431, 1431,  210,
      210,  210, 1431,  837, 1431,  943,  210,  210, 1431,  210,
     1431,  210, 1431, 1431,  210,  210, 1431,  210,  210,  210,
      210,  838,  210, 1431,  944,  210,  210,  210,  210,  210,
      210,  210,  943,  210, 1431, 1431,  210,  210,  210,  210,
     1431,  210,  945, 1431,  210,  210, 1431,  210, 1431,  210,
      946,  944,  210, 1431, 1431, 1431,  210,  210,  210, 1431,

      210, 1431,  210,  210,  210, 1431,  210,  210,  210,  945,
      948,  210,  210, 1431, 1431,  947,  210,  946,  210, 1431,
      210,  210, 1431,  210,  949,  210, 1431,  210,  210,  210,
      210, 1431, 1431,  210,  210, 1431, 1431,  948, 1431,  210,
     1431, 1431,  210, 1431,  950,  210, 1431,  210,  210,  210,
      210,  949,  210, 1431,  210,  210,  951,  210, 1431, 1431,
      210, 1431, 1431,  210, 1431,  210,  210, 1431,  952,  210,
      210,  950,  210,  210,  210,  210,  210, 1431,  210,  210,
     1431,  210, 1431,  951,  210, 1431, 1431, 1431, 1431,  953,
      210, 1431,  210,  210, 1431,  952,  210,  210,  210,  210,

      210,  210,  210,  210,  954,  210,  210,  210,  210,  210,
     1431,  210, 1431, 1431,  210,  210,  953,  210, 1431,  210,
     1431, 1431,  210,  210, 1431,  210,  210,  210,  210, 1431,
      210,  954, 1431,  210,  210,  210,  210, 1431,  210, 1431,
     1431,  210,  210, 1431,  210,  210,  210,  210,  955,  210,
     1431, 1431,  210,  210,  210,  210,  210,  210,  957,  210,
      210,  210,  958, 1431, 1431,  210,  210, 1431, 1431,  210,
     1431,  210,  210,  210,  210,  955, 1431, 1431, 1431,  210,
      210,  956,  210,  210,  210,  957,  210,  210,  210,  958,
     1431, 1431,  210,  210, 1431, 1431,  210, 1431,  210,  210,

      210,  210, 1431, 1431, 1431,  959,  210,  210,  956,  210,
      210,  210,  210,  210,  210,  210, 1431,  210, 1431,  210,
      210,  960,  210, 1431, 1431,  210,  210, 1431,  210,  210,
     1431,  210,  959,  210, 1431, 1431,  962,  210,  210,  210,
      210,  210,  210,  210,  210,  210, 1431,  210,  960,  210,
      210,  961,  210, 1431, 1431,  210,  210,  963,  210, 1431,
     1431, 1431, 1431,  962,  210, 1431,  210,  210,  210,  210,
      210,  210,  210,  964,  210,  965,  210,  210,  961,  210,
     1431, 1431,  210,  210,  963,  210, 1431, 1431, 1431, 1431,
      210,  210, 1431,  210,  210,  210,  210,  210,  210,  210,

      964,  210,  965,  210,  210, 1431,  210, 1431, 1431,  210,
      210,  966,  210,  210, 1431, 1431, 1431,  210,  210, 1431,
     1431, 1431,  210,  210,  210, 1431,  210,  210,  967,  210,
     1431,  210, 1431, 1431,  210,  210,  210,  210,  966,  210,
      210,  210,  210,  210,  968,  210, 1431,  210,  210,  969,
      210, 1431, 1431,  210,  210,  967,  210, 1431, 1431, 1431,
     1431,  210,  210, 1431,  210, 1431,  210, 1431,  210,  210,
      210,  968,  970, 1431,  210,  210,  969, 1431, 1431, 1431,
      210, 1431,  210,  210,  210,  210, 1431,  972,  971,  210,
      210, 1431, 1431, 1431,  210,  210,  210, 1431,  210,  970,

     1431, 1431, 1431,  210, 1431, 1431, 1431, 1431,  210,  210,
      210,  210,  210, 1431,  972,  971,  210,  210, 1431, 1431,
     1431,  210,  210,  210,  973,  210,  974,  210,  210,  210,
      210, 1431, 1431,  210,  210,  210, 1431, 1431,  210,  210,
      210, 1431,  210, 1431, 1431, 1431, 1431,  210, 1431, 1431,
     1431,  973,  210,  974,  210,  210,  210, 1431, 1431, 1431,
      210,  210, 1431, 1431, 1431,  210,  210,  210,  210,  210,
      210, 1431, 1431, 1431,  210,  210, 1431, 1431, 1431,  210,
      210,  210,  210,  210,  210,  975,  976, 1431,  210,  210,
     1431, 1431, 1431,  210,  210,  210, 1431,  210, 1431, 1431,

     1431, 1431,  210, 1431, 1431, 1431, 1431,  210,  210,  210,
      210,  210,  975,  976, 1431,  210,  210,  210, 1431,  210,
      210,  210, 1431,  210,  210,  210,  977, 1431, 1431,  210,
      210,  978, 1431, 1431, 1431,  210,  979, 1431, 1431, 1431,
     1431, 1431, 1431, 1431,  210, 1431,  210,  210, 1431,  210,
      210,  210,  210,  977,  210,  980,  210,  210,  978,  210,
     1431, 1431,  210,  979, 1431, 1431,  210, 1431,  210, 1431,
      981, 1431, 1431,  210,  210, 1431,  210,  210,  210,  210,
     1431,  210,  980, 1431,  210, 1431,  210, 1431, 1431,  210,
     1431, 1431, 1431,  210, 1431,  210,  210,  981,  210, 1431,

      210, 1431, 1431,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  983,  210,  982,  210,  210, 1431,  210,
      984, 1431,  210,  210, 1431,  210, 1431, 1431, 1431, 1431,
      210,  210, 1431,  210,  210,  210,  210,  210,  210,  210,
      983,  210,  982,  210,  210, 1431,  210,  984, 1431,  210,
      210, 1431,  210, 1431,  210, 1431,  210,  210,  210, 1431,
      210,  210,  210, 1431, 1431,  210,  210,  985, 1431, 1431,
      210, 1431, 1431, 1431, 1431, 1431, 1431,  210,  210,  210,
      210,  210, 1431,  210,  210,  210, 1431, 1431,  210,  210,
      210, 1431, 1431,  210,  985, 1431,  210,  210,  210,  210,

      986, 1431, 1431,  210,  210,  210, 1431,  210,  210,  210,
     1431, 1431,  210, 1431, 1431, 1431, 1431,  210, 1431, 1431,
     1431, 1431, 1431,  210,  210,  210,  210,  986, 1431, 1431,
      210,  210,  210, 1431,  987,  210,  210, 1431,  210,  210,
      210,  210, 1431,  210,  210,  210, 1431, 1431,  988, 1431,
      210, 1431, 1431,  210, 1431,  989, 1431, 1431, 1431,  210,
     1431,  987,  210, 1431,  210,  210,  210,  210,  210,  210,
      210,  210,  210, 1431,  210,  988, 1431,  210, 1431, 1431,
      210,  210,  989,  210, 1431, 1431, 1431,  990,  210,  210,
      210,  210,  210,  210, 1431, 1431,  210,  210, 1431, 1431,

     1431,  210,  991, 1431, 1431, 1431, 1431, 1431,  210, 1431,
      210, 1431, 1431, 1431,  990,  210,  210,  210,  210,  210,
      210, 1431,  992,  210,  210,  210, 1431,  210,  210,  991,
     1431,  993,  210, 1431,  210, 1431,  210,  210, 1431, 1431,
     1431,  210, 1431,  210, 1431,  210,  210, 1431, 1431,  992,
      210, 1431,  210, 1431,  210,  210, 1431, 1431,  993,  210,
     1431,  210, 1431,  210,  210,  994, 1431,  996,  210,  210,
      210, 1431,  210,  210,  210, 1431,  995,  210,  210,  210,
      210,  210,  210,  210, 1431,  210, 1431, 1431,  210, 1431,
      210, 1431,  994,  210,  996, 1431,  210,  210, 1431,  210,

     1431,  210, 1431,  995,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210, 1431,
      210,  210,  997,  210, 1431,  210,  210,  210, 1431, 1431,
     1431, 1431,  210, 1431, 1431, 1431, 1431,  210,  210, 1431,
      210,  210, 1431,  210,  998,  210,  210, 1431,  210,  997,
      210,  210,  210,  210,  210, 1431,  210, 1431,  999,  210,
     1431, 1431, 1431, 1431,  210,  210, 1431,  210,  210, 1431,
      210,  998,  210,  210, 1431,  210, 1431,  210,  210, 1000,
      210, 1431, 1431,  210, 1431,  999,  210, 1431,  210, 1431,
     1431, 1431,  210,  210,  210,  210, 1431,  210,  210,  210,

     1431, 1431,  210, 1431,  210, 1431, 1000,  210, 1003,  210,
     1431,  210,  210,  210,  210,  210, 1001, 1002, 1431,  210,
      210,  210, 1431, 1431,  210,  210, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1003,  210, 1431,  210,  210,
     1431,  210, 1431, 1001, 1002, 1431,  210,  210,  210,  210,
     1431,  210, 1005, 1004,  210,  210,  210,  210,  210,  210,
     1431, 1431,  210,  210, 1431, 1431, 1431,  210,  210, 1431,
     1431, 1431, 1431, 1431,  210, 1431,  210, 1431, 1431, 1005,
     1004,  210,  210,  210,  210,  210,  210, 1006, 1431,  210,
      210, 1431, 1007, 1431,  210,  210,  210, 1431,  210,  210,

     1431,  210, 1431,  210, 1431, 1431,  210, 1431,  210, 1431,
      210,  210,  210, 1431, 1006, 1431, 1008,  210, 1431, 1007,
     1431, 1431,  210,  210, 1431,  210,  210, 1431,  210, 1431,
      210, 1431, 1431,  210,  210,  210,  210,  210,  210,  210,
     1009,  210, 1431, 1008,  210,  210,  210,  210, 1431,  210,
     1431, 1431,  210,  210, 1010,  210, 1431,  210, 1431, 1431,
      210,  210, 1431,  210, 1431,  210, 1431, 1009,  210, 1431,
     1431, 1431,  210,  210,  210, 1431, 1431, 1431, 1431,  210,
      210, 1010,  210, 1011,  210, 1431,  210,  210,  210,  210,
     1012,  210,  210,  210, 1431, 1431,  210,  210,  210,  210,

     1431,  210, 1431, 1431,  210, 1431, 1431, 1431, 1431,  210,
     1011, 1431, 1431,  210, 1431,  210,  210, 1012,  210, 1013,
      210, 1431, 1014,  210,  210,  210,  210, 1431,  210, 1431,
      210,  210,  210,  210, 1015,  210,  210,  210, 1431, 1431,
      210,  210,  210,  210, 1431,  210, 1013, 1431,  210, 1014,
     1431, 1431, 1431,  210, 1431, 1431, 1431,  210, 1431,  210,
      210, 1015,  210, 1431,  210, 1431, 1431,  210,  210,  210,
      210,  210,  210,  210, 1431,  210, 1431, 1431,  210, 1431,
      210, 1431, 1431,  210,  210, 1016,  210,  210, 1431,  210,
     1431,  210, 1431, 1017,  210,  210,  210,  210,  210,  210,

      210, 1431,  210, 1018, 1431,  210, 1431,  210, 1431, 1431,
      210,  210, 1016,  210,  210, 1019,  210, 1431,  210, 1431,
     1017,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
     1018,  210,  210,  210,  210, 1431, 1431,  210,  210,  210,
     1020,  210, 1019,  210, 1431, 1431,  210, 1431, 1431, 1431,
     1431,  210,  210, 1431,  210, 1431, 1431, 1431,  210,  210,
      210, 1431, 1431, 1022,  210,  210,  210, 1020,  210,  210,
      210, 1021,  210,  210,  210,  210,  210,  210,  210,  210,
     1431,  210,  210, 1431,  210, 1431, 1023,  210, 1431, 1431,
     1022, 1431, 1431,  210, 1431,  210,  210, 1431, 1021,  210,

      210,  210,  210,  210,  210,  210,  210, 1431,  210,  210,
     1431,  210, 1431, 1023,  210, 1431,  210, 1024,  210,  210,
      210, 1431,  210,  210,  210, 1431, 1431,  210,  210,  210,
     1431, 1431,  210, 1025, 1431, 1431, 1431, 1431, 1431, 1431,
      210, 1431,  210,  210, 1024,  210,  210,  210, 1431, 1431,
      210,  210,  210, 1431, 1431,  210,  210, 1431, 1026, 1431,
     1025,  210, 1431,  210,  210, 1431,  210,  210,  210,  210,
     1431,  210, 1027,  210,  210, 1028,  210, 1431, 1431,  210,
     1431, 1431,  210, 1431,  210, 1026, 1431, 1431,  210,  210,
      210,  210, 1431,  210,  210,  210, 1431, 1431,  210, 1027,

      210, 1431, 1028,  210, 1431,  210, 1431,  210, 1029,  210,
     1431,  210,  210,  210, 1431,  210,  210,  210, 1431, 1431,
      210,  210, 1431, 1431,  210,  210,  210, 1431, 1431, 1431,
     1431,  210,  210, 1431,  210, 1029,  210, 1431, 1431,  210,
      210, 1431,  210,  210,  210,  210, 1431,  210, 1431, 1431,
     1030,  210,  210,  210,  210,  210,  210,  210,  210,  210,
     1431, 1031, 1431,  210,  210, 1431,  210, 1431, 1431,  210,
      210, 1431,  210, 1431, 1431, 1431, 1032, 1030, 1431, 1431,
     1431,  210,  210,  210,  210,  210,  210,  210, 1031, 1431,
     1431,  210,  210,  210, 1431, 1431,  210,  210,  210,  210,

      210, 1034, 1431, 1032, 1431,  210,  210, 1033, 1431, 1431,
      210,  210,  210, 1431,  210, 1431, 1431, 1431, 1431,  210,
     1431, 1431, 1431, 1431,  210,  210,  210,  210, 1034, 1036,
     1431, 1431,  210,  210, 1033, 1431, 1431,  210,  210,  210,
      210,  210,  210, 1431, 1431, 1431,  210,  210, 1035, 1431,
     1431,  210,  210,  210, 1431,  210, 1036, 1431, 1431, 1431,
      210, 1037, 1431, 1431, 1431,  210,  210,  210,  210,  210,
     1431, 1431, 1431,  210,  210, 1035, 1431, 1431,  210,  210,
      210, 1431,  210,  210, 1431,  210, 1039,  210, 1037, 1038,
      210,  210,  210,  210, 1431,  210, 1431, 1431,  210, 1431,

     1040, 1431, 1431,  210, 1431, 1431, 1431,  210, 1431,  210,
      210, 1431,  210, 1039,  210, 1431, 1038,  210,  210,  210,
      210, 1431,  210, 1431, 1431,  210, 1431, 1040, 1431, 1041,
      210, 1431, 1431,  210,  210,  210,  210,  210, 1431,  210,
      210,  210, 1431, 1431,  210,  210,  210, 1431, 1431,  210,
     1431, 1431, 1431, 1431, 1431, 1431, 1041, 1431, 1431, 1431,
      210,  210,  210,  210,  210, 1431,  210,  210,  210, 1431,
     1042,  210,  210,  210, 1431,  210,  210,  210, 1431, 1431,
     1431, 1431,  210, 1431, 1043, 1431, 1431,  210,  210, 1431,
      210,  210, 1431,  210,  210,  210,  210, 1042,  210, 1431,

      210,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
     1431, 1043, 1044, 1431,  210, 1431, 1431,  210,  210, 1431,
      210,  210, 1431,  210,  210,  210,  210, 1431,  210, 1431,
      210,  210,  210,  210,  210,  210,  210,  210,  210, 1044,
      210, 1431,  210, 1431,  210,  210, 1431,  210, 1431, 1431,
      210,  210, 1123,  210,  210, 1431,  210, 1431,  210, 1431,
     1431,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
     1124, 1431,  210,  210,  210,  210, 1431,  210, 1431, 1123,
      210,  210, 1125,  210, 1431,  210, 1431,  210,  210,  210,
     1431, 1431, 1431,  210,  210, 1431, 1126, 1124, 1431,  210,

      210, 1431,  210,  210, 1431,  210,  210,  210,  210, 1125,
      210, 1431,  210,  210,  210,  210,  210, 1431,  210, 1431,
     1127,  210, 1431, 1126, 1431, 1431,  210,  210, 1431,  210,
      210, 1431,  210,  210,  210,  210,  210,  210,  210,  210,
      210, 1431,  210,  210, 1128,  210, 1129, 1127,  210, 1431,
     1431, 1431, 1130, 1431,  210, 1431,  210,  210, 1431,  210,
      210,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
      210, 1128,  210, 1129, 1131,  210, 1431, 1431, 1431, 1130,
     1431, 1431, 1431,  210,  210,  210,  210,  210, 1431,  210,
      210,  210, 1431, 1431,  210,  210,  210, 1431, 1431,  210,

     1431, 1131,  210, 1431, 1132, 1431,  210, 1431, 1133,  210,
      210, 1431,  210,  210,  210, 1431, 1431,  210,  210, 1431,
     1431, 1431,  210, 1431, 1431, 1431, 1431, 1431, 1431,  210,
      210, 1132,  210,  210, 1431, 1133,  210,  210, 1134, 1431,
      210,  210,  210, 1431,  210,  210,  210, 1135,  210, 1431,
      210,  210, 1431, 1431, 1431,  210,  210,  210, 1431,  210,
      210, 1431, 1431, 1431,  210, 1134, 1431, 1431, 1431,  210,
     1431,  210, 1136,  210, 1135,  210, 1431,  210,  210,  210,
     1431,  210,  210,  210, 1431, 1431,  210,  210,  210, 1431,
      210,  210, 1431, 1431, 1431,  210, 1431, 1431, 1431, 1136,

      210, 1431,  210, 1431, 1137, 1431,  210, 1431,  210,  210,
     1138, 1431, 1431,  210,  210,  210, 1431,  210,  210, 1431,
     1431,  210,  210,  210, 1431, 1431, 1431,  210,  210,  210,
     1431, 1137, 1431,  210, 1141, 1431,  210, 1138, 1431, 1139,
     1431,  210,  210, 1431,  210,  210, 1431,  210,  210,  210,
      210, 1431,  210, 1431,  210,  210,  210,  210,  210, 1140,
      210, 1141, 1431,  210, 1431, 1431, 1139, 1431,  210,  210,
     1431,  210,  210, 1431,  210, 1142,  210,  210, 1431,  210,
     1431,  210,  210,  210,  210,  210, 1140,  210, 1431, 1143,
      210, 1431, 1431, 1431, 1431,  210,  210, 1431,  210,  210,

     1431,  210, 1142,  210,  210, 1431,  210, 1144,  210,  210,
      210,  210,  210, 1431,  210, 1431, 1143,  210, 1431, 1431,
     1431, 1431,  210,  210, 1431,  210,  210, 1431,  210,  210,
      210, 1146, 1431,  210, 1144,  210,  210,  210,  210,  210,
      210,  210,  210, 1431,  210, 1431, 1147,  210, 1145,  210,
     1431, 1431,  210,  210, 1431,  210,  210, 1148, 1146, 1431,
      210, 1431, 1431,  210,  210,  210,  210,  210,  210,  210,
     1431,  210, 1431, 1147,  210, 1145,  210, 1431, 1431,  210,
      210, 1431,  210, 1431, 1148, 1431, 1431,  210,  210, 1431,
      210,  210,  210,  210, 1431,  210, 1149,  210,  210,  210,

      210, 1431, 1431,  210,  210, 1150,  210, 1431,  210,  210,
     1431, 1431, 1431, 1151, 1431,  210, 1431,  210,  210, 1431,
     1431, 1431,  210, 1149,  210, 1431,  210,  210, 1431, 1431,
     1431,  210, 1150,  210, 1152,  210,  210,  210, 1431,  210,
     1151, 1153, 1431, 1431,  210,  210,  210, 1431,  210,  210,
      210, 1431,  210,  210, 1431, 1431, 1431,  210,  210, 1431,
     1431, 1152,  210, 1431,  210, 1431,  210, 1431, 1153, 1431,
     1431,  210, 1431,  210, 1431,  210,  210,  210, 1431,  210,
      210,  210, 1431,  210,  210,  210, 1431, 1431,  210,  210,
      210, 1431,  210,  210, 1431, 1431, 1431,  210, 1431, 1431,

     1431, 1154,  210, 1431,  210, 1431,  210, 1431,  210, 1431,
      210,  210, 1155, 1431, 1431,  210,  210,  210, 1431,  210,
      210, 1431, 1431, 1156,  210,  210, 1431, 1431, 1154,  210,
      210,  210, 1431,  210,  210,  210,  210, 1158,  210, 1155,
     1431, 1157,  210,  210,  210, 1431,  210, 1431, 1431,  210,
     1156, 1431,  210,  210,  210,  210, 1431,  210, 1431, 1431,
      210,  210,  210,  210, 1158,  210, 1431, 1431, 1157,  210,
     1431,  210,  210,  210,  210, 1431,  210, 1431, 1431,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210, 1431,
      210, 1159,  210,  210, 1431,  210, 1431, 1431,  210,  210,

     1431,  210,  210, 1431,  210, 1431,  210, 1431, 1431,  210,
      210,  210,  210,  210,  210,  210, 1431,  210, 1159, 1431,
      210, 1431,  210, 1161, 1431,  210,  210, 1431,  210,  210,
      210,  210,  210,  210, 1160, 1431,  210,  210,  210, 1431,
     1431,  210,  210, 1431,  210, 1431,  210, 1431, 1431, 1431,
     1161, 1162, 1431,  210, 1163,  210,  210,  210, 1431,  210,
      210, 1160, 1431, 1431,  210,  210, 1431, 1431, 1164,  210,
      210,  210,  210,  210,  210,  210, 1431, 1431, 1162,  210,
      210, 1163, 1431,  210,  210, 1431,  210, 1431,  210, 1431,
     1431, 1431, 1431,  210, 1431, 1164, 1431,  210,  210,  210,

     1431,  210,  210, 1431, 1165, 1431,  210,  210, 1431, 1431,
     1431,  210,  210,  210,  210,  210,  210, 1431,  210,  210,
      210, 1431, 1431,  210,  210,  210, 1431, 1431,  210, 1431,
      210, 1165,  210, 1431, 1431, 1431, 1431,  210, 1431,  210,
     1431,  210,  210,  210, 1431,  210,  210, 1166, 1431, 1431,
      210,  210, 1431, 1431,  210,  210,  210,  210,  210,  210,
      210,  210, 1431, 1431,  210, 1167,  210, 1431, 1431,  210,
      210, 1168, 1431, 1431, 1166, 1431, 1431, 1431, 1431, 1431,
     1431,  210,  210,  210,  210,  210, 1431,  210,  210,  210,
     1431, 1431, 1167,  210,  210, 1431, 1431,  210, 1168, 1170,

      210, 1431,  210,  210, 1431,  210, 1431,  210, 1169,  210,
      210,  210,  210, 1431, 1431,  210,  210, 1431, 1431, 1431,
     1431,  210, 1431, 1431, 1431, 1431, 1170,  210, 1431,  210,
      210, 1431,  210, 1431,  210, 1169,  210,  210,  210,  210,
     1431, 1431,  210,  210, 1171,  210, 1431,  210,  210,  210,
     1431,  210,  210, 1431, 1431, 1431,  210,  210, 1431, 1431,
     1431,  210, 1431,  210, 1431,  210, 1431, 1431, 1431, 1431,
      210, 1171,  210, 1172,  210,  210,  210, 1431,  210,  210,
      210, 1431,  210,  210,  210, 1431, 1431,  210,  210,  210,
     1431,  210,  210, 1431, 1431, 1174,  210, 1173, 1431, 1431,

     1172,  210, 1431,  210, 1431,  210, 1431,  210, 1431,  210,
      210, 1431, 1431, 1431,  210,  210,  210, 1431,  210,  210,
     1431, 1431, 1174,  210, 1173, 1431, 1431,  210,  210,  210,
      210, 1431,  210, 1175,  210, 1431, 1431,  210,  210,  210,
      210,  210,  210,  210, 1176,  210, 1431, 1431,  210, 1431,
      210, 1431, 1431,  210,  210, 1177,  210, 1431, 1431, 1431,
     1175,  210,  210, 1431,  210,  210,  210,  210,  210,  210,
      210, 1176,  210, 1178,  210,  210,  210,  210,  210, 1431,
      210, 1431, 1177,  210, 1431,  210, 1431,  210,  210,  210,
     1431,  210,  210, 1179, 1431, 1431,  210,  210, 1431, 1431,

     1178,  210, 1431,  210,  210,  210,  210, 1431, 1431, 1431,
      210,  210,  210, 1431,  210,  210,  210, 1180, 1431,  210,
     1179, 1431, 1431, 1431,  210, 1431, 1181, 1431,  210, 1431,
      210,  210, 1431,  210,  210,  210,  210, 1431,  210, 1431,
      210,  210, 1431,  210, 1180, 1431,  210, 1431, 1431, 1431,
     1431, 1431,  210, 1181,  210,  210, 1431,  210, 1431,  210,
     1182,  210,  210,  210,  210, 1431, 1431,  210,  210, 1431,
      210, 1431,  210,  210, 1431, 1183, 1431,  210,  210,  210,
      210,  210,  210, 1431, 1431,  210,  210, 1182, 1184, 1431,
      210,  210, 1431, 1431, 1431, 1431,  210,  210,  210,  210,

     1431, 1431, 1183,  210,  210,  210, 1431,  210,  210,  210,
     1431, 1185,  210, 1431,  210, 1184,  210,  210, 1431, 1431,
     1431,  210,  210,  210,  210,  210,  210, 1431, 1431,  210,
      210, 1431, 1431, 1431,  210,  210, 1431, 1431, 1185, 1431,
      210,  210,  210,  210, 1431, 1431, 1431, 1186,  210,  210,
     1431,  210,  210,  210, 1431, 1431,  210, 1431,  210, 1431,
      210,  210, 1431, 1431, 1187,  210, 1431,  210, 1431,  210,
      210, 1431, 1431, 1431, 1186, 1431,  210, 1431,  210,  210,
     1431, 1431, 1431,  210, 1188,  210, 1431,  210,  210, 1189,
     1431, 1187,  210, 1431, 1431, 1190, 1431,  210, 1431, 1431,

      210, 1431,  210,  210, 1431,  210,  210,  210,  210, 1431,
      210, 1188,  210,  210, 1431,  210, 1189, 1431,  210,  210,
     1431, 1191, 1190, 1431, 1431, 1431,  210,  210, 1431,  210,
      210,  210,  210,  210,  210,  210, 1431,  210, 1431,  210,
      210, 1431,  210, 1431, 1431,  210,  210, 1192, 1191, 1431,
     1431, 1431, 1193,  210,  210, 1431,  210,  210,  210,  210,
      210,  210,  210, 1431,  210, 1431,  210,  210, 1431,  210,
     1431, 1194,  210, 1431, 1192, 1431, 1431, 1431,  210, 1193,
      210,  210, 1431,  210,  210,  210,  210,  210,  210,  210,
      210,  210, 1195,  210,  210, 1431,  210, 1431, 1194,  210,

     1431, 1431,  210, 1431,  210,  210, 1431,  210,  210,  210,
      210,  210,  210,  210,  210, 1196, 1431,  210,  210, 1195,
      210, 1197, 1431,  210, 1431, 1431, 1431, 1198, 1431,  210,
     1431,  210,  210, 1431,  210,  210,  210,  210,  210,  210,
      210,  210, 1196, 1431,  210,  210, 1431,  210, 1197, 1431,
      210,  210, 1431,  210, 1198, 1431, 1431, 1431,  210,  210,
     1431,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
     1431,  210,  210, 1431,  210, 1431, 1431,  210,  210, 1247,
      210, 1431, 1431, 1431, 1431,  210,  210, 1431,  210,  210,
      210,  210,  210,  210, 1248, 1431,  210, 1431,  210,  210,

     1431,  210, 1431, 1249,  210, 1431, 1247, 1431, 1431, 1431,
      210, 1431,  210,  210, 1431,  210,  210,  210,  210,  210,
      210, 1248,  210,  210, 1431,  210,  210, 1431,  210, 1431,
     1249,  210, 1431, 1431,  210, 1431, 1250,  210, 1431,  210,
      210,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
      210, 1431,  210, 1431, 1431,  210, 1431, 1252,  210, 1431,
     1251,  210, 1431, 1250,  210,  210,  210,  210,  210,  210,
      210,  210, 1431,  210,  210, 1431,  210, 1431, 1431,  210,
     1431, 1431, 1431, 1431, 1252,  210, 1431, 1251,  210, 1431,
      210,  210,  210,  210, 1431,  210, 1253,  210,  210,  210,

      210,  210,  210,  210,  210, 1431, 1254, 1431, 1431,  210,
     1255,  210, 1431, 1431,  210,  210, 1431,  210,  210, 1431,
      210, 1431,  210, 1253, 1431,  210,  210,  210,  210,  210,
      210,  210, 1256, 1254,  210, 1431,  210, 1255,  210,  210,
     1431,  210, 1431, 1431,  210,  210,  210,  210,  210, 1431,
     1431, 1431,  210,  210, 1431, 1431, 1431,  210,  210, 1256,
      210,  210,  210, 1431, 1431, 1431,  210,  210, 1257, 1431,
     1431,  210,  210,  210,  210,  210,  210, 1431, 1431, 1431,
      210, 1258, 1431, 1431, 1431,  210,  210,  210, 1431,  210,
      210, 1259,  210, 1431,  210, 1257, 1431,  210, 1431,  210,

     1260,  210,  210,  210, 1431, 1431, 1431, 1431, 1258,  210,
     1431,  210, 1431,  210, 1431, 1431,  210,  210, 1259,  210,
     1431,  210, 1431, 1261,  210,  210, 1431, 1260, 1431,  210,
      210, 1431,  210, 1431,  210,  210,  210, 1431,  210,  210,
     1262, 1431, 1431,  210,  210, 1431, 1431, 1431,  210, 1431,
     1261,  210,  210,  210, 1431, 1431, 1431,  210,  210,  210,
     1263,  210,  210,  210, 1431, 1431,  210, 1262, 1431, 1431,
      210,  210,  210, 1431,  210, 1431,  210,  210,  210, 1431,
      210,  210,  210, 1431, 1264,  210,  210, 1263, 1431, 1431,
      210, 1431, 1431,  210, 1431,  210, 1431,  210, 1431,  210,

      210,  210, 1431,  210,  210,  210, 1431, 1431,  210,  210,
     1431, 1264,  210,  210,  210, 1431,  210, 1431,  210,  210,
      210, 1431,  210,  210,  210, 1431, 1431,  210,  210, 1431,
     1431, 1431,  210, 1431, 1431,  210, 1431,  210, 1431,  210,
     1431,  210,  210,  210, 1431,  210,  210,  210, 1431, 1265,
      210,  210, 1431, 1431, 1431,  210,  210, 1431,  210,  210,
     1431,  210,  210,  210,  210,  210,  210, 1266,  210,  210,
     1431,  210,  210, 1431,  210, 1431, 1265,  210, 1431, 1431,
     1431, 1431, 1431,  210, 1431,  210,  210, 1431,  210,  210,
      210,  210,  210,  210, 1266,  210,  210, 1267,  210,  210,

     1268,  210, 1431,  210,  210,  210, 1431,  210, 1431,  210,
      210, 1431, 1431, 1431,  210,  210,  210, 1431,  210,  210,
     1431, 1431, 1431,  210, 1267, 1431, 1431, 1268,  210, 1431,
      210,  210,  210,  210,  210, 1431,  210,  210,  210, 1431,
     1431,  210,  210,  210, 1431,  210,  210,  210, 1431,  210,
     1431,  210,  210, 1431, 1431, 1431,  210,  210,  210, 1431,
      210,  210, 1431, 1431, 1431,  210, 1431, 1431, 1431, 1431,
      210, 1431,  210,  210,  210,  210,  210, 1431,  210,  210,
      210, 1431, 1431,  210,  210,  210, 1431,  210,  210,  210,
     1431,  210, 1431,  210,  210, 1431, 1431, 1269,  210,  210,

      210, 1431,  210,  210, 1431, 1431, 1431,  210, 1270, 1431,
     1431, 1431,  210, 1431,  210,  210,  210,  210,  210, 1431,
      210,  210,  210, 1271, 1269,  210,  210,  210, 1431, 1431,
      210,  210, 1431,  210,  210, 1270,  210, 1431,  210, 1431,
     1431,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
     1271, 1431,  210, 1431,  210, 1431, 1431,  210,  210, 1431,
      210,  210, 1431,  210,  210,  210,  210, 1431,  210, 1431,
      210, 1272,  210,  210,  210,  210,  210,  210, 1273,  210,
      210, 1431,  210, 1431,  210,  210, 1431,  210, 1431, 1431,
      210,  210, 1431,  210,  210, 1431,  210, 1274, 1272, 1431,

     1431,  210,  210,  210,  210, 1273,  210,  210,  210,  210,
      210, 1431,  210, 1431,  210,  210, 1431,  210, 1431, 1431,
      210,  210, 1431,  210, 1274, 1431, 1431,  210,  210,  210,
     1431, 1431, 1431,  210,  210,  210,  210,  210,  210,  210,
     1431, 1431,  210,  210, 1275, 1431, 1431,  210,  210, 1431,
     1431, 1431, 1276, 1431,  210,  210,  210,  210, 1431, 1431,
     1431,  210,  210,  210, 1431,  210,  210,  210, 1431, 1431,
      210, 1275, 1431, 1277, 1431,  210,  210, 1431,  210, 1276,
     1431, 1431,  210,  210,  210, 1431, 1431, 1431,  210,  210,
     1278, 1431, 1431, 1431,  210, 1431, 1431,  210, 1431,  210,

     1277, 1431, 1431,  210,  210,  210,  210, 1431,  210,  210,
      210, 1431, 1431,  210, 1431,  210, 1431, 1278,  210, 1279,
      210, 1431,  210, 1431,  210, 1431,  210,  210, 1431, 1431,
     1431,  210,  210,  210, 1431,  210,  210, 1431, 1431, 1280,
      210, 1431, 1281, 1431, 1431,  210, 1279,  210,  210,  210,
      210,  210, 1431,  210,  210,  210, 1431, 1431,  210,  210,
      210, 1431, 1431,  210, 1431, 1431, 1280, 1431, 1431, 1281,
     1431, 1431,  210, 1431,  210,  210, 1431,  210,  210, 1282,
      210,  210,  210,  210,  210,  210, 1431,  210, 1283, 1431,
      210, 1431, 1431,  210, 1431,  210, 1431,  210, 1431,  210,

     1431,  210,  210, 1431, 1431, 1431, 1282,  210,  210, 1431,
      210,  210, 1431, 1431,  210, 1283, 1284, 1431, 1431, 1431,
      210,  210,  210,  210,  210,  210,  210, 1431, 1431,  210,
      210, 1431, 1431, 1431,  210,  210, 1431, 1285, 1431,  210,
     1431,  210, 1431, 1284,  210, 1431, 1431, 1431,  210,  210,
      210, 1431,  210,  210, 1286, 1431,  210,  210,  210, 1431,
     1431, 1431,  210,  210, 1285,  210,  210,  210,  210, 1431,
     1431,  210,  210, 1287, 1431, 1431,  210,  210, 1431, 1431,
     1431, 1286, 1431,  210,  210,  210,  210, 1431, 1431, 1431,
      210,  210,  210, 1431,  210,  210,  210, 1431, 1288,  210,

     1287, 1431, 1431, 1431,  210, 1431, 1431,  210,  210,  210,
      210,  210, 1431,  210,  210,  210, 1289, 1431,  210,  210,
      210, 1431, 1431,  210, 1431, 1288, 1431, 1431, 1431, 1431,
     1290, 1431, 1431, 1431,  210,  210,  210,  210,  210, 1431,
      210,  210,  210, 1289, 1431,  210,  210,  210, 1431,  210,
      210,  210,  210, 1431,  210, 1431,  210, 1290, 1431,  210,
     1431,  210, 1431, 1431,  210,  210, 1431,  210,  210, 1431,
      210, 1431,  210, 1431, 1431,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210, 1431,  210, 1431,  210,  210,
     1431,  210, 1431, 1431,  210,  210,  210,  210,  210, 1431,

     1431, 1431,  210,  210, 1431, 1431, 1431,  210,  210,  210,
     1431,  210,  210, 1431,  210, 1292,  210,  210, 1291,  210,
     1431,  210,  210,  210,  210,  210,  210,  210,  210, 1431,
      210, 1431, 1431,  210, 1431,  210, 1431, 1431,  210,  210,
     1431,  210, 1292, 1431,  210, 1291,  210, 1318, 1431,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210, 1431,  210,  210, 1431,  210, 1431,
     1431,  210, 1431, 1431, 1318, 1431, 1431,  210, 1431,  210,
      210, 1431,  210,  210,  210,  210,  210,  210,  210,  210,
      210, 1431,  210,  210,  210,  210,  210, 1431,  210, 1431,

     1431,  210, 1431, 1319, 1431, 1431,  210,  210, 1431,  210,
      210, 1431,  210,  210,  210,  210, 1431,  210, 1431,  210,
      210,  210,  210,  210,  210,  210,  210, 1431,  210, 1431,
     1319,  210, 1431,  210, 1320, 1296,  210,  210, 1431,  210,
      210, 1431,  210,  210,  210,  210, 1431,  210, 1431,  210,
      210,  210,  210,  210, 1431,  210, 1431, 1321,  210, 1431,
     1431, 1431, 1431,  210,  210, 1431,  210,  210, 1431,  210,
      210,  210,  210, 1431,  210, 1431,  210,  210, 1322,  210,
     1431, 1431,  210, 1431, 1321,  210, 1431,  210, 1431, 1431,
     1431,  210,  210,  210,  210, 1431,  210,  210,  210, 1431,

     1323,  210, 1431,  210, 1431, 1322,  210, 1431,  210, 1431,
      210,  210,  210,  210,  210,  210, 1431, 1431,  210,  210,
      210, 1431, 1431,  210,  210, 1324, 1431, 1323, 1431,  210,
     1431,  210,  210, 1431,  210,  210,  210,  210,  210,  210,
      210,  210,  210, 1431,  210,  210, 1431,  210, 1431, 1431,
      210, 1431, 1324,  210, 1431,  210,  210, 1431,  210,  210,
      210,  210,  210,  210,  210,  210,  210, 1431,  210,  210,
     1325,  210, 1431, 1431,  210, 1431,  210, 1431,  210, 1431,
      210, 1431,  210,  210, 1431, 1431, 1431,  210,  210,  210,
     1431,  210,  210, 1431, 1431, 1431,  210, 1325, 1431, 1431,

      210,  210,  210,  210,  210,  210, 1326,  210, 1431, 1431,
      210,  210,  210, 1431, 1431,  210,  210, 1431,  210, 1431,
      210, 1431, 1431, 1431, 1431,  210, 1431,  210, 1431,  210,
      210,  210, 1431, 1326,  210, 1327, 1431, 1431,  210,  210,
     1431, 1431, 1431,  210,  210,  210,  210,  210, 1328, 1431,
      210,  210,  210, 1431, 1431,  210,  210,  210, 1431, 1431,
      210, 1431, 1327, 1431, 1431, 1431, 1431,  210, 1431,  210,
     1431,  210, 1431,  210,  210, 1328, 1431,  210,  210,  210,
     1431, 1431,  210,  210, 1431, 1431,  210,  210,  210, 1431,
     1431, 1431, 1431,  210,  210, 1431,  210,  210,  210,  210,

     1431,  210, 1431, 1329,  210,  210,  210,  210, 1331,  210,
     1431, 1431,  210,  210, 1330,  210, 1431,  210, 1431, 1431,
      210,  210, 1431,  210,  210,  210,  210, 1431,  210, 1431,
     1329,  210,  210,  210,  210, 1331,  210, 1431, 1431,  210,
      210, 1330, 1332, 1431,  210, 1431, 1431,  210,  210,  210,
      210,  210,  210, 1431, 1431,  210,  210, 1431, 1431, 1431,
      210,  210, 1431,  210, 1431,  210, 1431,  210, 1431, 1332,
      210, 1431, 1431, 1431,  210,  210,  210, 1431,  210,  210,
     1431, 1431, 1431,  210, 1431, 1431, 1431,  210,  210,  210,
      210, 1431,  210, 1431,  210, 1333, 1431,  210, 1431,  210,

     1334,  210,  210,  210, 1431,  210, 1431,  210,  210, 1431,
     1431, 1431,  210,  210,  210, 1431,  210,  210, 1431, 1431,
     1431,  210, 1333, 1431, 1431, 1431,  210, 1334,  210,  210,
      210,  210,  210, 1431,  210,  210,  210, 1431, 1431,  210,
      210,  210, 1431,  210,  210,  210, 1431,  210, 1431,  210,
      210, 1335, 1431, 1431,  210,  210,  210, 1431,  210,  210,
     1431, 1431, 1431,  210, 1431, 1431, 1431, 1431,  210, 1431,
      210, 1431,  210,  210,  210,  210,  210,  210, 1335, 1336,
      210,  210,  210, 1431, 1431,  210,  210,  210, 1337,  210,
     1431, 1431, 1431, 1431,  210, 1431,  210, 1431,  210,  210,

      210, 1431,  210,  210, 1338, 1431, 1336,  210,  210, 1431,
     1339, 1431,  210, 1340,  210, 1337,  210,  210, 1431,  210,
      210,  210,  210,  210,  210,  210,  210,  210, 1431,  210,
      210, 1338,  210, 1431, 1431,  210,  210, 1339,  210, 1431,
     1340, 1431, 1431,  210,  210, 1431,  210,  210,  210,  210,
      210,  210,  210, 1431,  210, 1431,  210,  210, 1431,  210,
     1431, 1431,  210,  210, 1431,  210,  210, 1431,  210, 1431,
      210, 1431, 1357,  210,  210,  210,  210,  210,  210,  210,
     1358,  210, 1431, 1431,  210,  210,  210,  210, 1431,  210,
     1431, 1431, 1360,  210, 1431,  210, 1431,  210, 1431, 1357,

      210,  210, 1431,  210,  210,  210,  210, 1358,  210, 1431,
     1431,  210,  210,  210,  210,  210,  210,  210,  210, 1360,
      210, 1431,  210, 1361,  210,  210, 1431,  210, 1431, 1431,
      210,  210, 1431,  210,  210, 1431,  210, 1431,  210, 1431,
     1431,  210,  210,  210,  210,  210,  210,  210, 1362,  210,
     1361, 1431,  210,  210,  210,  210, 1431,  210, 1431, 1431,
      210,  210,  210,  210,  210,  210, 1431, 1431,  210,  210,
     1363, 1431, 1431,  210,  210, 1362,  210, 1431,  210, 1431,
      210, 1431,  210,  210, 1431, 1431, 1431,  210,  210,  210,
     1431,  210,  210, 1431, 1431, 1431,  210, 1363, 1431, 1431,

      210,  210,  210,  210, 1431,  210, 1431,  210, 1431, 1431,
      210,  210,  210,  210,  210,  210, 1365, 1364,  210, 1431,
     1431,  210, 1431,  210, 1431, 1366,  210,  210, 1431,  210,
      210, 1431,  210, 1431,  210, 1431, 1431,  210,  210,  210,
      210,  210,  210, 1365, 1364,  210, 1431, 1431,  210,  210,
      210,  210, 1366,  210, 1431, 1431,  210,  210,  210,  210,
      210,  210, 1431, 1431,  210,  210, 1431, 1431, 1431,  210,
      210, 1431,  210, 1431,  210, 1431,  210, 1431,  210,  210,
     1431, 1431, 1431,  210,  210,  210, 1431,  210,  210, 1431,
     1431,  210,  210,  210, 1431, 1431, 1431,  210,  210,  210,

     1431,  210, 1431,  210, 1367,  210,  210,  210, 1431, 1368,
     1431,  210,  210, 1431, 1431, 1431, 1431,  210,  210, 1431,
      210, 1431, 1431, 1369, 1431,  210,  210, 1431,  210, 1431,
      210, 1367,  210,  210,  210,  210, 1368,  210,  210,  210,
     1431, 1370,  210, 1431,  210, 1431, 1431,  210, 1431,  210,
     1369,  210, 1431,  210, 1431,  210,  210, 1431, 1380, 1373,
      210,  210,  210, 1379,  210,  210, 1431, 1431, 1370,  210,
      210, 1431,  210,  210,  210,  210,  210,  210,  210, 1431,
      210, 1431,  210,  210, 1431,  210, 1431, 1382,  210, 1431,
     1379,  210, 1431,  210,  210, 1431,  210,  210,  210,  210,

      210,  210,  210,  210,  210, 1431,  210,  210, 1431,  210,
     1431, 1431,  210, 1431, 1382,  210, 1431,  210,  210, 1431,
      210,  210,  210,  210,  210,  210,  210,  210,  210, 1431,
      210,  210, 1431,  210, 1431, 1431,  210, 1431,  210, 1431,
      210, 1431,  210, 1431,  210, 1383, 1431, 1431, 1431,  210,
      210,  210, 1431,  210,  210, 1431, 1431,  210,  210,  210,
     1431, 1431, 1431,  210,  210,  210,  210,  210,  210,  210,
     1431, 1431, 1383,  210, 1431, 1431, 1431,  210,  210, 1431,
      210, 1431,  210, 1431,  210, 1431,  210,  210, 1431, 1431,
     1431,  210,  210,  210, 1431,  210,  210, 1431, 1431,  210,

      210,  210, 1431, 1431, 1431,  210,  210,  210, 1431,  210,
      210,  210,  210, 1384,  210, 1431, 1431,  210,  210,  210,
      210, 1431,  210, 1431, 1431,  210,  210, 1431,  210, 1431,
      210, 1431, 1431,  210,  210, 1391,  210,  210,  210,  210,
     1384,  210, 1431, 1431,  210,  210,  210,  210,  210,  210,
      210, 1431,  210, 1431, 1431,  210, 1431,  210, 1431, 1431,
      210,  210, 1391,  210,  210, 1431,  210,  210,  210, 1394,
     1431,  210, 1431,  210,  210,  210,  210,  210, 1431,  210,
     1431, 1399,  210, 1431, 1431, 1431, 1431,  210,  210, 1431,
      210,  210, 1431,  210,  210,  210, 1394,  210,  210,  210,

      210,  210, 1431,  210,  210, 1431,  210, 1431, 1399,  210,
     1431,  210, 1431, 1405, 1431,  210, 1431,  210,  210, 1431,
     1431, 1431,  210,  210,  210, 1431,  210,  210, 1431, 1431,
     1431,  210,  210, 1431,  210,  210,  210,  210,  210,  210,
     1405, 1431,  210, 1411,  210,  210, 1431,  210, 1431, 1431,
      210, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,  210,
     1431,  210,  210, 1431,  210, 1431,  210, 1431, 1431,  210,
     1411,  210, 1431, 1431,  210,   47,   47,   47,   47,   47,
       90, 1431, 1431,   90,   90,  194,  194,  194, 1431,  194,
      196, 1431,  196,  196,  196,  199, 1431,  199,  199,  199,

      210, 1431,  210,  210,  210,    7, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431
    } ;

static const flex_int16_t yy_chk[10484] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   16,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   19,   19,   22,   28,   22,   31,   32, 1434,   24,
       28,   22,   45,   22,  102,   23,   24,   22,   22,   23,

       22,   22,   23,   24, 1428,   23,   24,   50,   50,   24,
       22,   28,   22,   31,   32,   23,   24,   28,   22,   45,
       22,  102,   23,   24,   22,   22,   23,   22,   22,   23,
       24,   25,   23,   24, 1427,   25,   24,  103,   42,   25,
       42,   29,   23,   42,   26,   25,   26,  106,   25,   29,
       57,   26,   37,   51,   51,   29,   26, 1426,   25,   60,
       60,   57,   25,   37,  103,   42,   25,   42,   29,   37,
       42,   26,   25,   26,  106,   25,   29, 1425,   26,   37,
       30,   33,   29,   26,   27,   33,   30,   30,   30, 1423,
       37,   33,   27,   30,  107,   27,   37, 1421,   27,   88,

       88,   27,   34,   35,   27, 1419,   34,   30,   33, 1417,
       34,   27,   33,   30,   30,   30,   34,   35,   33,   27,
       30,  107,   27,   35,   35,   27,   36,   43,   27,   34,
       35,   27,   39,   34,   36,   43,   39,   34,   36,  108,
       39,   36,   36,   34,   35, 1415,   39,  197,  197, 1413,
       35,   35, 1410,   36,   43, 1210, 1210, 1343, 1343,   39,
     1407,   36,   43,   39, 1404,   36,  108,   39,   36,   36,
       44,   44,  104,   39,   40,  105,   40,  111,  105,   40,
      104,  112,   40,   69,   40,   69,   40,   40,  113,   69,
       69,   40,   40, 1401,  116,   69, 1398,   44,   44,  104,

     1395,   40,  105,   40,  111,  105,   40,  104,  112,   40,
       69,   40,   69,   40,   40,  113,   69,   69,   40,   40,
       41,  116,   69,   72,   41,   72,   72,   41,   41,  109,
       72,  109,  119,  123,   41,   72,  124,   41, 1390, 1385,
     1378, 1371, 1356, 1341, 1317, 1293, 1246,   41, 1199, 1122,
       72,   41,   72,   72,   41,   41,  109,   72,  109,  119,
      123,   41,   72,  124,   41,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   63,   63,  118,   63,
       63,   63,   63,   63,   63,   63, 1045,  125,  118,  942,

      839,  126,  707,  580,   73,  575,   63,   63,   63,  115,
      127,   73,   63,   73,   63,  118,  115,  129,   73,  440,
       63,  130,   63,   73,  125,  118,   63,   63,  126,   63,
       63,   73,  110,  110,  131,  304,  115,  127,   73,   63,
       73,   63,  202,  115,  129,   73,  110,   63,  130,   63,
       73,  199,   93,   63,   63,   90,   63,   63,   87,  110,
      110,  131,   63,   64,   64,   62,   64,   64,   64,   64,
       64,   64,   64,  110,  120,   61,   55,  122,  122,  120,
      133,  132,   74,   64,   64,   64,   74,  132,  134,   74,
       64,   79,   74,   79,   64,  135,  136,   64,   79,  138,

       64,  120,   74,   79,  122,  122,  120,  133,  132,   74,
       64,   53,   52,   74,  132,  134,   74,   64,   79,   74,
       79,   64,  135,  136,   64,   79,  138,   64,  137,   74,
       79,  137,  139,   48,   83,  141,   83,   64,   83,   64,
       65,   83,  142,  144,   65,  145,   83,   65,   65,  146,
      147,   65,  150,  151,   65,  137,   46,   65,  137,  139,
       65,   83,  141,   83,   65,   83,   21,   65,   83,  142,
      144,   65,  145,   83,   65,   65,  146,  147,   65,  150,
      151,   65,   20,  143,   65,  152,  153,   65,   86,   14,
      154,   65,   66,  143,  156,   86,   66,   86,  143,  143,

       66,  155,   86,   66,  155,  157,   66,   86,  158,   66,
      143,   11,  152,  153,  160,   86,   66,  154,  161,   66,
      143,  156,   86,   66,   86,  143,  143,   66,  155,   86,
       66,  155,  157,   66,   86,  158,   66,    7,  117,  117,
      117,  160,  117,   66,   67,  161,  162,  117,   67,  163,
      121,   67,  121,   67,   67,  121,  164,  148,   67,  148,
      166,  121,    4,   67,   67,  117,  117,  117,  121,  117,
      168,   67,    3,  162,  117,   67,  163,  121,   67,  121,
       67,   67,  121,  164,  148,   67,  148,  166,  121,  165,
       67,   67,   68,  165,  170,  121,    0,  168,    0,   68,

       68,    0,  149,   68,  149,  128,   68,  128,  173,   68,
      167,  128,   68,    0,  169,  149,  165,    0,  128,   68,
      165,  170,  128,  167,  174,  169,   68,   68,  167,  149,
       68,  149,  128,   68,  128,  173,   68,  167,  128,   68,
       70,  169,  149,    0,  172,  128,  175,   70,   70,  128,
      167,  174,  169,  171,   70,  167,  176,   70,  172,  177,
       70,    0,  171,  178,  179,  180,  181,   70,    0,    0,
      171,  172,  182,  175,   70,   70,  180,  183,  184,    0,
      171,   70,    0,  176,   70,  172,  177,   70,   71,  171,
      178,  179,  180,  181,   71,   71,   71,  171,  184,  182,

      190,   71,  185,  180,  183,  184,   71,    0,  191,  185,
      187,    0,  185,  188,  187,   71,    0,  186,    0,  188,
      192,   71,   71,   71,  307,  184,  309,  190,   71,  185,
      189,    0,  186,   71,   75,  191,  185,  187,   75,  185,
      188,  187,   75,  189,  186,   75,  188,  192,   75,  310,
      312,  307,  314,  309,    0,    0,  315,  189,   75,  186,
      317,   75,    0,  318,  319,   75,    0,    0,    0,   75,
      189,    0,   75,    0,    0,   75,  310,  312,  320,  314,
        0,  281,  210,  315,  210,   75,   76,  317,  281,  210,
      318,  319,    0,   76,  210,  281,  321,    0,  281,  322,

       76,  281,  323,   76,  211,  320,   76,   76,  281,  210,
      325,  210,  211,   76,  211,  281,  210,  326,  327,  211,
       76,  210,  281,  321,  211,  281,  322,   76,  281,  323,
       76,  211,  328,   76,   76,   77,    0,  325,    0,  211,
       77,  211,   77,    0,  326,  327,  211,  329,   77,   77,
      330,  211,   77,  331,  332,   77,   77,    0,  212,  328,
      212,  324,   77,  324,    0,  212,  212,   77,    0,   77,
      212,    0,  333,    0,  329,   77,   77,  330,  324,   77,
      331,  332,   77,   77,   78,  212,  335,  212,  324,  336,
      324,   78,  212,  212,  337,   78,  338,  212,   78,  333,

      213,   78,  213,  340,   78,  324,  334,  213,  213,    0,
      334,   78,  213,  335,    0,    0,  336,    0,   78,    0,
      341,  337,   78,  338,  342,   78,  339,  213,   78,  213,
      340,   78,   80,  334,  213,  213,   80,  334,  343,  213,
       80,  339,  215,   80,  215,  344,   80,  341,  215,  215,
      345,  342,  347,  339,  215,  348,   80,    0,    0,   80,
        0,    0,  349,   80,    0,  343,    0,   80,  339,  215,
       80,  215,  344,   80,    0,  215,  215,  345,  350,  347,
      351,  215,  348,   80,   81,  217,   81,  217,   81,  349,
      352,   81,  217,  217,   81,  353,   81,  217,   81,   81,

      354,   81,  355,   81,   81,  350,  356,  351,    0,    0,
        0,   81,  217,   81,  217,   81,    0,  352,   81,  217,
      217,   81,  353,   81,  217,   81,   81,  354,   81,  355,
       81,   81,   82,  356,  216,  221,   82,  221,  221,   82,
       82,  357,  221,  216,  358,  216,   82,  221,  359,   82,
      216,    0,   82,    0,  360,  216,    0,  361,    0,   82,
      362,  216,  221,   82,  221,  221,   82,   82,  357,  221,
      216,  358,  216,   82,  221,  359,   82,  216,  220,   82,
       84,  360,  216,  220,  361,  220,  363,  362,   84,  364,
      220,   84,  365,   84,  222,  220,  222,  222,   84,  366,

      367,  222,  368,   84,    0,  220,  222,   84,    0,    0,
      220,  369,  220,  363,    0,   84,  364,  220,   84,  365,
       84,  222,  220,  222,  222,   84,  366,  367,  222,  368,
       84,   85,   85,  222,  223,   85,  223,   85,  369,  370,
      372,  223,   85,  373,  375,  376,  223,   85,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   85,   85,
        0,  223,   85,  223,   85,    0,  370,  372,  223,   85,
      373,  375,  376,  223,   85,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  214,  377,  224,
      214,  224,    0,  371,    0,    0,  224,  378,  214,    0,
      214,  224,  227,  371,    0,  214,  227,    0,  225,  227,
      214,    0,  227,    0,  214,  377,  224,  214,  224,  225,
      371,  225,  227,  224,  378,  214,  225,  214,  224,  227,
      371,  225,  214,  227,  379,  225,  227,  214,  218,  227,
      218,  380,  382,  383,  379,  218,  225,  218,  225,  227,
        0,  384,  218,  225,    0,    0,  385,  218,  225,    0,

        0,  379,  387,    0,    0,  218,    0,  218,  380,  382,
      383,  379,  218,    0,  218,  228,    0,  228,  384,  218,
      388,  228,  228,  385,  218,  219,  219,  228,  231,  387,
      231,  219,  389,  219,  231,  231,  390,  391,  219,  219,
      231,  392,  228,  219,  228,    0,    0,  388,  228,  228,
      393,    0,  219,  219,  228,  231,    0,  231,  219,  389,
      219,  231,  231,  390,  391,  219,  219,  231,  392,  395,
      219,  226,  226,  226,  397,  226,  394,  393,  226,  398,
      226,  396,  399,  226,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  396,  394,  395,    0,  226,  226,

      226,  397,  226,  394,  400,  226,  398,  226,  396,  399,
      226,  229,    0,  229,    0,    0,  401,    0,  229,  229,
        0,  396,  394,  229,  229,    0,  402,    0,  403,  404,
        0,  400,  232,  405,  232,  234,    0,  234,  229,  232,
      229,  232,  234,  401,  232,  229,  229,  234,    0,  406,
      229,  229,  230,  402,  230,  403,  404,  230,  407,  232,
      405,  232,  234,  230,  234,  230,  232,  409,  232,  234,
      230,  232,    0,  410,  234,  230,  406,  411,    0,  230,
        0,  230,  412,  413,  230,  407,  233,  414,  233,  233,
      230,  235,  230,  233,  409,  415,  236,  230,  233,  235,

      410,  235,  230,  417,  411,  236,  235,  236,  418,  412,
      413,  235,  236,  233,  414,  233,  233,  236,  235,  419,
      233,    0,  415,  236,    0,  233,  235,    0,  235,  420,
      417,    0,  236,  235,  236,  418,  421,  423,  235,  236,
        0,  238,    0,  238,  236,  237,  419,  237,  238,  425,
      426,  237,  426,  238,  237,  427,  420,  237,  237,  239,
      424,  239,  237,  421,  423,  428,  239,  237,  238,  424,
      238,  239,  237,    0,  237,  238,  425,  426,  237,  426,
      238,  237,  427,  429,  237,  237,  239,  424,  239,  237,
      431,  432,  428,  239,  237,  433,  424,  240,  239,  240,

      240,  241,  434,  241,  240,  435,  437,  241,  241,  240,
      429,  438,    0,  241,    0,    0,    0,  431,  432,    0,
      576,  436,  433,    0,  240,  436,  240,  240,  241,  434,
      241,  240,  435,  437,  241,  241,  240,    0,  438,  242,
      241,  242,  242,  243,  577,  243,  242,  576,  436,  578,
      243,  242,  436,  579,    0,  243,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  242,    0,  242,  242,
      243,  577,  243,  242,  581,    0,  578,  243,  242,  582,
      579,  244,  243,  244,  244,  583,  584,  245,  244,  245,
      245,  585,  587,  244,  245,  246,    0,  246,    0,  245,

      589,  581,  246,    0,    0,  246,  582,  246,  244,  592,
      244,  244,  583,  584,  245,  244,  245,  245,  585,  587,
      244,  245,  246,  247,  246,  247,  245,  589,  593,  246,
      247,  248,  246,  248,  246,  247,  592,  249,  248,  249,
      248,  595,    0,  248,  249,    0,    0,    0,    0,  249,
      247,  597,  247,    0,    0,  593,    0,  247,  248,  594,
      248,    0,  247,  594,  249,  248,  249,  248,  595,  250,
      248,  249,  250,  251,  250,  251,  249,  251,  597,  250,
      251,  253,  598,  253,  250,  251,  594,  599,  253,  600,
      594,  601,  602,  253,    0,    0,  250,  604,    0,  250,

      251,  250,  251,  605,  251,    0,  250,  251,  253,  598,
      253,  250,  251,  252,  599,  253,  600,  606,  601,  602,
      253,  252,  254,  252,  604,  254,  607,  254,  252,  252,
      605,  608,  254,  252,  255,  609,  255,  254,  610,  611,
      252,  255,    0,  612,  606,  615,  255,  255,  252,  254,
      252,  616,  254,  607,  254,  252,  252,  617,  608,  254,
      252,  255,  609,  255,  254,  610,  611,  618,  255,  256,
      612,  619,  615,  255,  255,  256,  620,  256,  616,  621,
      623,  624,  256,  625,  617,  628,  629,  256,    0,    0,
        0,    0,  631,  259,  618,  259,  256,  633,  619,    0,

      259,    0,  256,  620,  256,  259,  621,  623,  624,  256,
      625,  634,  628,  629,  256,  257,  257,  257,  257,  631,
      259,  635,  259,  257,  633,  636,  274,  259,  257,    0,
      274,    0,  259,  274,    0,  637,  274,  638,  634,    0,
        0,    0,  257,  257,  257,  257,  274,    0,  635,  641,
      257,  645,  636,  274,  647,  257,  258,  274,  258,  260,
      274,  260,  637,  274,  638,  260,  260,  258,  261,  258,
      261,  260,  648,  274,  258,  261,  641,  650,  645,  258,
      261,  647,    0,  258,    0,  258,  260,  652,  260,    0,
        0,  653,  260,  260,  258,  261,  258,  261,  260,  648,

      654,  258,  261,  262,  650,  262,  258,  261,  639,  263,
      262,  263,  651,  651,  652,  262,  263,  263,  653,  639,
      656,  263,    0,  657,    0,    0,  658,  654,  659,    0,
      262,  661,  262,    0,    0,  639,  263,  262,  263,  651,
      651,  662,  262,  263,  263,    0,  639,  656,  263,  264,
      657,  264,  265,  658,  265,  659,  264,  264,  661,  265,
      264,  264,  266,    0,  265,  268,  664,  268,  662,    0,
      665,    0,  268,  266,    0,  266,  264,  268,  264,  265,
      266,  265,    0,  264,  264,  266,  265,  264,  264,  266,
      267,  265,  268,  664,  268,  666,  267,  665,  267,  268,

      266,  269,  266,  267,  268,    0,  667,  266,  267,  269,
      669,  269,  266,    0,  670,  671,  269,  267,    0,    0,
        0,  269,  666,  267,    0,  267,    0,  672,  269,  674,
      267,  675,  270,  667,  270,  267,  269,  669,  269,  270,
      270,  670,  671,  269,  270,  272,  271,  272,  269,  676,
      677,  272,  272,  271,  672,  271,  674,  272,  675,  270,
      271,  270,    0,  680,    0,  271,  270,  270,  681,    0,
      273,  270,  272,  271,  272,  682,  676,  677,  272,  272,
      271,  273,  271,  273,  272,    0,  683,  271,  273,  275,
      680,  275,  271,  273,  276,  681,  275,  273,  684,    0,

      685,  275,  682,  688,    0,  276,  689,  276,  273,    0,
      273,    0,  276,  683,  691,  273,  275,  276,  275,  277,
      273,  276,    0,  275,  277,  684,  277,  685,  275,  692,
      688,  277,  276,  689,  276,  693,  277,    0,  278,  276,
      278,  691,  694,  695,  276,  278,  277,  696,  279,  278,
      278,  277,  279,  277,  279,  697,  692,  698,  277,  279,
      699,  700,  693,  277,  279,  278,    0,  278,  282,  694,
      695,  282,  278,  282,  696,  279,  278,  278,  282,  279,
      702,  279,  697,  282,  698,  704,  279,  699,  700,    0,
        0,  279,  280,  283,    0,  282,  706,  842,  282,  844,

      282,  280,  845,  280,  283,  282,  283,  702,  280,  280,
      282,  283,  704,  280,  846,  284,  283,  284,    0,  280,
      283,  284,  284,  706,  842,    0,  844,  284,  280,  845,
      280,  283,    0,  283,  285,  280,  280,    0,  283,    0,
      280,  846,  284,  283,  284,  285,  848,  285,  284,  284,
      849,    0,  285,  286,  284,  850,  851,  285,  287,  287,
      287,  285,  852,    0,  286,  287,  286,  853,    0,  854,
      287,  286,  285,  848,  285,    0,  286,  849,  288,  285,
      286,    0,  850,  851,  285,  287,  287,  287,  288,  852,
      288,  286,  287,  286,  853,  288,  854,  287,  286,  855,

      288,  856,  290,  286,    0,  288,  289,  289,  289,  290,
        0,  290,  858,  289,  860,  288,  290,  288,  289,  861,
      862,  290,  288,  863,    0,  864,  855,  288,  856,  290,
      291,  291,  291,  289,  289,  289,  290,  291,  290,  858,
      289,  860,  291,  290,  865,  289,  861,  862,  290,  292,
      863,  292,  864,  292,  866,    0,  292,  291,  291,  291,
        0,  292,  868,  869,  291,  293,  870,  871,    0,  291,
        0,  865,  293,  872,  873,    0,  292,  874,  292,  293,
      292,  866,  293,  292,    0,  293,    0,  295,  292,  868,
      869,    0,  293,  870,  871,  295,    0,  295,    0,  293,

      872,  873,  295,    0,  874,  875,  293,  295,    0,  293,
        0,  296,  293,  294,  295,  296,    0,    0,  296,    0,
      294,  296,  295,  294,  295,  294,    0,  876,    0,  295,
      294,  296,  875,    0,  295,  294,  877,  297,  296,  297,
      294,  880,  296,  297,  297,  296,  299,  294,  296,  297,
      294,  881,  294,  299,  876,  299,    0,  294,  296,    0,
      299,    0,  294,  877,  297,  299,  297,  882,  880,    0,
      297,  297,  883,  299,    0,  884,  297,  298,  881,  887,
      299,  300,  299,  300,  298,    0,  298,  299,  300,  300,
      298,  298,  299,  300,  882,  890,  298,    0,    0,  883,

        0,  301,  884,  891,  298,    0,  887,    0,  300,    0,
      300,  298,  301,  298,  301,  300,  300,  298,  298,  301,
      300,    0,  890,  298,  301,  442,  443,  442,  301,  893,
      891,  892,  442,  443,  892,  443,  444,  442,  444,  301,
      443,  301,    0,  444,  896,  443,  301,  899,  444,    0,
        0,  301,  442,  443,  442,    0,  893,    0,  892,  442,
      443,  892,  443,  444,  442,  444,  900,  443,  901,  445,
      444,  896,  443,  902,  899,  444,  445,  446,  445,  446,
      447,  903,  447,  445,  446,    0,  904,  447,  445,  446,
      907,  908,  447,  900,  909,  901,  445,  910,    0,    0,

      902,    0,    0,  445,  446,  445,  446,  447,  903,  447,
      445,  446,  448,  904,  447,  445,  446,  907,  908,  447,
      449,  909,  449,  448,  910,  448,  450,  449,  450,  450,
      448,  911,  449,  450,  451,  448,  451,    0,  450,  448,
      451,  451,  913,  914,    0,    0,  451,  449,    0,  449,
      448,  916,  448,  450,  449,  450,  450,  448,  911,  449,
      450,  451,  448,  451,  452,  450,  452,  451,  451,  913,
      914,  452,  453,  451,  453,  453,  452,  454,  916,  453,
      454,  917,  454,  455,  453,  455,    0,  454,    0,    0,
      455,  452,  454,  452,  455,  455,    0,    0,  452,  453,

        0,  453,  453,  452,  454,    0,  453,  454,  917,  454,
      455,  453,  455,  456,  454,  457,  456,  455,  456,  454,
      918,  455,  455,  456,  458,  457,  458,  457,  456,  919,
      921,  458,  457,    0,  922,    0,  458,  457,  923,  925,
      456,    0,  457,  456,    0,  456,    0,  918,  926,  927,
      456,  458,  457,  458,  457,  456,  919,  921,  458,  457,
      459,  922,  459,  458,  457,  923,  925,  459,  460,    0,
      460,  461,  459,  461,  460,  926,  927,  461,  461,  928,
      929,  460,  930,  461,  462,  460,  462,  459,    0,  459,
        0,  462,    0,  462,  459,  460,  462,  460,  461,  459,

      461,  460,    0,    0,  461,  461,  928,  929,  460,  930,
      461,  462,  460,  462,  463,  463,  463,  464,  462,  464,
      462,  463,    0,  462,  464,  464,  463,    0,  466,  464,
      466,  932,    0,    0,    0,  466,    0,  933,    0,  934,
      466,  463,  463,  463,  464,    0,  464,  465,  463,  465,
      467,  464,  464,  463,  465,  466,  464,  466,  932,  465,
      465,  467,  466,  467,  933,  507,  934,  466,  467,  507,
        0,    0,  507,  467,  465,  507,  465,  467,  935,  937,
      938,  465,  468,  939,  468,  507,  465,  465,  467,  468,
      467,  469,  507,  469,  468,  467,  507,  469,  469,  507,

      467,    0,  507,  469,    0,  935,  937,  938,    0,  468,
      939,  468,  507, 1046,    0,    0,  468,    0,  469,    0,
      469,  468,    0, 1047,  469,  469,  471,    0,  471, 1048,
      469,  470, 1050,  471,  472,  470,  472, 1052,  471, 1053,
     1046,  472,  470,    0,  470,    0,  472, 1054,    0,  470,
     1047,    0, 1055,  471,  470,  471, 1048,    0,  470, 1050,
      471,  472,  470,  472, 1052,  471, 1053,  473,  472,  470,
      473,  470,  473,  472, 1054,  474,  470,  473,  475, 1055,
      475,  470,  473,  476,  475,  476,  474, 1056,  474,  476,
     1058,  475, 1060,  474,  473,  475,  476,  473,  474,  473,

      476,    0,  474,    0,  473,  475, 1061,  475,    0,  473,
      476,  475,  476,  474, 1056,  474,  476, 1058,  475, 1060,
      474, 1062,  475,  476,  477,  474,  477,  476,  479,  478,
      477,  478,  480, 1061,  480,  478,  480,  477,  479,  480,
      479,  477,  478, 1063,  480,  479,  478,    0, 1062,    0,
      479,  477, 1064,  477,    0,  479,  478,  477,  478,  480,
        0,  480,  478,  480,  477,  479,  480,  479,  477,  478,
     1063,  480,  479,  478,  481, 1065,  483,  479,  482, 1064,
      482,  481, 1067,  481,    0,  482,    0,  483,  481,  483,
      482,    0, 1069,  481,  483, 1073,    0, 1075,    0,  483,

     1076,  481, 1065,  483,  484,  482, 1077,  482,  481, 1067,
      481,  484,  482,  484,  483,  481,  483,  482,  484, 1069,
      481,  483, 1073,  484, 1075,  485,  483, 1076,    0, 1084,
      486,  484,  486, 1077,  485, 1085,  485,  486,  484, 1086,
      484,  485,  486, 1089, 1091,  484,  485,    0, 1093, 1095,
      484,    0,  485,  487,    0,  487, 1084,  486, 1096,  486,
      487,  485, 1085,  485,  486,  487, 1086, 1097,  485,  486,
     1089, 1091,  488,  485,  488, 1093, 1095,    0,  488,  488,
      487,  489,  487,  489,  488, 1096, 1098,  487,  489, 1099,
     1101, 1102,  487,  489, 1097,  490,    0, 1103,    0,  488,

     1104,  488,  490,    0,  490,  488,  488, 1106,  489,  490,
      489,  488,  491, 1098,  490,  489, 1099, 1101, 1102, 1108,
      489, 1110,  490,  491, 1103,  491,  492, 1104,  492,  490,
      491,  490, 1111,  492, 1106,  491,  490, 1112,  492,  491,
        0,  490,  493,  493,  493,    0, 1108,    0, 1110,  493,
      491,    0,  491,  492,  493,  492, 1113,  491,    0, 1111,
      492, 1114,  491, 1120, 1112,  492,  494,  494,  494,  493,
      493,  493,  495,  494,  495,  496,  493, 1121,  494,  495,
     1201,  493, 1206, 1113,  495,  496, 1211,  496, 1114, 1212,
     1120, 1213,  496,  494,  494,  494, 1216,  496, 1217,  495,

      494,  495,  496, 1221, 1121,  494,  495, 1201,  497, 1206,
      497,  495,  496, 1211,  496,  497, 1212,  497, 1213,  496,
      497, 1223,  498, 1216,  496, 1217,  498, 1224,  498, 1227,
     1221,  499, 1228,  498,  499,  497,  499,  497,  498, 1229,
     1230,  499,  497,    0,  497, 1233,  499,  497, 1223,  498,
        0, 1234, 1237,  498, 1224,  498, 1227, 1239,  499, 1228,
      498,  499,  500,  499,  500,  498, 1229, 1230,  499,  500,
      500,    0, 1233,  499,  500,  501, 1240,  501, 1234, 1237,
     1241,  501,  501, 1242, 1239,  502,  502,  501,  502,  500,
        0,  500,    0,  502, 1243, 1294,  500,  500,  502,    0,

     1295,  500,  501, 1240,  501, 1297,    0, 1241,  501,  501,
     1242, 1299,  502,  502,  501,  502,  503,  504,  503,  503,
      502, 1243, 1294,  503,  504,  502,  504, 1295,  503, 1302,
        0,  504, 1297,  505, 1296, 1296,  504,    0, 1299,    0,
      505,    0,  505,  503,  504,  503,  503,  505,    0,    0,
      503,  504,  505,  504, 1303,  503, 1302,  506,  504, 1306,
      505, 1307,    0,  504,  506, 1308,  506,  505,  508,  505,
      508,  506,    0, 1296,  505,  508,  506,  508, 1312,  505,
      508, 1303, 1313, 1314,  506, 1316, 1306,  509, 1307,  509,
        0,  506, 1308,  506,  509,  508,    0,  508,  506,  509,

     1296, 1342,  508,  506,  508, 1312,  510,  508,  510, 1313,
     1314,    0, 1316,  510,  509,  511,  509,  511,  510,    0,
     1344,  509,  511,  511,    0,    0,  509,  511, 1342,  512,
        0,  514,    0,  510, 1346,  510,  512, 1349,  512,  514,
      510,  514,  511,  512,  511,  510,  514, 1344,  512,  511,
      511,  514,  513,    0,  511,  513,  512,  513,  514, 1320,
     1320, 1346,  513,  512, 1349,  512,  514,  513,  514, 1354,
      512,    0, 1359,  514, 1372,  512, 1374, 1377,  514,  513,
      516,    0,  513, 1381,  513,  516,    0,  516, 1386,  513,
     1387,    0,  516, 1392,  513,  515, 1354,  516, 1320, 1359,

        0, 1372, 1396, 1374, 1377,  515,  515,  516,  515,  517,
     1381,  517,  516,  515,  516, 1386,  517, 1387,  515,  516,
     1392,  517,  515,    0,  516, 1320, 1373, 1373, 1397, 1396,
        0,    0,  515,  515,  518,  515,  517, 1400,  517,  518,
      515,  518,    0,  517, 1402,  515,  518,  519,  517,  519,
      520,  518,  520, 1403,  519, 1397,  519,  520,  520,  519,
     1406,  518,  520,  521, 1400,  521,  518,    0,  518, 1373,
      521, 1402,  521,  518,  519,  521,  519,  520,  518,  520,
     1403,  519,    0,  519,  520,  520,  519, 1406, 1409,  520,
      521,  522,  521,  522,  523, 1412, 1373,  521,  522,  521,

     1414, 1416,  521,  522,  524,  523,  524,  523, 1380, 1380,
        0,  524,  523, 1418,    0, 1409,  524,  523,  522,    0,
      522,  523, 1412, 1420,    0,  522,    0, 1414, 1416,    0,
      522,  524,  523,  524,  523,  525,    0,  525,  524,  523,
     1418,  525,  525,  524,  523,    0,  526,  525,  526,    0,
     1420, 1380,  527,  526,    0,    0,    0,    0,  526,  527,
        0,  527,  525,  528,  525,    0,  527,    0,  525,  525,
      528,  527,  528,  526,  525,  526,    0,  528, 1380,  527,
      526,    0,  528,    0,    0,  526,  527,    0,  527,  529,
      528,  529,    0,  527,    0,  529,  529,  528,  527,  528,

        0,  529,    0,    0,  528,  531,    0,  531,    0,  528,
        0,    0,  531,    0,    0,    0,  529,  531,  529,    0,
        0,    0,  529,  529,  532,    0,  532,    0,  529,  530,
      532,    0,  531,    0,  531,    0,    0,  532,    0,  531,
      530,  532,  530,    0,  531,    0,    0,  530,  530,    0,
        0,  532,  530,  532,    0,    0,  530,  532,  533,  533,
      533,    0,    0,    0,  532,  533,  534,  530,  532,  530,
      533,  534,    0,  534,  530,  530,    0,    0,  534,  530,
        0,    0,  535,  534,  535,  533,  533,  533,    0,  535,
      536,    0,  533,  534,  535,    0,    0,  533,  534,    0,

      534,  536,    0,  536,    0,  534,    0,    0,  536,  535,
      534,  535,  537,  536,  537,    0,  535,  536,    0,  537,
      537,  535,    0,    0,  537,    0,    0,  538,  536,    0,
      536,  538,    0,  538,    0,  536,    0,    0,  538,  537,
      536,  537,    0,  538,    0,    0,  537,  537,    0,    0,
      539,  537,  539,    0,  538,    0,    0,  539,  538,  540,
      538,  540,  539,    0,    0,  538,  540,    0,    0,    0,
      538,  540,    0,  541,    0,    0,  543,  539,    0,  539,
      541,    0,  541,  543,  539,  543,  540,  541,  540,  539,
      543,    0,  541,  540,  542,  543,  542,  542,  540,    0,

      541,  542,    0,  543,    0,    0,  542,  541,    0,  541,
      543,    0,  543,  544,  541,  544,    0,  543,    0,  541,
      544,  542,  543,  542,  542,  544,    0,    0,  542,  545,
        0,  545,  546,  542,  546,  545,  545,    0,    0,  546,
      544,  545,  544,  546,  546,    0,    0,  544,    0,    0,
        0,    0,  544,  547,    0,  547,  545,  547,  545,  546,
      547,  546,  545,  545,    0,  547,  546,  548,  545,  548,
      546,  546,    0,    0,  548,    0,    0,    0,    0,  548,
      547,  549,  547,  549,  547,    0,    0,  547,  549,  549,
        0,    0,  547,  549,  548,  550,  548,  550,    0,    0,

        0,  548,  550,  550,    0,    0,  548,  550,  549,    0,
      549,  551,    0,  551,    0,  549,  549,  551,  551,  552,
      549,  552,  550,  551,  550,  553,  552,  553,    0,  550,
      550,  552,  553,    0,  550,    0,    0,  553,  551,    0,
      551,    0,    0,    0,  551,  551,  552,    0,  552,    0,
      551,    0,  553,  552,  553,    0,    0,    0,  552,  553,
        0,  554,    0,  554,  553,  554,    0,  555,  554,  555,
      556,    0,  556,  554,  555,  555,    0,  556,    0,  555,
        0,    0,  556,    0,  557,    0,    0,    0,  554,    0,
      554,  557,  554,  557,  555,  554,  555,  556,  557,  556,

      554,  555,  555,  557,  556,  558,  555,  558,    0,  556,
        0,  557,  558,    0,  559,    0,  559,  558,  557,    0,
      557,  559,    0,    0,    0,  557,  559,  564,  560,    0,
      557,    0,  558,    0,  558,  560,    0,  560,  564,  558,
      564,  559,  560,  559,  558,  564,    0,  560,  559,  561,
      564,  561,  561,  559,  564,  560,  561,    0,    0,    0,
        0,  561,  560,    0,  560,  564,    0,  564,  563,  560,
      563,  563,  564,    0,  560,  563,  561,  564,  561,  561,
      563,    0,    0,  561,    0,    0,    0,    0,  561,  562,
        0,  562,  562,    0,  562,  563,  562,  563,  563,    0,

        0,  562,  563,  565,    0,    0,    0,  563,    0,    0,
      565,    0,  565,  566,    0,  566,  562,  565,  562,  562,
      566,  562,  565,  562,  567,  566,  567,    0,  562,    0,
      565,  567,    0,    0,    0,    0,  567,  565,    0,  565,
      566,    0,  566,    0,  565,  569,    0,  566,  568,  565,
      568,  567,  566,  567,  569,  568,  569,  568,  567,    0,
      568,  569,  570,  567,  570,    0,  569,    0,    0,  570,
        0,    0,  569,  570,  570,  568,    0,  568,  571,    0,
      571,  569,  568,  569,  568,  571,  571,  568,  569,  570,
      571,  570,  572,  569,  572,    0,  570,    0,  572,  572,

      570,  570,    0,    0,  572,  571,    0,  571,    0,    0,
        0,    0,  571,  571,    0,    0,  573,  571,    0,  572,
      573,  572,  573,    0,    0,  572,  572,  573,  574,    0,
      574,  572,  573,    0,  574,  574,    0,    0,    0,  708,
      574,  708,    0,  573,    0,  708,  708,  573,    0,  573,
        0,  708,    0,    0,  573,  574,    0,  574,  709,  573,
      709,  574,  574,    0,  709,  709,  708,  574,  708,  710,
      709,  710,  708,  708,    0,    0,  710,  711,  708,  711,
        0,  710,  710,    0,  711,  709,    0,  709,    0,  711,
      711,  709,  709,    0,    0,    0,  710,  709,  710,    0,

      712,    0,  712,  710,  711,    0,  711,  712,  710,  710,
      713,  711,  712,    0,    0,  712,  711,  711,  714,    0,
      714,  713,    0,  713,  714,  714,    0,  712,  713,  712,
      714,    0,    0,  713,  712,    0,    0,  713,    0,  712,
        0,    0,  715,    0,  715,  714,    0,  714,  713,  715,
      713,  714,  714,    0,  715,  713,  716,  714,    0,    0,
      713,    0,    0,  716,    0,  716,  717,    0,  717,  715,
      716,  715,  718,  717,  718,  716,  715,    0,  717,  718,
        0,  715,    0,  716,  718,    0,    0,    0,    0,  719,
      716,    0,  716,  717,    0,  717,  719,  716,  719,  718,

      717,  718,  716,  719,  721,  717,  718,  720,  719,  720,
        0,  718,    0,    0,  720,  721,  719,  721,    0,  720,
        0,    0,  721,  719,    0,  719,  722,  721,  722,    0,
      719,  721,    0,  722,  720,  719,  720,    0,  722,    0,
        0,  720,  721,    0,  721,  723,  720,  723,  724,  721,
        0,    0,  723,  722,  721,  722,  726,  723,  726,  724,
      722,  724,  726,    0,    0,  722,  724,    0,    0,  726,
        0,  724,  723,  726,  723,  724,    0,    0,    0,  723,
      725,  725,  725,  726,  723,  726,  724,  725,  724,  726,
        0,    0,  725,  724,    0,    0,  726,    0,  724,  727,

      726,  727,    0,    0,    0,  727,  727,  725,  725,  725,
      728,  727,  728,  729,  725,  729,    0,  728,    0,  725,
      729,  729,  728,    0,    0,  729,  727,    0,  727,  731,
        0,  731,  727,  727,    0,    0,  731,  728,  727,  728,
      729,  731,  729,  730,  728,  730,    0,  729,  729,  728,
      730,  730,  729,    0,    0,  730,  731,  732,  731,    0,
        0,    0,    0,  731,  732,    0,  732,  734,  731,  734,
      730,  732,  730,  733,  734,  734,  732,  730,  730,  734,
        0,    0,  730,  733,  732,  733,    0,    0,    0,    0,
      733,  732,    0,  732,  734,  733,  734,  735,  732,  735,

      733,  734,  734,  732,  735,    0,  734,    0,    0,  735,
      733,  736,  733,  736,    0,    0,    0,  733,  736,    0,
        0,    0,  733,  736,  735,    0,  735,  737,  737,  737,
        0,  735,    0,    0,  737,  738,  735,  738,  736,  737,
      736,  739,  738,  739,  738,  736,    0,  738,  739,  739,
      736,    0,    0,  739,  737,  737,  737,    0,    0,    0,
        0,  737,  738,    0,  738,    0,  737,    0,  739,  738,
      739,  738,  740,    0,  738,  739,  739,    0,    0,    0,
      739,    0,  741,  740,  741,  740,    0,  742,  741,  741,
      740,    0,    0,    0,  741,  740,  742,    0,  742,  740,

        0,    0,    0,  742,    0,    0,    0,    0,  742,  741,
      740,  741,  740,    0,  742,  741,  741,  740,    0,    0,
        0,  741,  740,  742,  743,  742,  744,  743,  744,  743,
      742,    0,    0,  744,  743,  742,    0,    0,  744,  743,
      745,    0,  745,    0,    0,    0,    0,  745,    0,    0,
        0,  743,  745,  744,  743,  744,  743,    0,    0,    0,
      744,  743,    0,    0,    0,  744,  743,  745,  746,  745,
      746,    0,    0,    0,  745,  746,    0,    0,    0,  745,
      746,  747,  748,  747,  748,  747,  748,    0,  747,  748,
        0,    0,    0,  747,  748,  746,    0,  746,    0,    0,

        0,    0,  746,    0,    0,    0,    0,  746,  747,  748,
      747,  748,  747,  748,    0,  747,  748,  749,    0,  749,
      747,  748,    0,  750,  749,  750,  749,    0,    0,  749,
      750,  750,    0,    0,    0,  750,  751,    0,    0,    0,
        0,    0,    0,    0,  749,    0,  749,  751,    0,  751,
      750,  749,  750,  749,  751,  752,  749,  750,  750,  751,
        0,    0,  750,  751,    0,    0,  752,    0,  752,    0,
      753,    0,    0,  752,  751,    0,  751,  753,  752,  753,
        0,  751,  752,    0,  753,    0,  751,    0,    0,  753,
        0,    0,    0,  752,    0,  752,  754,  753,  754,    0,

      752,    0,    0,  754,  753,  752,  753,  755,  754,  755,
      756,  753,  756,  756,  755,  755,  753,  756,    0,  755,
      757,    0,  756,  754,    0,  754,    0,    0,    0,    0,
      754,  757,    0,  757,  755,  754,  755,  756,  757,  756,
      756,  755,  755,  757,  756,    0,  755,  757,    0,  756,
      758,    0,  758,    0,  759,    0,  759,  758,  757,    0,
      757,  759,  758,    0,    0,  757,  759,  760,    0,    0,
      757,    0,    0,    0,    0,    0,    0,  758,  760,  758,
      760,  759,    0,  759,  758,  760,    0,    0,  759,  758,
      760,    0,    0,  759,  760,    0,  761,  762,  761,  762,

      761,    0,    0,  761,  762,  760,    0,  760,  761,  762,
        0,    0,  760,    0,    0,    0,    0,  760,    0,    0,
        0,    0,    0,  761,  762,  761,  762,  761,    0,    0,
      761,  762,  763,    0,  763,  761,  762,    0,  764,  763,
      764,  765,    0,  765,  763,  764,    0,    0,  765,    0,
      764,    0,    0,  765,    0,  766,    0,    0,    0,  763,
        0,  763,  766,    0,  766,  764,  763,  764,  765,  766,
      765,  763,  764,    0,  766,  765,    0,  764,    0,    0,
      765,  767,  766,  767,    0,    0,    0,  767,  767,  766,
      768,  766,  768,  767,    0,    0,  766,  768,    0,    0,

        0,  766,  768,    0,    0,    0,    0,    0,  767,    0,
      767,    0,    0,    0,  767,  767,  769,  768,  769,  768,
      767,    0,  769,  769,  768,  770,    0,  770,  769,  768,
        0,  770,  770,    0,  772,    0,  772,  770,    0,    0,
        0,  772,    0,  769,    0,  769,  772,    0,    0,  769,
      769,    0,  770,    0,  770,  769,    0,    0,  770,  770,
        0,  772,    0,  772,  770,  771,    0,  773,  772,  773,
      771,    0,  771,  772,  773,    0,  771,  771,  774,  773,
      774,  775,  771,  775,    0,  774,    0,    0,  775,    0,
      774,    0,  771,  775,  773,    0,  773,  771,    0,  771,

        0,  773,    0,  771,  771,  774,  773,  774,  775,  771,
      775,  776,  774,  776,  777,  775,  777,  774,  776,    0,
      775,  777,  777,  776,    0,  778,  777,  778,    0,    0,
        0,    0,  778,    0,    0,    0,    0,  778,  776,    0,
      776,  777,    0,  777,  779,  776,  779,    0,  777,  777,
      776,  779,  778,  777,  778,    0,  779,    0,  780,  778,
        0,    0,    0,    0,  778,  780,    0,  780,  781,    0,
      781,  779,  780,  779,    0,  781,    0,  780,  779,  782,
      781,    0,    0,  779,    0,  780,  782,    0,  782,    0,
        0,    0,  780,  782,  780,  781,    0,  781,  782,  780,

        0,    0,  781,    0,  780,    0,  782,  781,  784,  783,
        0,  783,  784,  782,  784,  782,  783,  783,    0,  784,
      782,  783,    0,    0,  784,  782,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  784,  783,    0,  783,  784,
        0,  784,    0,  783,  783,    0,  784,  785,  783,  785,
        0,  784,  786,  785,  785,  786,  787,  786,  787,  785,
        0,    0,  786,  787,    0,    0,    0,  786,  787,    0,
        0,    0,    0,    0,  785,    0,  785,    0,    0,  786,
      785,  785,  786,  787,  786,  787,  785,  788,    0,  786,
      787,    0,  789,    0,  786,  787,  788,    0,  788,  789,

        0,  789,    0,  788,    0,    0,  789,    0,  788,    0,
      790,  789,  790,    0,  788,    0,  790,  790,    0,  789,
        0,    0,  790,  788,    0,  788,  789,    0,  789,    0,
      788,    0,    0,  789,  791,  788,  791,  790,  789,  790,
      791,  791,    0,  790,  790,  792,  791,  792,    0,  790,
        0,    0,  792,  793,  793,  793,    0,  792,    0,    0,
      793,  791,    0,  791,    0,  793,    0,  791,  791,    0,
        0,    0,  792,  791,  792,    0,    0,    0,    0,  792,
      793,  793,  793,  794,  792,    0,  794,  793,  794,  795,
      796,  795,  793,  794,    0,    0,  795,  796,  794,  796,

        0,  795,    0,    0,  796,    0,    0,    0,    0,  796,
      794,    0,    0,  794,    0,  794,  795,  796,  795,  797,
      794,    0,  798,  795,  796,  794,  796,    0,  795,    0,
      797,  796,  797,  798,  799,  798,  796,  797,    0,    0,
      798,  799,  797,  799,    0,  798,  797,    0,  799,  798,
        0,    0,    0,  799,    0,    0,    0,  797,    0,  797,
      798,  799,  798,    0,  797,    0,    0,  798,  799,  797,
      799,  800,  798,  800,    0,  799,    0,    0,  800,    0,
      799,    0,    0,  800,  801,  801,  801,  802,    0,  802,
        0,  801,    0,  802,  802,  803,  801,  803,  800,  802,

      800,    0,  803,  803,    0,  800,    0,  803,    0,    0,
      800,  801,  801,  801,  802,  804,  802,    0,  801,    0,
      802,  802,  803,  801,  803,  804,  802,  804,    0,  803,
      803,  805,  804,  805,  803,    0,    0,  804,  805,  806,
      806,  806,  804,  805,    0,    0,  806,    0,    0,    0,
        0,  806,  804,    0,  804,    0,    0,    0,  805,  804,
      805,    0,    0,  808,  804,  805,  806,  806,  806,  807,
      805,  807,  808,  806,  808,  810,  807,  810,  806,  808,
        0,  807,  810,    0,  808,    0,  809,  810,    0,    0,
      808,    0,    0,  809,    0,  809,  807,    0,  807,  808,

      809,  808,  810,  807,  810,  809,  808,    0,  807,  810,
        0,  808,    0,  809,  810,    0,  811,  812,  811,  812,
      809,    0,  809,  811,  812,    0,    0,  809,  811,  812,
        0,    0,  809,  813,    0,    0,    0,    0,    0,    0,
      813,    0,  813,  811,  812,  811,  812,  813,    0,    0,
      811,  812,  813,    0,    0,  811,  812,    0,  814,    0,
      813,  814,    0,  814,  815,    0,  815,  813,  814,  813,
        0,  815,  815,  814,  813,  816,  815,    0,    0,  813,
        0,    0,  816,    0,  816,  814,    0,    0,  814,  816,
      814,  815,    0,  815,  816,  814,    0,    0,  815,  815,

      814,    0,  816,  815,    0,  817,    0,  817,  817,  816,
        0,  816,  817,  818,    0,  818,  816,  817,    0,    0,
      818,  816,    0,    0,  819,  818,  819,    0,    0,    0,
        0,  819,  817,    0,  817,  817,  819,    0,    0,  817,
      818,    0,  818,  820,  817,  820,    0,  818,    0,    0,
      820,  819,  818,  819,  821,  820,  821,  822,  819,  822,
        0,  821,    0,  819,  822,    0,  821,    0,    0,  822,
      820,    0,  820,    0,    0,    0,  823,  820,    0,    0,
        0,  821,  820,  821,  822,  823,  822,  823,  821,    0,
        0,  822,  823,  821,    0,    0,  822,  823,  824,  825,

      824,  825,    0,  823,    0,  824,  825,  824,    0,    0,
      824,  825,  823,    0,  823,    0,    0,    0,    0,  823,
        0,    0,    0,    0,  823,  824,  825,  824,  825,  827,
        0,    0,  824,  825,  824,    0,    0,  824,  825,  826,
      827,  826,  827,    0,    0,    0,  826,  827,  826,    0,
        0,  826,  827,  828,    0,  828,  827,    0,    0,    0,
      828,  828,    0,    0,    0,  828,  826,  827,  826,  827,
        0,    0,    0,  826,  827,  826,    0,    0,  826,  827,
      828,    0,  828,  829,    0,  829,  830,  828,  828,  829,
      829,  830,  828,  830,    0,  829,    0,    0,  830,    0,

      831,    0,    0,  830,    0,    0,    0,  831,    0,  831,
      829,    0,  829,  830,  831,    0,  829,  829,  830,  831,
      830,    0,  829,    0,    0,  830,    0,  831,    0,  832,
      830,    0,    0,  832,  831,  832,  831,  833,    0,  833,
      832,  831,    0,    0,  833,  832,  831,    0,    0,  833,
        0,    0,    0,    0,    0,    0,  832,    0,    0,    0,
      832,  834,  832,  834,  833,    0,  833,  832,  834,    0,
      834,  833,  832,  834,    0,  835,  833,  835,    0,    0,
        0,    0,  835,    0,  836,    0,    0,  835,  834,    0,
      834,  836,    0,  836,  837,  834,  837,  834,  836,    0,

      834,  837,  835,  836,  835,  838,  837,  838,    0,  835,
        0,  836,  838,    0,  835,    0,    0,  838,  836,    0,
      836,  837,    0,  837,  943,  836,  943,    0,  837,    0,
      836,  943,  838,  837,  838,  944,  943,  944,  945,  838,
      945,    0,  944,    0,  838,  945,    0,  944,    0,    0,
      945,  943,  945,  943,  946,    0,  946,    0,  943,    0,
        0,  946,  944,  943,  944,  945,  946,  945,    0,  944,
      947,    0,  945,  947,  944,  947,    0,  945,    0,  945,
      947,  946,  948,  946,    0,  947,    0,  948,  946,  948,
        0,    0,    0,  946,  948,    0,  949,  947,    0,  948,

      947,    0,  947,  949,    0,  949,  950,  947,  950,  948,
      949,    0,  947,  950,  948,  949,  948,    0,  950,    0,
      951,  948,    0,  949,    0,    0,  948,  951,    0,  951,
      949,    0,  949,  950,  951,  950,  952,  949,  952,  951,
      950,    0,  949,  952,  952,  950,  953,  951,  952,    0,
        0,    0,  954,    0,  951,    0,  951,  953,    0,  953,
      954,  951,  954,  952,  953,  952,  951,  954,    0,  953,
      952,  952,  954,  953,  955,  952,    0,    0,    0,  954,
        0,    0,    0,  955,  953,  955,  953,  954,    0,  954,
      955,  953,    0,    0,  954,  955,  953,    0,    0,  954,

        0,  955,  956,    0,  956,    0,  957,    0,  957,  956,
      955,    0,  955,  957,  956,    0,    0,  955,  957,    0,
        0,    0,  955,    0,    0,    0,    0,    0,    0,  956,
      958,  956,  958,  957,    0,  957,  956,  958,  958,    0,
      957,  956,  958,    0,  959,  957,  959,  959,  960,    0,
      960,  959,    0,    0,    0,  960,  959,  958,    0,  958,
      960,    0,    0,    0,  958,  958,    0,    0,    0,  958,
        0,  959,  961,  959,  959,  960,    0,  960,  959,  961,
        0,  961,  960,  959,    0,    0,  961,  960,  962,    0,
      962,  961,    0,    0,    0,  962,    0,    0,    0,  961,

      962,    0,  963,    0,  963,    0,  961,    0,  961,  963,
      964,    0,    0,  961,  963,  962,    0,  962,  961,    0,
        0,  964,  962,  964,    0,    0,    0,  962,  964,  963,
        0,  963,    0,  964,  967,    0,  963,  964,    0,  965,
        0,  963,  965,    0,  965,  967,    0,  967,  964,  965,
      964,    0,  967,    0,  965,  964,  966,  967,  966,  966,
      964,  967,    0,  966,    0,    0,  965,    0,  966,  965,
        0,  965,  967,    0,  967,  968,  965,  968,    0,  967,
        0,  965,  968,  966,  967,  966,  966,  968,    0,  969,
      966,    0,    0,    0,    0,  966,  969,    0,  969,  970,

        0,  970,  968,  969,  968,    0,  970,  971,  969,  968,
      971,  970,  971,    0,  968,    0,  969,  971,    0,    0,
        0,    0,  971,  969,    0,  969,  970,    0,  970,  973,
      969,  973,    0,  970,  971,  969,  973,  971,  970,  971,
      972,  973,  972,    0,  971,    0,  974,  972,  972,  971,
        0,    0,  972,  974,    0,  974,  973,  975,  973,    0,
      974,    0,    0,  973,  975,  974,  975,  972,  973,  972,
        0,  975,    0,  974,  972,  972,  975,    0,    0,  972,
      974,    0,  974,    0,  975,    0,    0,  974,  976,    0,
      976,  975,  974,  975,    0,  976,  976,  977,  975,  977,

      976,    0,    0,  975,  977,  977,  978,    0,  978,  977,
        0,    0,    0,  978,    0,  976,    0,  976,  978,    0,
        0,    0,  976,  976,  977,    0,  977,  976,    0,    0,
        0,  977,  977,  978,  979,  978,  977,  979,    0,  979,
      978,  980,    0,    0,  979,  978,  981,    0,  981,  979,
      980,    0,  980,  981,    0,    0,    0,  980,  981,    0,
        0,  979,  980,    0,  979,    0,  979,    0,  980,    0,
        0,  979,    0,  981,    0,  981,  979,  980,    0,  980,
      981,  982,    0,  982,  980,  981,    0,    0,  982,  980,
      983,    0,  983,  982,    0,    0,    0,  983,    0,    0,

        0,  983,  983,    0,  984,    0,  984,    0,  982,    0,
      982,  984,  984,    0,    0,  982,  984,  983,    0,  983,
      982,    0,    0,  985,  983,  985,    0,    0,  983,  983,
      985,  984,    0,  984,  986,  985,  986,  987,  984,  984,
        0,  986,  987,  984,  987,    0,  986,    0,    0,  987,
      985,    0,  985,  988,  987,  988,    0,  985,    0,    0,
      988,  986,  985,  986,  987,  988,    0,    0,  986,  987,
        0,  987,  989,  986,  989,    0,  987,    0,    0,  989,
      988,  987,  988,  990,  989,  990,  991,  988,  991,    0,
      990,  990,  988,  991,    0,  990,    0,    0,  991,  989,

        0,  989,  992,    0,  992,    0,  989,    0,    0,  992,
      990,  989,  990,  991,  992,  991,    0,  990,  990,    0,
      991,    0,  990,  994,    0,  991,  993,    0,  993,  992,
      994,  992,  994,  993,  993,    0,  992,  994,  993,    0,
        0,  992,  994,    0,  995,    0,  995,    0,    0,    0,
      994,  995,    0,  993,  995,  993,  995,  994,    0,  994,
      993,  993,    0,    0,  994,  993,    0,    0,  996,  994,
      996,  995,  997,  995,  997,  996,    0,    0,  995,  997,
      996,  995,    0,  995,  997,    0,  998,    0,  998,    0,
        0,    0,    0,  998,    0,  996,    0,  996,  998,  997,

        0,  997,  996,    0,  999,    0,  997,  996,    0,    0,
        0,  997,  999,  998,  999,  998, 1000,    0, 1000,  999,
      998,    0,    0, 1000,  999,  998,    0,    0, 1000,    0,
     1001,  999, 1001,    0,    0,    0,    0, 1001,    0,  999,
        0,  999, 1001, 1000,    0, 1000,  999, 1002,    0,    0,
     1000,  999,    0,    0, 1002, 1000, 1002, 1001, 1003, 1001,
     1003, 1002,    0,    0, 1001, 1003, 1002,    0,    0, 1001,
     1003, 1004,    0,    0, 1002,    0,    0,    0,    0,    0,
        0, 1002, 1004, 1002, 1004, 1003,    0, 1003, 1002, 1004,
        0,    0, 1003, 1002, 1004,    0,    0, 1003, 1004, 1006,

     1005,    0, 1005, 1006,    0, 1006,    0, 1005, 1005, 1004,
     1006, 1004, 1005,    0,    0, 1006, 1004,    0,    0,    0,
        0, 1004,    0,    0,    0,    0, 1006, 1005,    0, 1005,
     1006,    0, 1006,    0, 1005, 1005, 1007, 1006, 1007, 1005,
        0,    0, 1006, 1007, 1007, 1008,    0, 1008, 1007, 1009,
        0, 1009, 1008,    0,    0,    0, 1009, 1008,    0,    0,
        0, 1009,    0, 1007,    0, 1007,    0,    0,    0,    0,
     1007, 1007, 1008, 1010, 1008, 1007, 1009,    0, 1009, 1008,
     1010,    0, 1010, 1009, 1008,    0,    0, 1010, 1009, 1011,
        0, 1011, 1010,    0,    0, 1012, 1011, 1011,    0,    0,

     1010, 1011,    0, 1012,    0, 1012,    0, 1010,    0, 1010,
     1012,    0,    0,    0, 1010, 1012, 1011,    0, 1011, 1010,
        0,    0, 1012, 1011, 1011,    0,    0, 1013, 1011, 1013,
     1012,    0, 1012, 1013, 1013,    0,    0, 1012, 1014, 1013,
     1014, 1015, 1012, 1015, 1014, 1014,    0,    0, 1015,    0,
     1014,    0,    0, 1015, 1013, 1016, 1013,    0,    0,    0,
     1013, 1013, 1016,    0, 1016, 1014, 1013, 1014, 1015, 1016,
     1015, 1014, 1014, 1017, 1016, 1015, 1017, 1014, 1017,    0,
     1015,    0, 1016, 1017,    0, 1018,    0, 1018, 1017, 1016,
        0, 1016, 1018, 1019,    0,    0, 1016, 1018,    0,    0,

     1017, 1016,    0, 1017, 1019, 1017, 1019,    0,    0,    0,
     1017, 1019, 1018,    0, 1018, 1017, 1019, 1020,    0, 1018,
     1019,    0,    0,    0, 1018,    0, 1021,    0, 1020,    0,
     1020, 1019,    0, 1019, 1021, 1020, 1021,    0, 1019,    0,
     1020, 1021,    0, 1019, 1020,    0, 1021,    0,    0,    0,
        0,    0, 1022, 1021, 1022, 1020,    0, 1020,    0, 1022,
     1022, 1021, 1020, 1021, 1022,    0,    0, 1020, 1021,    0,
     1023,    0, 1023, 1021,    0, 1024,    0, 1023, 1024, 1022,
     1024, 1022, 1023,    0,    0, 1024, 1022, 1022, 1025,    0,
     1024, 1022,    0,    0,    0,    0, 1025, 1023, 1025, 1023,

        0,    0, 1024, 1025, 1023, 1024,    0, 1024, 1025, 1023,
        0, 1026, 1024,    0, 1027, 1025, 1027, 1024,    0,    0,
        0, 1027, 1026, 1025, 1026, 1025, 1027,    0,    0, 1026,
     1025,    0,    0,    0, 1026, 1025,    0,    0, 1026,    0,
     1028, 1027, 1028, 1027,    0,    0,    0, 1028, 1027, 1026,
        0, 1026, 1028, 1027,    0,    0, 1026,    0, 1029,    0,
     1029, 1026,    0,    0, 1029, 1029,    0, 1028,    0, 1028,
     1029,    0,    0,    0, 1028,    0, 1030,    0, 1030, 1028,
        0,    0,    0, 1030, 1030, 1029,    0, 1029, 1030, 1031,
        0, 1029, 1029,    0,    0, 1032,    0, 1029,    0,    0,

     1031,    0, 1031, 1030,    0, 1030, 1032, 1031, 1032,    0,
     1030, 1030, 1031, 1032,    0, 1030, 1031,    0, 1032, 1033,
        0, 1033, 1032,    0,    0,    0, 1033, 1031,    0, 1031,
     1034, 1033, 1034, 1032, 1031, 1032,    0, 1034,    0, 1031,
     1032,    0, 1034,    0,    0, 1032, 1033, 1035, 1033,    0,
        0,    0, 1036, 1033, 1035,    0, 1035, 1034, 1033, 1034,
     1036, 1035, 1036,    0, 1034,    0, 1035, 1036,    0, 1034,
        0, 1037, 1036,    0, 1035,    0,    0,    0, 1037, 1036,
     1037, 1035,    0, 1035, 1038, 1037, 1038, 1036, 1035, 1036,
     1037, 1038, 1038, 1035, 1036,    0, 1038,    0, 1037, 1036,

        0,    0, 1039,    0, 1039, 1037,    0, 1037, 1040, 1039,
     1040, 1038, 1037, 1038, 1039, 1040,    0, 1037, 1038, 1038,
     1040, 1041,    0, 1038,    0,    0,    0, 1042,    0, 1039,
        0, 1039, 1041,    0, 1041, 1040, 1039, 1040, 1042, 1041,
     1042, 1039, 1040,    0, 1041, 1042,    0, 1040, 1041,    0,
     1042, 1043,    0, 1043, 1042,    0,    0,    0, 1043, 1041,
        0, 1041, 1044, 1043, 1044, 1042, 1041, 1042,    0, 1044,
        0, 1041, 1042,    0, 1044,    0,    0, 1042, 1043, 1123,
     1043,    0,    0,    0,    0, 1043, 1123,    0, 1123, 1044,
     1043, 1044, 1124, 1123, 1124,    0, 1044,    0, 1123, 1124,

        0, 1044,    0, 1125, 1124,    0, 1123,    0,    0,    0,
     1125,    0, 1125, 1123,    0, 1123, 1126, 1125, 1126, 1124,
     1123, 1124, 1125, 1126,    0, 1123, 1124,    0, 1126,    0,
     1125, 1124,    0,    0, 1127,    0, 1127, 1125,    0, 1125,
     1128, 1127, 1128, 1126, 1125, 1126, 1127, 1128,    0, 1125,
     1126,    0, 1128,    0,    0, 1126,    0, 1130, 1129,    0,
     1129, 1127,    0, 1127, 1130, 1129, 1130, 1128, 1127, 1128,
     1129, 1130,    0, 1127, 1128,    0, 1130,    0,    0, 1128,
        0,    0,    0,    0, 1130, 1129,    0, 1129, 1131,    0,
     1131, 1130, 1129, 1130,    0, 1131, 1131, 1129, 1130, 1132,

     1131, 1132, 1133, 1130, 1133,    0, 1132,    0,    0, 1133,
     1133, 1132,    0,    0, 1133, 1131,    0, 1131, 1134,    0,
     1134,    0, 1131, 1131,    0, 1134, 1132, 1131, 1132, 1133,
     1134, 1133, 1135, 1132, 1135,    0, 1133, 1133, 1132, 1135,
        0, 1133,    0,    0, 1135, 1134, 1136, 1134, 1136,    0,
        0,    0, 1134, 1136,    0,    0,    0, 1134, 1136, 1135,
     1137, 1135, 1137,    0,    0,    0, 1135, 1137, 1137,    0,
        0, 1135, 1137, 1136, 1138, 1136, 1138,    0,    0,    0,
     1136, 1138,    0,    0,    0, 1136, 1138, 1137,    0, 1137,
     1139, 1139, 1139,    0, 1137, 1137,    0, 1139,    0, 1137,

     1140, 1138, 1139, 1138,    0,    0,    0,    0, 1138, 1140,
        0, 1140,    0, 1138,    0,    0, 1140, 1139, 1139, 1139,
        0, 1140,    0, 1141, 1139, 1141,    0, 1140,    0, 1139,
     1141,    0, 1142,    0, 1142, 1141, 1140,    0, 1140, 1142,
     1142,    0,    0, 1140, 1142,    0,    0,    0, 1140,    0,
     1141, 1143, 1141, 1143,    0,    0,    0, 1141, 1143, 1142,
     1144, 1142, 1141, 1143,    0,    0, 1142, 1142,    0,    0,
     1144, 1142, 1144,    0, 1145,    0, 1145, 1144, 1143,    0,
     1143, 1145, 1144,    0, 1146, 1143, 1145, 1144,    0,    0,
     1143,    0,    0, 1146,    0, 1146,    0, 1144,    0, 1144,

     1146, 1145,    0, 1145, 1144, 1146,    0,    0, 1145, 1144,
        0, 1146, 1147, 1145, 1147,    0, 1148,    0, 1148, 1147,
     1146,    0, 1146, 1148, 1147,    0,    0, 1146, 1148,    0,
        0,    0, 1146,    0,    0, 1149,    0, 1149,    0, 1147,
        0, 1147, 1149, 1148,    0, 1148, 1147, 1149,    0, 1150,
     1148, 1147,    0,    0,    0, 1148, 1150,    0, 1150, 1151,
        0, 1151, 1149, 1150, 1149, 1152, 1151, 1152, 1150, 1149,
        0, 1151, 1152,    0, 1149,    0, 1150, 1152,    0,    0,
        0,    0,    0, 1150,    0, 1150, 1151,    0, 1151, 1153,
     1150, 1153, 1152, 1151, 1152, 1150, 1153, 1153, 1151, 1152,

     1154, 1153,    0, 1154, 1152, 1154,    0, 1155,    0, 1155,
     1154,    0,    0,    0, 1155, 1154, 1153,    0, 1153, 1155,
        0,    0,    0, 1153, 1153,    0,    0, 1154, 1153,    0,
     1154, 1156, 1154, 1156, 1155,    0, 1155, 1154, 1156,    0,
        0, 1155, 1154, 1156,    0, 1157, 1155, 1157,    0, 1158,
        0, 1158, 1157,    0,    0,    0, 1158, 1157, 1156,    0,
     1156, 1158,    0,    0,    0, 1156,    0,    0,    0,    0,
     1156,    0, 1157, 1159, 1157, 1159, 1158,    0, 1158, 1157,
     1159,    0,    0, 1158, 1157, 1159,    0, 1160, 1158, 1160,
        0, 1161,    0, 1161, 1160,    0,    0, 1161, 1161, 1160,

     1159,    0, 1159, 1161,    0,    0,    0, 1159, 1162,    0,
        0,    0, 1159,    0, 1160, 1162, 1160, 1162, 1161,    0,
     1161, 1160, 1162, 1163, 1161, 1161, 1160, 1162,    0,    0,
     1161, 1164,    0, 1164, 1163, 1162, 1163,    0, 1164,    0,
        0, 1163, 1162, 1164, 1162, 1165, 1163, 1165,    0, 1162,
     1163,    0, 1165,    0, 1162,    0,    0, 1165, 1164,    0,
     1164, 1163,    0, 1163, 1166, 1164, 1166,    0, 1163,    0,
     1164, 1166, 1165, 1163, 1165, 1167, 1166, 1167, 1168, 1165,
     1168,    0, 1167,    0, 1165, 1168,    0, 1167,    0,    0,
     1168, 1166,    0, 1166, 1169,    0, 1169, 1170, 1166,    0,

        0, 1169, 1167, 1166, 1167, 1168, 1169, 1168, 1170, 1167,
     1170,    0, 1168,    0, 1167, 1170,    0, 1168,    0,    0,
     1170, 1169,    0, 1169, 1170,    0,    0, 1171, 1169, 1171,
        0,    0,    0, 1169, 1171, 1170, 1172, 1170, 1172, 1171,
        0,    0, 1170, 1172, 1172,    0,    0, 1170, 1172,    0,
        0,    0, 1173,    0, 1171, 1173, 1171, 1173,    0,    0,
        0, 1171, 1173, 1172,    0, 1172, 1171, 1173,    0,    0,
     1172, 1172,    0, 1174,    0, 1172, 1174,    0, 1174, 1173,
        0,    0, 1173, 1174, 1173,    0,    0,    0, 1174, 1173,
     1175,    0,    0,    0, 1173,    0,    0, 1175,    0, 1175,

     1174,    0,    0, 1174, 1175, 1174, 1176,    0, 1176, 1175,
     1174,    0,    0, 1176,    0, 1174,    0, 1175, 1176, 1176,
     1177,    0, 1177,    0, 1175,    0, 1175, 1177,    0,    0,
        0, 1175, 1177, 1176,    0, 1176, 1175,    0,    0, 1178,
     1176,    0, 1179,    0,    0, 1176, 1176, 1177, 1178, 1177,
     1178, 1179,    0, 1179, 1177, 1178,    0,    0, 1179, 1177,
     1178,    0,    0, 1179,    0,    0, 1178,    0,    0, 1179,
        0,    0, 1180,    0, 1180, 1178,    0, 1178, 1179, 1180,
     1179, 1181, 1178, 1181, 1180, 1179,    0, 1178, 1181,    0,
     1179,    0,    0, 1181,    0, 1182,    0, 1182,    0, 1180,

        0, 1180, 1182,    0,    0,    0, 1180, 1182, 1181,    0,
     1181, 1180,    0,    0, 1183, 1181, 1183,    0,    0,    0,
     1181, 1183, 1182, 1184, 1182, 1184, 1183,    0,    0, 1182,
     1184,    0,    0,    0, 1182, 1184,    0, 1185,    0, 1185,
        0, 1183,    0, 1183, 1185,    0,    0,    0, 1183, 1185,
     1184,    0, 1184, 1183, 1187,    0, 1186, 1184, 1186,    0,
        0,    0, 1184, 1186, 1185, 1187, 1185, 1187, 1186,    0,
        0, 1185, 1187, 1188,    0,    0, 1185, 1187,    0,    0,
        0, 1187,    0, 1186, 1188, 1186, 1188,    0,    0,    0,
     1186, 1188, 1187,    0, 1187, 1186, 1188,    0, 1189, 1187,

     1188,    0,    0,    0, 1187,    0,    0, 1189, 1190, 1189,
     1190, 1188,    0, 1188, 1189, 1190, 1190,    0, 1188, 1189,
     1190,    0,    0, 1188,    0, 1189,    0,    0,    0,    0,
     1191,    0,    0,    0, 1189, 1190, 1189, 1190, 1191,    0,
     1191, 1189, 1190, 1190,    0, 1191, 1189, 1190,    0, 1192,
     1191, 1192, 1193,    0, 1193,    0, 1192, 1191,    0, 1193,
        0, 1192,    0,    0, 1193, 1191,    0, 1191, 1194,    0,
     1194,    0, 1191,    0,    0, 1194, 1192, 1191, 1192, 1193,
     1194, 1193, 1195, 1192, 1195,    0, 1193,    0, 1192, 1195,
        0, 1193,    0,    0, 1195, 1194, 1196, 1194, 1196,    0,

        0,    0, 1194, 1196,    0,    0,    0, 1194, 1196, 1195,
        0, 1195, 1197,    0, 1197, 1198, 1195, 1198, 1197, 1197,
        0, 1195, 1198, 1196, 1197, 1196, 1247, 1198, 1247,    0,
     1196,    0,    0, 1247,    0, 1196,    0,    0, 1247, 1197,
        0, 1197, 1198,    0, 1198, 1197, 1197, 1248,    0, 1198,
     1249, 1197, 1249, 1247, 1198, 1247, 1248, 1249, 1248, 1250,
     1247, 1250, 1249, 1248,    0, 1247, 1250,    0, 1248,    0,
        0, 1250,    0,    0, 1248,    0,    0, 1249,    0, 1249,
     1251,    0, 1251, 1248, 1249, 1248, 1250, 1251, 1250, 1249,
     1248,    0, 1251, 1250, 1252, 1248, 1252,    0, 1250,    0,

        0, 1252,    0, 1253,    0,    0, 1252, 1251,    0, 1251,
     1253,    0, 1253, 1254, 1251, 1254,    0, 1253,    0, 1251,
     1254, 1252, 1253, 1252, 1255, 1254, 1255,    0, 1252,    0,
     1253, 1255,    0, 1252, 1257, 1257, 1255, 1253,    0, 1253,
     1254,    0, 1254, 1256, 1253, 1256,    0, 1254,    0, 1253,
     1256, 1255, 1254, 1255,    0, 1256,    0, 1258, 1255,    0,
        0,    0,    0, 1255, 1258,    0, 1258, 1257,    0, 1257,
     1256, 1258, 1256,    0, 1257,    0, 1258, 1256, 1259, 1257,
        0,    0, 1256,    0, 1258, 1259,    0, 1259,    0,    0,
        0, 1258, 1259, 1258, 1257,    0, 1257, 1259, 1258,    0,

     1260, 1257,    0, 1258,    0, 1259, 1257,    0, 1261,    0,
     1261, 1260, 1259, 1260, 1259, 1261,    0,    0, 1260, 1259,
     1261,    0,    0, 1260, 1259, 1263,    0, 1260,    0, 1262,
        0, 1262, 1263,    0, 1263, 1261, 1262, 1261, 1260, 1263,
     1260, 1262, 1261,    0, 1263, 1260,    0, 1261,    0,    0,
     1260,    0, 1263, 1265,    0, 1265, 1262,    0, 1262, 1263,
     1265, 1263, 1264, 1262, 1264, 1265, 1263,    0, 1262, 1264,
     1264, 1263,    0,    0, 1264,    0, 1266,    0, 1266,    0,
     1265,    0, 1265, 1266,    0,    0,    0, 1265, 1266, 1264,
        0, 1264, 1265,    0,    0,    0, 1264, 1264,    0,    0,

     1267, 1264, 1267, 1266, 1268, 1266, 1268, 1267,    0,    0,
     1266, 1268, 1267,    0,    0, 1266, 1268,    0, 1269,    0,
     1269,    0,    0,    0,    0, 1269,    0, 1267,    0, 1267,
     1269, 1268,    0, 1268, 1267, 1270,    0,    0, 1268, 1267,
        0,    0,    0, 1268, 1270, 1269, 1270, 1269, 1271,    0,
     1271, 1270, 1269,    0,    0, 1271, 1270, 1269,    0,    0,
     1271,    0, 1270,    0,    0,    0,    0, 1272,    0, 1272,
        0, 1270,    0, 1270, 1272, 1271,    0, 1271, 1270, 1272,
        0,    0, 1271, 1270,    0,    0, 1273, 1271, 1273,    0,
        0,    0,    0, 1273, 1272,    0, 1272, 1274, 1273, 1274,

        0, 1272,    0, 1274, 1274, 1276, 1272, 1276, 1276, 1274,
        0,    0, 1276, 1273, 1275, 1273,    0, 1276,    0,    0,
     1273, 1275,    0, 1275, 1274, 1273, 1274,    0, 1275,    0,
     1274, 1274, 1276, 1275, 1276, 1276, 1274,    0,    0, 1276,
     1277, 1275, 1277,    0, 1276,    0,    0, 1277, 1275, 1278,
     1275, 1278, 1277,    0,    0, 1275, 1278,    0,    0,    0,
     1275, 1278,    0, 1279,    0, 1279,    0, 1277,    0, 1277,
     1279,    0,    0,    0, 1277, 1279, 1278,    0, 1278, 1277,
        0,    0,    0, 1278,    0,    0,    0, 1280, 1278, 1280,
     1279,    0, 1279,    0, 1280, 1280,    0, 1279,    0, 1280,

     1281, 1281, 1279, 1281,    0, 1282,    0, 1282, 1281,    0,
        0,    0, 1282, 1281, 1280,    0, 1280, 1282,    0,    0,
        0, 1280, 1280,    0,    0,    0, 1280, 1281, 1281, 1283,
     1281, 1283, 1282,    0, 1282, 1281, 1283,    0,    0, 1282,
     1281, 1283,    0, 1284, 1282, 1284,    0, 1285,    0, 1285,
     1284, 1284,    0,    0, 1285, 1284, 1283,    0, 1283, 1285,
        0,    0,    0, 1283,    0,    0,    0,    0, 1283,    0,
     1284,    0, 1284, 1286, 1285, 1286, 1285, 1284, 1284, 1286,
     1286, 1285, 1284,    0,    0, 1286, 1285, 1287, 1287, 1287,
        0,    0,    0,    0, 1287,    0, 1288,    0, 1288, 1287,

     1286,    0, 1286, 1288, 1288,    0, 1286, 1286, 1288,    0,
     1289,    0, 1286, 1290, 1287, 1287, 1287, 1289,    0, 1289,
     1290, 1287, 1290, 1288, 1289, 1288, 1287, 1290,    0, 1289,
     1288, 1288, 1290,    0,    0, 1288, 1291, 1289, 1291,    0,
     1290,    0,    0, 1291, 1289,    0, 1289, 1290, 1291, 1290,
     1292, 1289, 1292,    0, 1290,    0, 1289, 1292,    0, 1290,
        0,    0, 1292, 1291,    0, 1291, 1318,    0, 1318,    0,
     1291,    0, 1318, 1318, 1319, 1291, 1319, 1292, 1318, 1292,
     1319, 1319,    0,    0, 1292, 1321, 1319, 1321,    0, 1292,
        0,    0, 1321, 1318,    0, 1318,    0, 1321,    0, 1318,

     1318, 1319,    0, 1319, 1322, 1318, 1322, 1319, 1319,    0,
        0, 1322, 1321, 1319, 1321, 1323, 1322, 1323, 1324, 1321,
     1324,    0, 1323, 1323, 1321, 1324,    0, 1323,    0,    0,
     1324, 1322,    0, 1322, 1325,    0, 1325,    0, 1322,    0,
        0, 1325, 1323, 1322, 1323, 1324, 1325, 1324, 1326, 1323,
     1323,    0, 1324, 1326, 1323, 1326,    0, 1324,    0,    0,
     1326, 1325, 1327, 1325, 1327, 1326,    0,    0, 1325, 1327,
     1327,    0,    0, 1325, 1327, 1326, 1328,    0, 1328,    0,
     1326,    0, 1326, 1328,    0,    0,    0, 1326, 1328, 1327,
        0, 1327, 1326,    0,    0,    0, 1327, 1327,    0,    0,

     1329, 1327, 1329, 1328,    0, 1328,    0, 1329,    0,    0,
     1328, 1330, 1329, 1330, 1331, 1328, 1331, 1330, 1330,    0,
        0, 1331,    0, 1330,    0, 1332, 1331, 1329,    0, 1329,
     1332,    0, 1332,    0, 1329,    0,    0, 1332, 1330, 1329,
     1330, 1331, 1332, 1331, 1330, 1330,    0,    0, 1331, 1333,
     1330, 1333, 1332, 1331,    0,    0, 1333, 1332, 1334, 1332,
     1334, 1333,    0,    0, 1332, 1334,    0,    0,    0, 1332,
     1334,    0, 1335,    0, 1335,    0, 1333,    0, 1333, 1335,
        0,    0,    0, 1333, 1335, 1334,    0, 1334, 1333,    0,
        0, 1336, 1334, 1336,    0,    0,    0, 1334, 1336, 1335,

        0, 1335,    0, 1336, 1336, 1337, 1335, 1337,    0, 1337,
        0, 1335, 1337,    0,    0,    0,    0, 1337, 1336,    0,
     1336,    0,    0, 1338,    0, 1336, 1338,    0, 1338,    0,
     1336, 1336, 1337, 1338, 1337, 1339, 1337, 1339, 1338, 1337,
        0, 1340, 1339,    0, 1337,    0,    0, 1339,    0, 1340,
     1338, 1340,    0, 1338,    0, 1338, 1340,    0, 1358, 1358,
     1338, 1340, 1339, 1357, 1339, 1338,    0,    0, 1340, 1339,
     1357,    0, 1357, 1360, 1339, 1360, 1340, 1357, 1340,    0,
     1360,    0, 1357, 1340,    0, 1360,    0, 1361, 1340,    0,
     1357, 1358,    0, 1358, 1361,    0, 1361, 1357, 1358, 1357,

     1360, 1361, 1360, 1358, 1357,    0, 1361, 1360,    0, 1357,
        0,    0, 1360,    0, 1361, 1362,    0, 1362, 1358,    0,
     1358, 1361, 1362, 1361, 1363, 1358, 1363, 1362, 1361,    0,
     1358, 1363,    0, 1361,    0,    0, 1363,    0, 1364,    0,
     1364,    0, 1362,    0, 1362, 1364,    0,    0,    0, 1362,
     1364, 1363,    0, 1363, 1362,    0,    0, 1365, 1363, 1365,
        0,    0,    0, 1363, 1365, 1364, 1366, 1364, 1366, 1365,
        0,    0, 1364, 1366,    0,    0,    0, 1364, 1366,    0,
     1367,    0, 1367,    0, 1365,    0, 1365, 1367,    0,    0,
        0, 1365, 1367, 1366,    0, 1366, 1365,    0,    0, 1368,

     1366, 1368,    0,    0,    0, 1366, 1368, 1367,    0, 1367,
     1369, 1368, 1369, 1369, 1367,    0,    0, 1369, 1370, 1367,
     1370,    0, 1369,    0,    0, 1370, 1368,    0, 1368,    0,
     1370,    0,    0, 1368, 1379, 1379, 1379, 1369, 1368, 1369,
     1369, 1379,    0,    0, 1369, 1370, 1379, 1370, 1382, 1369,
     1382,    0, 1370,    0,    0, 1382,    0, 1370,    0,    0,
     1382, 1379, 1379, 1379, 1383,    0, 1383, 1384, 1379, 1384,
        0, 1383,    0, 1379, 1384, 1382, 1383, 1382,    0, 1384,
        0, 1391, 1382,    0,    0,    0,    0, 1382, 1391,    0,
     1391, 1383,    0, 1383, 1384, 1391, 1384, 1394, 1383, 1394,

     1391, 1384,    0, 1383, 1394,    0, 1384,    0, 1391, 1394,
        0, 1399,    0, 1399,    0, 1391,    0, 1391, 1399,    0,
        0,    0, 1391, 1399, 1394,    0, 1394, 1391,    0,    0,
        0, 1394, 1411,    0, 1411, 1405, 1394, 1405, 1399, 1411,
     1399,    0, 1405, 1405, 1411, 1399,    0, 1405,    0,    0,
     1399,    0,    0,    0,    0,    0,    0,    0,    0, 1411,
        0, 1411, 1405,    0, 1405,    0, 1411,    0,    0, 1405,
     1405, 1411,    0,    0, 1405, 1432, 1432, 1432, 1432, 1432,
     1433,    0,    0, 1433, 1433, 1435, 1435, 1435,    0, 1435,
     1436,    0, 1436, 1436, 1436, 1437,    0, 1437, 1437, 1437,

     1438,    0, 1438, 1438, 1438, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../cache/Mallocator.h"
#include "sql_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3458 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3472 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3759 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1432 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1431 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(AUTO_INCREMENT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(AVERAGE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(AVERAGE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(BLOB)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(COMMENT)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(COUNT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(START)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(UPSERT)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 241 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 242 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 182:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
TOKEN(EQ)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
TOKEN(NE)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
TOKEN(NE)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 248 "flex_lexer.l"
TOKEN(LE)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
TOKEN(GE)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 253 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 190:
#line 256 "flex_lexer.l"
case 191:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 192:
YY_RULE_SETUP
#line 266 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 271 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 281 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = new storage::MString(yytext + 1, strlen(yytext)-1);
  return SQL_STRING;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 287 "flex_lexer.l"
{
  yylval->sval = new storage::MString(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 292 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 293 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 294 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 295 "flex_lexer.l"
{ BEGIN 0; yylval->sval = new storage::MString(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 296 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 298 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 300 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4850 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1432 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1432 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1431);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 300 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

