#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define db__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer db__create_buffer
#endif

#ifdef yy_delete_buffer
#define db__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer db__delete_buffer
#endif

#ifdef yy_scan_buffer
#define db__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer db__scan_buffer
#endif

#ifdef yy_scan_string
#define db__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string db__scan_string
#endif

#ifdef yy_scan_bytes
#define db__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes db__scan_bytes
#endif

#ifdef yy_init_buffer
#define db__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer db__init_buffer
#endif

#ifdef yy_flush_buffer
#define db__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer db__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define db__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state db__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define db__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer db__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define db_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state db_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define db_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state db_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define db_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack db_ensure_buffer_stack
#endif

#ifdef yylex
#define db_lex_ALREADY_DEFINED
#else
#define yylex db_lex
#endif

#ifdef yyrestart
#define db_restart_ALREADY_DEFINED
#else
#define yyrestart db_restart
#endif

#ifdef yylex_init
#define db_lex_init_ALREADY_DEFINED
#else
#define yylex_init db_lex_init
#endif

#ifdef yylex_init_extra
#define db_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra db_lex_init_extra
#endif

#ifdef yylex_destroy
#define db_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy db_lex_destroy
#endif

#ifdef yyget_debug
#define db_get_debug_ALREADY_DEFINED
#else
#define yyget_debug db_get_debug
#endif

#ifdef yyset_debug
#define db_set_debug_ALREADY_DEFINED
#else
#define yyset_debug db_set_debug
#endif

#ifdef yyget_extra
#define db_get_extra_ALREADY_DEFINED
#else
#define yyget_extra db_get_extra
#endif

#ifdef yyset_extra
#define db_set_extra_ALREADY_DEFINED
#else
#define yyset_extra db_set_extra
#endif

#ifdef yyget_in
#define db_get_in_ALREADY_DEFINED
#else
#define yyget_in db_get_in
#endif

#ifdef yyset_in
#define db_set_in_ALREADY_DEFINED
#else
#define yyset_in db_set_in
#endif

#ifdef yyget_out
#define db_get_out_ALREADY_DEFINED
#else
#define yyget_out db_get_out
#endif

#ifdef yyset_out
#define db_set_out_ALREADY_DEFINED
#else
#define yyset_out db_set_out
#endif

#ifdef yyget_leng
#define db_get_leng_ALREADY_DEFINED
#else
#define yyget_leng db_get_leng
#endif

#ifdef yyget_text
#define db_get_text_ALREADY_DEFINED
#else
#define yyget_text db_get_text
#endif

#ifdef yyget_lineno
#define db_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno db_get_lineno
#endif

#ifdef yyset_lineno
#define db_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno db_set_lineno
#endif

#ifdef yyget_column
#define db_get_column_ALREADY_DEFINED
#else
#define yyget_column db_get_column
#endif

#ifdef yyset_column
#define db_set_column_ALREADY_DEFINED
#else
#define yyset_column db_set_column
#endif

#ifdef yywrap
#define db_wrap_ALREADY_DEFINED
#else
#define yywrap db_wrap
#endif

#ifdef yyget_lval
#define db_get_lval_ALREADY_DEFINED
#else
#define yyget_lval db_get_lval
#endif

#ifdef yyset_lval
#define db_set_lval_ALREADY_DEFINED
#else
#define yyset_lval db_set_lval
#endif

#ifdef yyget_lloc
#define db_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc db_get_lloc
#endif

#ifdef yyset_lloc
#define db_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc db_set_lloc
#endif

#ifdef yyalloc
#define db_alloc_ALREADY_DEFINED
#else
#define yyalloc db_alloc
#endif

#ifdef yyrealloc
#define db_realloc_ALREADY_DEFINED
#else
#define yyrealloc db_realloc
#endif

#ifdef yyfree
#define db_free_ALREADY_DEFINED
#else
#define yyfree db_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define db_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1418] =
    {   0,
        0,    0,  196,  196,    2,    2,  200,  198,    4,    4,
      198,  198,  187,  198,  194,  187,  187,  191,  187,  187,
      187,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  187,  196,  197,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  181,    0,
      186,    1,    0,  189,  188,  191,  183,  182,  180,  184,

      193,  193,  193,  193,  193,  193,   12,  193,  193,  193,
      193,  193,   22,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,   78,  193,
      193,   81,   90,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  110,  193,  193,  115,  118,  119,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  157,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  185,  196,  195,    2,    2,    2,    2,    2,    1,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      192,    0,  188,    5,  193,    7,  193,  193,   10,  193,
       13,  193,  193,   15,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,   41,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,   55,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,   66,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,   85,  193,  193,
       93,  193,  193,  193,  193,  193,  193,  101,  193,  103,
      193,  193,  111,  193,  193,  193,  116,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  141,  193,  193,  193,  193,  193,
      193,  193,  149,  193,  193,  193,  193,  193,  158,  193,
      193,  193,  193,  193,  193,  167,  193,  193,  193,  193,
      193,  193,  193,  193,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       23,  193,   25,   26,   27,  193,  193,  193,   33,  193,
      193,  193,  193,  193,   39,   42,  193,  193,  193,  193,

      193,   48,  193,  193,  193,   53,   54,  193,  193,  193,
      193,  193,  193,  193,   63,  193,  193,  193,   68,   69,
      193,  193,   73,  193,   75,   76,  193,  193,  193,  193,
      193,  193,   89,  193,   92,   94,   95,  193,   97,  193,
      193,  100,  193,  193,  193,  193,  193,  113,  193,  193,
      193,  193,  122,  193,  193,  125,  193,  193,  193,  193,
      130,  193,  193,  193,  193,  135,  193,  193,  193,  193,
      143,  144,  193,  193,  193,  193,  193,  193,  153,  154,
      155,  193,  160,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  171,  193,  173,  193,  175,  176,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    6,
        8,  193,   11,  193,  193,  193,   18,  193,  193,  193,
      193,  193,  193,  193,  193,  193,   34,  193,   36,  193,
      193,  193,  193,  193,  193,  193,   47,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,   62,   64,  193,
      193,  193,   71,  193,   77,   79,  193,   82,   83,  193,
      193,  193,  193,   96,   98,  193,  102,  104,  193,  107,
      193,  193,  193,  193,  120,  121,  193,  193,  193,  193,

      193,  129,  193,  193,  133,  193,  193,  193,  193,  142,
      193,  193,  193,  148,  150,  193,  193,  193,  193,  193,
      163,  193,  193,  193,  168,  193,  193,  193,  174,  177,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  193,  193,  193,   17,  193,   20,  193,
      193,  193,   28,  193,   30,  193,   35,  193,  193,  193,
      193,  193,  193,   46,  193,   50,  193,   52,   56,   57,
      193,   59,  193,  193,  193,   67,   70,   72,   74,   80,
       84,  193,  193,  193,   91,   99,  105,  108,  193,  112,
      193,  117,  193,  193,  193,  193,  193,  131,  193,  193,
      136,  138,  140,  193,  146,  193,  151,  193,  193,  193,

      193,  193,  164,  165,  166,  169,  193,  193,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,    9,  193,   16,   19,   21,
       24,  193,   29,   31,   32,  193,  193,  193,  193,   44,

       45,  193,  193,   58,   60,   61,  193,   86,  193,  193,
      106,  109,  193,  193,  193,  193,  127,  128,  193,  193,
      137,  139,  193,  147,  193,  193,  193,  193,  193,  170,
      172,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  193,
      193,    0,   37,   40,  193,   49,   51,  193,  193,   88,
      114,  193,  193,  193,  132,  134,  145,  193,  193,  193,

      161,  193,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  193,  193,    0,
       38,  193,   65,   87,  193,  124,  126,  152,  156,  193,
      162,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  193,    0,    0,
       43,  123,  193,    2,    2,    2,    2,    2,    2,    2,
        0,  193,    0,  178,  159,    2,    2,    2,    2,    2,
        0,  193,    0,    2,    2,    2,    0,  193,    0,    2,
        2,    2,    0,   14,    0,    2,    2,    2,    0,    0,

        2,    2,    0,    0,    2,    2,    0,  179,    2,    2,
        0,    2,    0,    2,  190,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    6,
        6,    6,    6,    6,    9,   10,    6,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,    6,    6,   21,
       22,   23,    6,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        6,    1,    6,    6,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    6,   77,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1425] =
    {   0,
        0,    0,  673,  663,   77,    0,  661, 9398,  153,  155,
      629,    0, 9398,  638, 9398,  150,  149,  161,  160,  613,
      610,  157,  157,  166,  211,  203,  256,  152,  209,  266,
      150,  163,  216,  231,  254,  302,  282,    0,  310,  350,
      398,  340,  261,  225,  168,  544,    0,  607,    0,  206,
      307,  592,  608,    0,  604,    0,  233,  456,  467,  291,
      578,  568,  487,  564,  618,  670,  718,  770,  350,  475,
      813,  487,  529,  551,  569,  864,  913,  962,  599,  668,
     1008, 1060,  601,  716,  731,  640,  498,  334, 9398,  555,
     9398, 9398,  541, 1125, 1135, 1146, 9398, 9398, 9398, 9398,

        0,  173,  160,  297,  329,  205,  263,  298,  368,  552,
      315,  325,    0,  365,  377,  781,  462,  369,  390,  830,
      390,  373,  397,  464,  484,  486,  868,  483,  485,  483,
      662,  498,  518,  538,  540,  588,  554,  554,    0,  620,
      614,  770,  618,  653,  639,  661,  673,  827,  654,  663,
      673,  683,  679,  715,  706,  727,  728,    0,  745,  733,
      767,  759,  780,  830,  772,  877,  780,  784,  832,  877,
      880,  834,  846,  830,  855,  889,  880,  900,  913,  898,
      912,  916,  939,  963,  935,  964,  939,  963,  939,  929,
      978, 9398,    0, 9398,    0,  349,    0,  539,    0,    0,

      524, 1156, 1166, 1177,    0,    0,    0,    0, 1000, 1022,
     1057, 1163, 1214, 1166, 1210, 1211, 1239, 1287, 1263, 1058,
     1299, 1313, 1341, 1381, 1331, 1381, 1410, 1462, 1459, 1470,
     1376, 1500, 1503, 1526, 1575, 1547, 1573, 1574, 1611, 1623,
     1622, 1628, 1662, 1660, 1664, 1704, 1678, 1717, 1722, 1771,
     1722, 1757, 1762, 1791, 1839, 1891, 1789, 1827, 1883, 1887,
     1927, 1967, 1931, 1983, 1986, 2009, 2027, 2033, 1844, 2072,
     1984, 2060, 2074, 2104, 2115, 2107, 2128, 2177, 2167, 2168,
     2197, 2212, 2231, 2246, 2271, 2270, 2296, 2309, 2335, 2347,
     2373, 2420, 2334, 2388, 2392, 2439, 2458, 2473, 2498,    0,

     9398,  492, 1203,    0,  980,    0,  986,  981,    0, 1002,
        0,  999, 1004,    0, 1042, 1050, 1047, 1062, 1064, 1067,
     1281, 1062, 1060, 1163, 1159, 1156, 1175, 1219, 1213, 1218,
     1278, 1220, 1264, 1273, 1288, 1325, 1287, 1317, 1323, 1342,
     1331, 1343,    0, 1349, 1356, 1359, 1357, 1372, 1386, 1388,
     1404, 1409, 1402, 1403, 1426, 1428, 1443, 1427, 1445, 1449,
     1440, 1443, 1458, 1455, 1474, 1488, 1494, 1520, 1507, 1516,
        0, 1511, 1528, 1527, 1533, 1593, 1536,    0, 1540, 1527,
     1549, 1555,    0, 1580, 1570, 1595, 1596, 1615, 1634, 1636,
     1692, 1644, 1705, 1656, 1679, 1718, 1732, 1731, 1772, 1772,

     1769, 1787, 1790, 1815,    0, 1811, 1808, 1818, 1824, 1818,
     1835, 1839,    0, 1848, 1846, 1865, 1876, 1888,    0, 1884,
     1895, 1889, 1952, 1893, 1912,    0, 1930, 1927, 1946, 1930,
     1936, 2026, 1953, 1985,    0,  491, 2563, 2497, 2556, 2557,
     2558, 2395, 2446, 2583, 2601, 2612, 2621, 2626, 2640, 2662,
     2665, 2670, 2672, 2707, 2756, 2715, 2720, 2764, 2765, 2790,
     2799, 2827, 2835, 2846, 2847, 2876, 2882, 2893, 2911, 2929,
     2937, 2955, 2963, 2991, 2993, 3017, 3019, 3045, 3032, 3073,
     3071, 3077, 3112, 3115, 3135, 3137, 3156, 3169, 3172, 3180,
     3215, 3216, 3224, 3263, 3264, 3272, 3298, 3313, 3316, 3328,

     3342, 3354, 3366, 3381, 3385, 3409, 3410, 3429, 3454, 3506,
     3432, 3467, 3468, 3503, 3521, 3545, 3547, 3560, 3586, 3589,
     3592, 3614, 3636, 3639, 3691, 3671, 3741, 3685, 3727, 3689,
     3755, 3779, 3797, 3776, 3800, 3835, 3840, 3848, 3849, 3884,
     3889, 3902, 3891, 3936, 3939, 3950, 3980, 3986, 3999, 4010,
     4029, 4049, 4054, 4048, 4083, 4068, 4108, 4103, 4142, 4133,
     4142, 4168, 4187, 4201, 4215, 4231, 4245, 4269,  488, 1997,
     2017, 2018, 2024,  451, 2055, 2046, 2068, 2101, 2096, 2106,
        0, 2134,    0,    0, 2143, 2138, 2179, 2141,    0, 2140,
     2161, 2195, 2221, 2229, 2215,    0, 2226, 2229, 2222, 2230,

     2259, 2248, 2286, 2281, 2280,    0,    0, 2278, 2284, 2280,
     2284, 2304, 2325, 2325,    0, 2326, 2340, 2357,    0,    0,
     2367, 2353,    0, 2364,    0, 2381, 2407, 2405, 2402, 2410,
     2424, 2501,    0, 2435,    0,    0,    0, 2448,    0, 2465,
     2484,    0, 2496, 2498, 2503, 2496, 2512,    0, 2534, 2537,
     2525, 2529,    0, 2563, 2568,    0, 2573, 2578, 2584, 2582,
        0, 2578, 2578, 2581, 2614,    0, 2619, 2619, 2653, 2676,
        0,    0, 2677, 2695, 2696, 2689, 2705, 2713,    0,    0,
     2720, 2745,    0, 2772, 2761, 2769, 2766, 2792, 2774, 2823,
     2829, 2828,    0, 2823,    0, 2848,    0, 2858,  484, 4280,

     4283, 4308, 4327, 4330, 4366, 4365, 4381, 4394, 4392, 4419,
     4420, 4448, 4445, 4460, 4473, 4498, 4474, 4499, 4524, 4527,
     4552, 4534, 4577, 4591, 4592, 4606, 4633, 4637, 4641, 4679,
     4693, 4690, 4734, 4691, 4726, 4735, 4770, 4776, 4789, 4812,
     4825, 4855, 4856, 4873, 4895, 4903, 4917, 4929, 4931, 4943,
     4961, 4975, 4973, 4980, 5010, 5016, 5027, 5028, 5062, 5070,
     5073, 5118, 5114, 5115, 5156, 5159, 5160, 5200, 5203, 5204,
     5243, 5248, 5251, 5250, 5253, 5293, 5293, 5301, 5337, 5345,
     5346, 5375, 5387, 5390, 5399, 5428, 5429, 5447, 5473, 5481,
     5482, 5495, 5521, 5523, 5547, 5535, 5569, 5574, 5578, 5591,

     5613, 5621, 5620, 5626, 5645, 5670, 5667, 5679, 5705, 5718,
     5720, 5734, 5750, 5753, 5774, 5788, 5797, 5816, 5839, 5842,
     5859, 5864, 5889, 5898, 5903, 5917, 5939, 5944,  450,    0,
        0, 2856,    0, 2875, 2896, 2900,    0, 2905, 2894, 2923,
     2927, 2945, 2936, 2941, 2937, 2944,    0, 2969,    0, 2971,
     2989, 2983, 2979, 3002, 2992, 3006,    0, 3004, 3019, 3034,
     3047, 3060, 3047, 3052, 3061, 3077, 3090,    0,    0, 3083,
     3088, 3102, 3102, 3125,    0,    0, 3117,    0,    0, 3125,
     3142, 3203, 3137,    0,    0, 3174,    0,    0, 3201, 3195,
     3223, 3227, 3245, 3238,    0,    0, 3266, 3263, 3288, 3275,

     3284,    0, 3307, 3318,    0, 3334, 3345, 3352, 3341,    0,
     3367, 3381, 3388,    0, 3394, 3425, 3431, 3452, 3466, 3473,
        0, 3484, 3491, 3493,    0, 3486, 3512, 3536,    0,    0,
      447, 5948, 5974, 5988, 5992, 6017, 6039, 6042, 6047, 6061,
     6087, 6099, 6101, 6133, 6106, 6142, 6148, 6165, 6177, 6191,
     6199, 6191, 6233, 6231, 6239, 6261, 6241, 6285, 6290, 6293,
     6319, 6292, 6331, 6343, 6344, 6345, 6370, 6393, 6398, 6395,
     6417, 6439, 6452, 6400, 6444, 6486, 6468, 6489, 6519, 6510,
     6533, 6557, 6558, 6573, 6587, 6601, 6615, 6631, 6634, 6645,
     6674, 6676, 6700, 6711, 6724, 6752, 6755, 6766, 6772, 6806,

     6814, 6842, 6850, 6864, 6876, 6888, 6900, 6918, 6930, 6944,
     6958, 6932, 6956, 6997, 6988, 7002, 7007, 7023, 7031, 7072,
     7075, 7069, 7078, 7122, 7130, 7127, 7135, 7129, 7164, 7172,
     7183, 7202,  437, 3542, 3535, 3554,    0, 3553,    0, 3568,
     3585, 3571, 3576, 3595,    0, 3608,    0, 3606, 3617, 3636,
     3649, 3643, 3639,    0, 3658,    0, 3659,    0,    0,    0,
     3662,    0, 3666, 3673, 3693,    0,    0,    0,    0,    0,
        0, 3687, 3710, 3717,    0,    0, 3702,    0, 3725,    0,
     3748,    0, 3730, 3745, 3749, 3754, 3737,    0, 3767, 3772,
     3785, 3788,    0, 3794,    0, 3798,    0, 3828, 3841, 3849,

     3839, 3857,    0,    0,    0,    0, 3850, 3858,  436, 7222,
     7216, 7227, 7241, 7256, 7270, 7284, 7295, 7309, 7314, 7330,
     7354, 7360, 7368, 7384, 7398, 7414, 7433, 7447, 7456, 7475,
     7494, 7498, 7517, 7536, 7540, 7559, 7565, 7579, 7594, 7600,
     7617, 7629, 7643, 7651, 7665, 7673, 7687, 7695, 7709, 7721,
     7723, 7745, 7750, 7764, 7780, 7788, 7794, 7818, 7824, 7841,
     7853, 7867, 7875, 7889, 7903, 7917, 7924, 7932, 7938, 7962,
     7968, 7976, 7992, 8011, 8035, 8034, 8058, 8079, 8076, 8082,
     8100, 8123, 8126, 8142,  439,    0, 3893,    0,    0,    0,
        0, 3901,    0,    0,    0,  352, 3903, 3908, 3918,    0,

        0, 3917, 3923,    0,    0,    0, 3938,    0, 3954, 3949,
        0,    0, 3948, 3971, 3966, 3992,    0,    0, 3989, 4001,
        0,    0, 3997,    0, 4002, 4015, 4045, 4066, 4071,    0,
        0,  438, 8156, 8170, 8184, 8198, 8212, 8226, 8019, 8237,
     8251, 8259, 8291, 8273, 8299, 8317, 8325, 8339, 8347, 8365,
     8373, 8391, 8399, 8418, 8426, 8444, 8467, 8468, 8486, 8510,
     8479, 8511, 8521, 8540, 8554, 8563, 8587, 8603, 8617, 8631,
     8645, 8661, 8675, 8689, 8714, 8722, 8736, 8744,  439, 4060,
     4064, 4192, 4065,    0, 4094,    0,    0, 4112, 4106,    0,
        0, 4114, 4122, 4130,    0,    0,    0, 4124, 4152, 4164,

        0, 4173,  437, 8766, 8774, 4218, 8781, 8809, 8817, 8828,
     8847, 8858, 8861, 8877, 8891, 8907, 8910, 8926, 8945, 8954,
     8968, 8974, 9006, 8993, 9008, 9032,  433, 4186,  438, 4181,
        0, 4198,    0,    0, 4186,    0,    0,    0,    0, 4206,
        0,  432, 9046, 9074, 4216, 9060, 9061, 9086, 9099, 9113,
     9131, 9134, 9155, 9164, 9182, 9184,  428, 4228, 4294, 4221,
        0,    0, 4264,  426, 9208, 4374, 4256, 9220, 9222, 9227,
      423, 4280, 4299, 9398,    0,  383, 9244, 4302,    0, 9252,
      383, 4297, 4319,  379, 9251, 4323,  356, 4326, 4324,  349,
     9279, 4326,  344,    0, 4349,  342, 9293, 4352,  339, 4351,

      331, 4372,  295, 4380,  288, 4405,  268, 9398,  245,    0,
      250,  247,  232,  217, 9398,    0, 9398, 9367, 9372,  201,
     9377, 9382, 9387, 9392
    } ;

static const flex_int16_t yy_def[1425] =
    {   0,
     1417,    1, 1418, 1418, 1417,    5, 1417, 1417, 1417, 1417,
     1417, 1419, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1417, 1421, 1417, 1422, 1422,
     1417, 1422, 1423, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1424, 1424,   64,   64,   64,   65,   67,   64,
       67,   64,   64,   64,   64,   65,   65,   65,   64,   64,
       64,   64,   67,   64,   64,   64, 1422, 1417, 1417, 1419,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1417, 1421, 1417, 1422, 1422, 1422, 1423, 1422, 1422,

     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,   64,   64,
       64,   67,   67,   67,   67,   67,   64,   64,   64,   64,
       64,   67,   67,   67,   64,   64,   64,   67,   67,   67,
       64,   67,   67,   67,   64,   67,   67,   64,   67,   64,
       67,   64,   64,   67,   67,   67,   67,   64,   64,   67,
       67,   64,   64,   64,   64,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   64,   64,
       64,   64,   67,   67,   67,   67,   67,   67,   64,   64,
       64,   64,   64,   64,   64,   64,   67,   64,   64,   64,
       65,   64,   64,   64,   67,   64,   64,   64,   64, 1422,

     1417, 1417, 1417, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1422, 1422, 1422,   64,   64,   64,
       64,   67,   67,   67,   67,   64,   64,   64,   64,   64,
       64,   64,   67,   67,   64,   64,   64,   64,   64,   64,
       67,   67,   67,   67,   64,   67,   67,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       67,   67,   67,   67,   64,   64,   67,   67,   67,   67,
       67,   67,   67,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   67,   67,   67,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   67,   67,
       67,   64,   64,   64,   64,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   64,   64,   64,   64,   64,
       64,   64,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   64,   64,   67,   67,   64,   64,   64,   64,   64,
       67,   67,   67,   67,   67,   67,   67,   67, 1417, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1422,   67,

       67,   64,   64,   64,   64,   64,   67,   64,   67,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   67,   64,   64,   64,   64,   67,   67,   67,   67,
       67,   67,   67,   64,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   67,   67,   67,   64,   64,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       64,   64,   64,   67,   67,   67,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   67,   67,   64,

       64,   64,   67,   64,   64,   64,   64,   64,   64,   64,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       64,   64,   64,   64,   64,   64,   64,   67, 1417, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1422,   67,   67,   67,   67,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   67,   67,   67,   64,   64,   64,
       64,   67,   67,   64,   64,   64,   67,   64,   64,   64,
       64,   67,   64,   64,   64,   64,   67,   64,   64,   64,
       64,   64,   64,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   64,   67,   67,   67,   67,   67,   67,   67,
       64,   67,   67,   67,   67,   67,   67,   67,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   67,   67,   67,   67,
       67,   67,   67,   64,   64,   64,   64,   67,   67,   67,
       67,   67, 1417, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1422,   64,
       67,   64,   64,   67,   67,   67,   64,   64,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   64,   64,   67,   67,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   67,   67,   67,   67,   67,   67,   67,   64,
       64,   64,   64,   64,   64,   64,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67, 1417, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1422,   67,   67,   67,   67,   67,   67,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   67,   67,   67,   67,   67,   67,   67,
       64,   64,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   64,   64,   64,   64, 1417, 1420,
     1420, 1417, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1422,   64,   64, 1422,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   64,   64,   64,   64,   64, 1417, 1420, 1420, 1417,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1422,   64,   64, 1422,   64,   64,   64,   64,   67,
       67,   67,   67,   67,   64,   64, 1417, 1420, 1417, 1417,
     1420, 1420, 1420, 1422,   64, 1422, 1422,   64,   64,   67,
     1417, 1420, 1417, 1417, 1420, 1422,   64, 1422, 1422,   64,
     1417, 1420, 1417, 1422,   67, 1422, 1417, 1420, 1417, 1422,
       67, 1422, 1417, 1420, 1417, 1422,   67, 1422, 1417, 1417,

     1422, 1422, 1417, 1417, 1422, 1422, 1417, 1417, 1422, 1422,
     1417, 1422, 1417, 1422, 1417, 1422,    0, 1417, 1417, 1417,
     1417, 1417, 1417, 1417
    } ;

static const flex_int16_t yy_nxt[9476] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   38,   45,   38,    8,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   38,   45,   38,   46,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   79,   86,   79,   49,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       79,   86,   79,   87,   88,   88,   88,   88,   92,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   93,
       95,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   97,   98,  102,  110,  103,  134,  144,  111,  114,
      145,  104,  135,  105,  112,  191,  115,  106,  107,  304,

      108,  109,  305,  116,  113,  101,  117,  196,   88,  118,
      102,  110,  103,  134,  144,  111,  114,  145,  104,  135,
      105,  112,  191,  115,  106,  107,  304,  108,  109,  305,
      116,  113,  136,  117,  119, 1416,  118,  124,  120,  125,
      137,  200,  121,  146,  126,  310,  138,  147,  122,  127,
     1415,  123,  201,  148,  149,  189,  190, 1414,  150,  136,
     1413,  119,  151, 1412,  124,  120,  125,  137,  152,  121,
      146,  126,  310,  138,  147,  122,  127,  153,  123,  128,
      148,  149,  189,  190,  187,  150, 1411,  129,  311,  151,
      130,  154,  188,  131,  139,  152,  132,  155,  156,  133,

      140,  141,  142, 1409,  153,  162,  128,  143,   88,   88,
     1407,  187,  205,  206,  129,  311,  163,  130,  154,  188,
      131,  139,  164,  132,  155,  156,  133,  140,  141,  142,
      157,  306,  162,  165,  143,   88,   88,  166,  158,  307,
      312,  167,  159,  163,  318,  160,  161,  168, 1405,  164,
      196,   88,  308, 1282, 1282,  309, 1403,  157,  306, 1401,
      165, 1399,  319, 1396,  166,  158,  307,  312,  167,  159,
     1393,  318,  160,  161,  168,  169,  184,  170,  185,  308,
      171,  186,  309,  172,  242,  173,  209,  174,  175,  319,
      243,  209,  176,  177, 1390,  313,  209,  314, 1387,  320,

      322, 1384,  169,  184,  170,  185,  321,  171,  186,  330,
      172,  242,  173,  209,  174,  175,  340,  243,  209,  176,
      177,  178,  313,  209,  314,  179,  320,  322,  180,  181,
      338,  339,  331,  321,  341,  182,  330,  332,  183, 1359,
     1359, 1381, 1376,  340, 1371, 1364, 1357, 1342,  178, 1327,
     1303, 1279,  179, 1232, 1185,  180,  181,  338,  339,  331,
     1109,  341,  182, 1033,  332,  183,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  203,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  195,  195,  328,
      195,  195,  195,  195,  195,  195,  195,  931,  244,  329,

      834,  829,  209,  699,  569,  342,  245,  195,  195,  195,
      343,  344,  246,  210,  209,  211,  328,  350,  209,  351,
      352,  212,  209,  213,  252,  244,  329,  214,  215,  209,
      216,  217,  342,  245,  209,  355,  436,  343,  344,  246,
      210,  209,  211,  435,  350,  209,  351,  352,  212,  209,
      213,  252,  356,  302,  214,  215,  253,  216,  217,  301,
      209,  209,  355,  195,  195,  195,  209,  195,  195,  195,
      195,  195,  195,  195,  300,  357,  209,  358,  254,  356,
      315,  316,  255,  253,  195,  195,  195,  209,  256,  208,
      361,  218,  257,  209,  317,  219,  258,  362,  209,  207,

      259,  220,  357,  209,  358,  254,  260,  315,  316,  255,
      199,  221,  195,  197,  194,  256,  209,  361,  218,  257,
      192,  317,  219,  258,  362,  209,  209,  259,  220,  359,
      209,  100,  360,  260,   99,  209,  209,  292,  221,  293,
      195,  222,  294,  209,   91,  209,  209,  209,  223,  209,
       89,  363,  364,  209,  369,  224,  359,  209,  225,  360,
     1417,  226,  209,  209,  292,  209,  293,  299,  222,  294,
       48,  209,  209,  209,  209,  223,  209,  209,  363,  364,
       48,  369,  224, 1417,  370,  225,  371,  209,  226,  372,
     1417,  273,  209,  227,  299,  274,  353,  228,  209,  275,

      378,  229,  354,  379,  209,  276,  373,  230,  374,  380,
      231,  370, 1417,  371,  209,  209,  372,  209,  273,  381,
      227,  382,  274,  353,  228, 1417,  275,  378,  229,  354,
      379, 1417,  276,  373,  230,  374,  380,  231, 1417,  295,
      385, 1417,  209,  209,  209,  209,  381,  296,  382,  209,
      386, 1417,  232,  209,  233,  209,  387,  383,  209,  234,
      384,  297,  298,  209,  235,  209,  295,  385,  209, 1417,
      209,  388,  209, 1417,  296,  389,  209,  386,  209,  232,
      209,  233,  209,  387,  383,  209,  234,  384,  297,  298,
      209,  235,  209,  236,  390,  209,  365, 1417,  388,  391,

      209,  237,  389,  392,  238,  209,  366,  239,  395,  399,
      240,  367,  368,  241, 1417,  323,  324,  325,  400,  326,
      236,  390, 1417,  365,  327, 1417,  391,  209,  237,  401,
      392,  238, 1417,  366,  239,  395,  399,  240,  367,  368,
      241,  247,  323,  324,  325,  400,  326,  248,  249,  250,
      375,  327,  376,  333,  251,  334,  401,  393,  335,  209,
     1417,  394,  402,  377,  336,  408, 1417, 1417,  247,  409,
      410,  337, 1417, 1417,  248,  249,  250,  375,  411,  376,
      333,  251,  334, 1417,  393,  335,  209,  261,  394,  402,
      377,  336,  408,  345,  209,  346,  409,  410,  337,  347,

      396,  262,  403,  406,  209,  411,  348,  263,  264, 1417,
      349,  404,  412,  397,  261,  413, 1417,  407,  398,  405,
      345,  209,  346, 1417,  414,  417,  347,  396,  262,  403,
      406,  209, 1417,  348,  263,  264,  209,  349,  404,  412,
      397,  265,  413,  209,  407,  398,  405,  418,  415,  266,
      209,  414,  417,  267,  419, 1417,  268,  269, 1417,  416,
     1417,  425,  420,  209, 1417, 1417,  432, 1417,  265, 1417,
      209,  433, 1417,  428,  418,  415,  266,  209, 1417,  429,
      267,  419,  421,  268,  269,  270,  416,  422,  425,  420,
      430,  426,  209,  432,  423,  427,  271,  424,  433,  209,

      428,  434,  272,  431, 1417,  209,  429,  570, 1417,  421,
     1417, 1417,  270,  571,  422,  572, 1417,  430,  426,  209,
     1417,  423,  427,  271,  424,  573,  209,  209,  434,  272,
      431,  209,  209,  277,  570,  278,  574,  209,  279,  209,
      571,  280,  572,  281,  575,  282,  283,  209,  438,  209,
      284,  285,  573,  209,  209,  209, 1417, 1417,  209,  209,
      277, 1417,  278,  574,  209,  279,  209, 1417,  280,  209,
      281,  575,  282,  283,  209,  438,  209,  284,  285,  576,
      209,  577,  209,  286,  209,  209,  209,  287,  209,  209,
      288,  289,  578,  579,  209,  453,  209,  290,  580,  439,

      291,  581,  585,  586,  209,  209,  576,  209,  577, 1417,
      286,  209,  209, 1417,  287,  209,  209,  288,  289,  578,
      579,  209,  453, 1417,  290,  580,  439,  291,  581,  585,
      586,  209,  209, 1417,  209,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,   95,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  203,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  440,  587,  209,

      209,  588,  209,  589,  209,  441,  444,  209, 1417,  209,
     1417,  590,  209,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303, 1417,  440,  587,  209,  209,  588,  209,
      589,  209,  441,  444,  209,  445,  209,  442,  590,  209,
      443, 1417,  591, 1417,  209,  209,  209,  209,  209, 1417,
      209,  209,  209,  446,  592,  209,  209,  209,  593, 1417,
      209,  596,  445, 1417,  442, 1417,  447,  443,  448,  591,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      446,  592,  209,  209,  209,  593,  209,  209,  596, 1417,
      209, 1417,  452,  447,  209,  448, 1417,  209,  597, 1417,

      209,  594, 1417,  209,  598,  595,  582, 1417,  583, 1417,
      209,  599,  602,  209,  209,  449,  450,  209,  209,  452,
     1417,  209, 1417,  584,  209,  597,  209,  209,  594,  451,
      209,  598,  595,  582,  209,  583,  209,  209,  599,  602,
     1417,  209,  449,  450,  603,  209,  209,  454, 1417,  209,
      584,  209,  600,  209,  455, 1417,  451,  209,  462,  209,
     1417,  209,  209,  209,  456,  604,  605,  601,  463,  606,
      607,  603,  608,  209,  454,  209,  209,  209,  209,  600,
     1417,  455,  209,  609,  610,  462,  209,  209, 1417,  209,
     1417,  456,  604,  605,  601,  463,  606,  607,  611,  608,

     1417, 1417,  209,  209,  209,  209,  612,  209,  209,  209,
      609,  610,  209,  475,  209,  457,  458,  459,  209,  460,
     1417,  464,  209,  209,  461,  611,  613,  209,  209,  614,
      209,  615,  616,  612,  209,  209,  617,  209,  618,  209,
      475,  209,  457,  458,  459,  209,  460,  209,  464,  209,
      209,  461,  465,  613,  209,  209,  614,  466,  615,  616,
     1417,  619,  620,  617,  209,  618, 1417,  621,  209, 1417,
      622, 1417, 1417, 1417,  209,  623, 1417, 1417, 1417,  465,
      624, 1417,  625,  626,  466,  467, 1417,  468,  619,  620,
      469,  627,  628,  209,  621,  209,  470,  622,  209,  472,

      473,  629,  623,  471,  209,  209,  209,  624,  209,  625,
      626,  209,  467,  474,  468,  630,  209,  469,  627,  628,
      209,  631,  209,  470, 1417,  209,  472,  473,  629,  477,
      471,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      474,  476,  630,  209,  209, 1417,  209,  632,  631,  209,
      634,  478,  635,  636, 1417,  637,  477,  633,  638,  639,
      209,  209,  209,  209,  209,  642,  209,  209,  476,  643,
      644,  209,  209,  209,  632, 1417,  209,  634,  478,  635,
      636,  484,  637,  209,  633,  638,  639,  209,  209,  209,
     1417,  645,  642,  209,  209, 1417,  643,  644,  646,  209,

      479,  209,  480,  647,  648,  209,  481,  485,  484,  209,
      209,  486,  209,  482,  209,  209,  640,  483,  645,  209,
      209,  209,  209, 1417, 1417,  646,  641,  479,  209,  480,
      647,  648,  209,  481,  485,  649,  209,  650,  486,  209,
      482,  209,  651,  640,  483,  487,  209,  209,  209,  209,
      209,  488,  209,  641,  209,  209,  490,  209,  209,  209,
      489,  652,  649,  209,  650,  491, 1417, 1417,  209,  651,
      209, 1417,  487, 1417,  209,  209,  653,  209,  488,  209,
      656,  209,  209,  490,  209,  209,  209,  489,  652,  209,
      209,  659,  491,  209,  209,  209,  209,  209,  209,  492,

      495,  493,  209,  653,  494,  209,  209,  656,  660,  209,
      209, 1417,  209, 1417,  209,  654,  209, 1417,  659,  209,
      209,  209, 1417,  209,  209,  209,  492,  495,  493, 1417,
      657,  494,  209,  209,  655,  660,  209,  209,  209,  209,
      209,  209,  654,  658,  209,  209,  209,  496,  497,  209,
      209,  209,  661,  209,  209,  662,  209,  657,  503,  209,
      498,  655, 1417,  209,  209,  209, 1417,  209,  209,  209,
      658,  209,  209,  663,  496,  497,  209,  209, 1417,  661,
      209,  209,  662,  209,  209,  503,  209,  498,  504,  209,
      209,  209, 1417,  209,  209,  209,  209,  499, 1417,  209,

      663, 1417,  664, 1417,  209,  209,  665,  500, 1417,  505,
      666,  209,  501,  502,  667,  504,  209,  209,  209,  506,
      209,  209,  209,  209,  499,  209,  209,  668,  209,  664,
      209,  209,  209,  665,  500,  512,  505,  666,  209,  501,
      502,  667,  669, 1417,  209,  209,  506, 1417, 1417,  209,
      209,  670,  209,  671,  668,  209,  672,  209,  673, 1417,
      674,  209,  512,  209, 1417,  209,  209,  513,  209,  669,
      209,  524,  507,  209,  508,  209,  209,  675,  670,  676,
      671,  209,  677,  672,  678,  673,  209,  674,  209, 1417,
      209,  209, 1417,  209,  513,  209, 1417,  209,  524,  507,

      209,  508,  209,  209,  675, 1417,  676,  679,  209,  677,
     1417,  678,  680,  209,  509,  681,  510,  209,  209,  514,
      682,  209,  683,  515,  209,  209,  685,  511,  209,  209,
      688,  684,  209,  209,  679,  689, 1417,  209, 1417,  680,
     1417,  509,  681,  510,  209, 1417,  514,  682,  209,  683,
      515,  209,  209,  685,  511,  209,  209,  688,  684,  209,
      209,  209,  689,  209,  209,  519,  690,  209,  209,  516,
      691,  692,  209,  209, 1417,  693, 1417,  209,  694, 1417,
     1417, 1417, 1417,  697, 1417, 1417, 1417, 1417,  209,  686,
      209,  687,  519,  690,  209,  209,  516,  691,  692,  209,

      209,  209,  693,  209,  209,  694,  520,  526,  209,  517,
      697,  209,  518,  209,  521,  209,  686,  209,  687,  209,
      209,  209,  209, 1417,  209,  698, 1417,  209,  209,  209,
      209,  209,  209,  520,  526,  209,  517,  830,  209,  518,
      209,  521,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  698,  522,  209,  209,  209,  831,  209,  209,
     1417,  209,  695,  209,  830,  832,  696,  209,  209,  209,
      209,  833,  209,  209,  209,  523, 1417,  209,  835,  209,
      522, 1417,  209, 1417,  831, 1417,  836,  527,  209,  695,
      209,  528,  832,  696,  209,  209,  209,  209,  833,  209,

      209,  209,  523,  209,  837,  835,  209,  209,  209,  209,
      529, 1417,  525,  836,  527,  209, 1417, 1417,  528,  209,
      209, 1417, 1417, 1417,  209, 1417,  209,  530,  838, 1417,
      209,  837,  839,  840,  209,  209,  209,  529,  209,  525,
      531,  534,  209,  209,  533,  532,  209,  209,  209,  209,
      209,  209,  535,  209,  530,  838,  209,  841,  536,  839,
      840,  209,  209, 1417,  209,  209,  842,  531,  534,  209,
      209,  533,  532,  843,  209,  209,  209,  209,  209,  535,
      209,  846,  847,  209,  841,  536, 1417, 1417,  209,  209,
      540,  209, 1417,  842,  209,  209,  209, 1417,  209,  542,

      843,  209,  537,  848,  541,  209,  844, 1417,  846,  847,
      845,  538, 1417,  209,  209,  209, 1417,  540,  209,  539,
      543,  209,  209,  209,  209,  209,  542, 1417,  209,  537,
      848,  541,  209,  844,  209, 1417,  849,  845,  538,  209,
      209,  209,  209,  209,  209,  209,  539,  543,  850,  209,
      209,  209,  544,  851,  545,  209, 1417,  852,  209,  209,
      853,  209,  209,  849,  854,  855,  209, 1417,  209,  546,
      209,  209,  856,  209, 1417,  850,  209,  209,  209,  544,
      851,  545,  857,  209,  852,  209,  209,  853,  858,  209,
     1417,  854,  855,  209,  548,  209,  546,  209,  209,  856,

      209,  209,  209, 1417,  209,  209,  547,  209,  209,  857,
      209,  859,  860, 1417,  861,  858,  862,  209,  209, 1417,
      209,  548,  863,  864,  209,  209,  865,  866,  209,  209,
      209,  549,  209,  547,  209,  209,  551,  209,  859,  860,
      209,  861,  550,  862,  209,  209,  209, 1417,  867,  863,
      864, 1417,  868,  865,  866, 1417,  209,  209,  549,  209,
      559,  209,  209,  551,  209,  209,  209,  209,  869,  550,
      552,  209,  209,  209,  209,  867, 1417,  870,  209,  868,
      871,  209,  209,  209,  209,  553, 1417,  559,  209,  209,
      872,  873,  209,  209,  209,  869,  554,  552,  209,  209,

      874,  209, 1417,  209,  870,  209, 1417,  871,  209,  209,
      209,  209,  553,  209, 1417,  560,  555,  872,  873,  561,
     1417,  209,  875,  554, 1417,  209,  562,  874,  209,  702,
      209,  209,  563,  209,  876,  209,  209,  209,  209, 1417,
      209,  209,  560,  555,  556,  877,  561,  209,  878,  875,
      879,  557,  209,  562,  558,  209,  702,  209,  209,  563,
      209,  876,  209,  209,  880,  209,  564,  209,  209,  883,
      209,  556,  877, 1417,  209,  878,  209,  879,  557,  565,
      209,  558,  209, 1417,  209,  566,  209,  209, 1417,  209,
      884,  880,  209,  564,  209,  209,  883,  209, 1417,  885,

      209, 1417, 1417,  209,  209,  209,  565,  209, 1417,  209,
      209,  886,  566,  209,  209,  567,  209,  884, 1417,  209,
      209,  568,  209,  887,  209,  209,  885,  209,  209,  209,
      881,  209,  209,  890,  209,  209,  891,  209,  886,  888,
      889,  882,  567,  892,  209,  209, 1417,  209,  568, 1417,
      887,  209,  209, 1417, 1417,  209,  209,  881, 1417,  893,
      890,  209,  209,  891,  894,  895,  888,  889,  882,  896,
      892,  209,  209,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  700,  209,  701,  893,  209,  209,  209,
     1417,  894,  895,  209,  209,  209,  896, 1417,  897,  898,

      899,  900, 1417,  209,  209,  209,  703,  901, 1417,  902,
      700,  209,  701,  903,  209,  209,  209,  209,  904,  209,
      209,  209,  209,  905,  209,  897,  898,  899,  900,  209,
      209,  209,  209,  703,  901,  209,  902,  209,  906,  209,
      903, 1417,  209,  209,  209,  904,  209,  209,  209,  704,
      905,  209,  209,  209,  907,  908,  209,  209,  209,  209,
     1417,  705,  209,  209,  209,  906,  209,  209,  209,  209,
      209,  209, 1417,  209,  209,  209,  704,  706,  909,  209,
      209,  907,  908, 1417,  209,  209,  209,  209,  705,  209,
      209, 1417,  209,  707,  209,  209,  209,  209,  209,  209,

      209,  709,  209,  910,  706,  909,  710,  209,  209,  209,
      708,  911,  209,  209,  209, 1417,  209,  209,  209,  209,
      707, 1417,  912,  209,  209, 1417,  209,  913,  709,  209,
      910,  914,  915,  710,  209,  209,  209,  708,  911,  209,
      209,  711,  209,  209,  209,  209,  209,  209,  209,  912,
      916,  209,  209,  209,  913,  715, 1417,  209,  914,  915,
     1417,  917,  209,  716, 1417, 1417, 1417,  209,  711,  209,
      209, 1417, 1417,  209,  209,  209, 1417,  916,  209,  209,
      209,  712,  715,  713,  209, 1417,  918,  209,  917,  209,
      716,  209,  209,  209,  209,  209,  209,  919,  714,  717,

     1417,  209,  209,  209,  920,  921, 1417,  718,  712,  922,
      713,  209,  209,  918,  209,  923,  924,  209,  209,  209,
      209,  209,  209,  209,  919,  714,  717,  209,  209,  209,
      209,  920,  921,  209,  718,  720,  922,  719,  209,  209,
      209, 1417,  923,  924,  209,  209, 1417, 1417,  209, 1417,
      721, 1417,  925, 1417,  209, 1417,  926, 1417,  927, 1417,
      209,  209,  720,  209,  719, 1417,  928,  209,  209,  209,
      724,  209,  209,  209,  725,  929,  722,  721,  209,  925,
      209,  209,  209,  926,  209,  927,  723,  209,  209, 1417,
      209, 1417,  209,  928,  209,  209,  209,  724,  209,  930,

      209,  725,  929,  722, 1034,  209, 1035,  209,  209,  209,
      209,  209,  209,  723,  209, 1417,  727,  726,  209,  209,
      209,  209,  209,  209,  728, 1036,  930, 1037,  209, 1417,
      209, 1034, 1038, 1035,  729, 1417, 1039,  209,  209,  209,
      209, 1417,  209,  727,  726,  209, 1040,  209,  209,  209,
      209,  728, 1036, 1041, 1037,  209,  730,  209,  209, 1038,
      209,  729,  732, 1039,  209,  209,  209,  209,  209,  209,
     1042,  731, 1043, 1040,  209,  209,  209, 1044, 1417, 1045,
     1041, 1046,  733,  730,  209,  209,  209,  209, 1417,  732,
      209,  209,  209,  209,  209,  209, 1047, 1042,  731, 1043,

      209,  209,  209,  209, 1044,  734, 1045, 1048, 1046,  733,
      209,  209, 1049,  209, 1050,  735, 1051,  209,  209,  209,
      209,  209,  209, 1047,  209, 1052, 1053,  209,  209,  209,
      209,  736,  734, 1054, 1048, 1055, 1417,  209,  209, 1049,
      209, 1050,  735, 1051,  737,  209,  209,  209,  209,  209,
      209,  209, 1052, 1053,  209,  209,  209,  209,  736,  739,
     1054, 1056, 1055,  209,  209,  209,  209,  209,  738,  209,
     1057,  737,  209,  209, 1058,  209,  209,  209, 1417,  209,
     1417,  209,  209,  209, 1417, 1417,  739, 1059, 1056, 1060,
      209,  209,  209,  209, 1061,  738,  209, 1057,  740,  209,

      209, 1058, 1062,  209,  209,  209,  209,  209, 1063,  209,
      209,  742,  741,  209, 1059, 1064, 1060,  209,  209,  209,
      209, 1061, 1417,  209, 1417,  740, 1417,  209, 1065, 1062,
     1066,  209,  209, 1417,  209, 1063, 1067,  209,  742,  741,
      209, 1417, 1064, 1068,  209,  209,  209,  209,  209,  209,
      209,  209,  743,  209, 1069, 1065,  744, 1066,  209, 1070,
      746,  209,  745, 1067,  209, 1417,  209, 1071,  209, 1072,
     1068, 1075,  209,  209,  209,  209,  209, 1417,  209,  743,
      209, 1069,  209,  744,  209,  209, 1070,  746,  209,  745,
      747,  209,  209,  209, 1071,  209, 1072,  209, 1075,  209,

     1076,  209,  209,  209,  748,  209,  209,  749,  209,  209,
      209,  209, 1417,  209,  750,  209,  209,  747,  209,  209,
     1417,  209, 1417, 1417,  209, 1417,  209, 1076, 1077,  209,
      209,  748,  209,  209,  749,  209, 1078,  209, 1417,  751,
      209,  750,  209,  209, 1073,  209, 1079, 1074,  209,  209,
      209,  209,  209,  209,  753, 1077,  209,  209,  209,  752,
      209,  209,  209, 1078, 1417,  209,  751, 1417, 1417, 1080,
      209, 1073, 1417, 1079, 1074, 1081,  209,  209,  209,  209,
     1082,  753, 1417,  209,  209,  209,  752,  209,  209,  209,
      209,  209,  209, 1083,  754,  209, 1080,  209, 1417,  209,

      209,  209, 1081,  209, 1417, 1084,  755, 1082, 1417,  209,
      209,  209,  756, 1417, 1085, 1086, 1417,  209,  209,  209,
     1083,  754,  209, 1417, 1087,  209,  209,  209,  209,  209,
      209,  757, 1084,  755, 1088,  209,  209,  209,  209,  756,
      209, 1085, 1086,  759,  209,  209,  209,  209, 1417, 1089,
      758, 1087,  209,  209, 1417,  760,  209, 1090,  757,  209,
      209, 1088,  209,  209, 1417,  209, 1417,  209, 1091,  761,
      759,  209,  209,  209,  209,  209, 1089,  758, 1092,  209,
      209,  762,  760, 1093, 1090,  209,  209,  209, 1417,  209,
      209,  763,  209,  209, 1417, 1091,  761,  209, 1094, 1417,

      209,  209,  209,  209, 1417, 1092,  209, 1095,  762,  764,
     1093, 1096,  209,  209, 1417,  209,  209,  765,  763,  209,
      209,  209,  209, 1417,  209, 1094,  209,  209,  209, 1417,
      209,  209, 1417, 1417, 1095, 1097,  764,  767, 1096, 1417,
      209,  209,  209,  209,  765,  209,  209,  209,  209,  209,
      209,  766, 1417,  209,  209,  209,  209,  209,  209,  209,
      768,  772, 1097,  209,  767, 1098,  209, 1417,  209,  209,
      209, 1417,  209, 1099,  209, 1100,  209,  209,  766,  209,
      769,  209,  209,  209,  209,  209,  209,  768,  772, 1101,
      209,  209, 1098,  209,  209,  209,  209,  773,  209,  209,

     1099,  209, 1100,  209,  209,  209,  209,  769,  209, 1102,
     1417, 1103,  209, 1417,  209,  209, 1101, 1104,  209, 1417,
     1105,  209,  209, 1417,  773,  209,  209, 1106,  209,  770,
      209,  209,  209,  209,  209, 1107, 1102,  209, 1103,  771,
      209,  209,  209,  209, 1104, 1417,  774, 1105,  209, 1417,
      209, 1417,  209,  209, 1106, 1417,  770,  209,  209, 1108,
      209,  209, 1107,  775,  209, 1417,  771,  209,  209, 1186,
      209, 1187,  209,  774,  209,  209,  209,  209,  209,  209,
      209, 1188,  209,  777,  209,  209, 1108,  209,  776, 1189,
      775,  209,  209, 1417,  209,  209, 1186,  209, 1187,  209,

     1417,  209, 1417,  209, 1190,  209, 1417,  209, 1188,  209,
      777,  209, 1191, 1192,  209,  776, 1189, 1193,  209,  209,
      778,  209,  209,  209,  209,  209,  209,  209,  209,  779,
      209, 1190,  209,  780,  209,  209, 1417, 1194,  209, 1191,
     1192,  781, 1195, 1417, 1193,  209, 1417,  778, 1196,  209,
      209,  209,  209,  209,  209,  209,  779,  209, 1197,  209,
      780,  209,  209,  782, 1194,  209,  209,  209,  781, 1195,
      209, 1198,  209,  209, 1199, 1196,  209, 1200,  209,  783,
     1417, 1201, 1202,  209, 1203, 1197,  209, 1417,  209, 1204,
      782, 1417, 1417,  209,  209, 1417, 1417,  209, 1198, 1417,

      209, 1199, 1205,  209, 1200,  209,  783,  786, 1201, 1202,
      209, 1203,  209,  209,  784, 1206, 1204,  209,  209,  209,
      789,  209,  209,  791, 1207,  209,  209, 1208,  209, 1205,
      209,  209,  209,  785,  786,  209, 1417, 1209,  209,  209,
     1210,  784, 1206, 1211,  209,  209,  209,  789,  209,  209,
      791, 1207,  209,  209, 1208,  209,  790,  209,  209, 1212,
      785,  209,  209,  209, 1209,  209,  787, 1210,  209, 1417,
     1211, 1213, 1214,  209, 1417,  209, 1215,  209,  792,  788,
     1216, 1217,  209,  790, 1218, 1417, 1212,  209,  209,  209,
      209,  209, 1219,  787, 1417,  209,  209, 1220, 1213, 1214,

      209,  209,  209, 1215,  209,  792,  788, 1216, 1217,  209,
      795, 1218,  209,  209,  209,  209,  209,  209,  209, 1219,
      209,  793,  209,  209, 1220,  209, 1221,  794,  209, 1222,
     1223,  209, 1224,  209,  209, 1417,  209,  795,  209,  209,
      209,  796,  209,  209,  209, 1417,  209,  209,  793,  209,
     1417, 1225,  209, 1221,  794, 1417, 1222, 1223,  209, 1224,
      209,  209,  797,  209, 1226,  209,  209,  209,  796, 1417,
      209,  209,  209,  209, 1227,  799,  209,  798, 1225,  209,
      209, 1228,  209, 1229, 1417,  209,  209,  209, 1417,  797,
     1230, 1226, 1231,  209,  209,  209,  209, 1417,  209,  209,

     1417, 1227,  799,  209,  798, 1417,  209,  209, 1228,  209,
     1229,  209,  209,  209,  209,  209,  209, 1230, 1280, 1231,
      209,  209,  209,  209,  800,  803,  209,  209, 1281,  209,
     1283,  209,  209,  209,  801, 1284,  209,  209,  209,  209,
      802, 1285,  209,  209, 1286, 1280, 1417,  209,  209,  209,
     1417,  800,  803,  209,  209, 1281,  209, 1283,  209,  209,
      209,  801, 1284,  209,  209, 1287,  209,  802, 1285, 1417,
      209, 1286,  209,  209, 1288,  209,  209,  209,  804, 1289,
      209,  805,  209, 1290,  209,  209,  209, 1417, 1291, 1417,
      806,  209, 1287, 1417, 1417, 1417,  209,  209, 1292,  209,

      209, 1288,  209, 1293,  209,  804, 1289,  209,  805,  209,
     1290,  209,  209,  209,  209, 1291,  209,  806,  209, 1417,
      807,  209,  209,  209, 1417, 1292,  209,  209, 1294, 1417,
     1293, 1295,  209,  209, 1296,  209, 1417,  808, 1417, 1297,
      209,  209, 1298,  209,  209,  209,  209,  807,  209,  209,
     1299,  209,  809,  209,  209, 1294,  209, 1417, 1295,  209,
      209, 1296,  209,  209,  808,  810, 1297,  209, 1417, 1298,
      209,  209,  209,  209, 1417,  209,  811, 1299,  209,  809,
      209,  209,  209,  209,  812,  209,  209, 1300, 1417,  209,
      209,  209,  810, 1301,  209,  209,  209,  209, 1302,  209,

     1328,  209,  209,  811, 1329,  815, 1331,  209,  209,  209,
      813,  812,  209,  209, 1300,  209,  209,  209,  209,  814,
     1301,  209,  209,  209,  209, 1302,  209, 1328,  209,  209,
      209, 1329,  815, 1331,  209,  209, 1332,  813, 1417,  209,
      818, 1333,  209, 1417,  209,  816,  814,  817, 1334, 1417,
      209,  209, 1417, 1417, 1335,  209,  209,  209, 1336, 1337,
      209,  209,  209, 1332,  209,  819,  209,  818, 1333,  209,
      209, 1338,  816,  209,  817, 1334,  209,  209,  820,  209,
      209, 1335,  209,  209, 1417, 1336, 1337,  209,  209,  209,
     1339,  209,  819, 1282, 1282, 1340,  209,  209, 1338, 1341,

      209, 1417,  209,  209,  209,  820,  209,  209, 1417,  209,
      209,  821,  822, 1358,  209,  209,  209, 1339, 1360, 1306,
     1282,  209, 1340,  209, 1417, 1361, 1341, 1362,  209,  209,
     1417,  209, 1330,  209, 1417,  209,  209,  209,  821,  822,
     1358,  209,  209, 1363, 1417, 1360,  823,  209,  209,  209,
      209,  209, 1361, 1367, 1362,  209,  209,  824, 1345, 1330,
      209,  209,  209, 1372,  209,  209, 1374,  825, 1417,  209,
     1363,  826,  209,  823,  209,  827,  209,  209,  209,  209,
     1367,  209, 1417,  209,  824, 1345,  209, 1417,  209, 1417,
     1372,  209,  209, 1374,  825, 1359, 1359, 1417,  826,  209,

     1375, 1379,  827,  209,  209,  209,  209, 1382,  209,  828,
      209, 1417, 1417,  209,  209,  209,  209,  209,  209,  209,
      932,  209, 1383,  933,  209, 1386,  209, 1375, 1379,  209,
      209, 1417,  209, 1388, 1382,  209,  828,  209, 1373,  209,
     1417,  209,  209,  209,  209,  209,  209,  932,  209, 1383,
      933,  209, 1386,  209,  209,  934,  209,  209,  209, 1389,
     1388,  209,  209, 1392,  209, 1373,  209,  209, 1394, 1417,
     1417, 1395,  209, 1398,  935, 1366, 1359,  209, 1417,  936,
     1400,  209,  934, 1402,  209,  209, 1389, 1404,  209,  937,
     1392,  209,  209,  209,  209, 1394,  209,  209, 1395, 1417,

     1398,  935,  209,  209,  209,  938, 1417, 1400, 1406, 1408,
     1402, 1417,  209,  209, 1404,  209,  937,  939, 1378,  209,
      209,  940,  209,  209,  209,  209,  209,  209,  941,  209,
      209,  209,  938,  209, 1410, 1406, 1408, 1417,  209,  209,
      209,  209,  209, 1417,  939, 1378,  942,  209,  940,  209,
      209,  209,  209,  209,  209,  941,  209,  209,  209, 1417,
      209, 1410, 1417, 1417, 1417,  209,  209,  209,  209, 1417,
     1417,  943,  209,  942,  209,  209,  209,  209,  209,  209,
     1417, 1417,  209,  209,  209,  209, 1417,  209, 1417, 1417,
     1417,  209,  209,  209,  209,  209,  944,  209,  943,  209,

      209,  946,  209,  209,  209,  947,  209,  209, 1417,  209,
      209,  209,  209, 1417,  209, 1417, 1417, 1417,  209,  209,
      209,  209,  209,  944,  209,  209,  209,  209,  946,  209,
      209,  209,  947,  945,  209,  209,  209,  209,  209,  948,
     1417, 1417, 1417, 1417, 1417,  209,  209,  209,  209, 1417,
     1417,  209,  209,  209,  209,  209,  209,  209,  209, 1417,
      945,  209,  209,  209,  209, 1417,  948, 1417,  209,  949,
      209,  209,  209,  209,  209,  951, 1417, 1417,  209,  209,
      209,  209,  209,  209, 1417,  209, 1417, 1417,  209,  209,
     1417,  209, 1417, 1417,  950,  209,  949,  209,  209,  209,

     1417,  209,  951, 1417,  952, 1417,  209,  209,  209, 1417,
      209, 1417, 1417, 1417,  209,  953,  209, 1417,  209,  209,
     1417,  950,  209,  209,  209, 1417,  209, 1417,  209,  209,
     1417,  952, 1417,  209,  954,  209, 1417,  209,  209,  209,
     1417,  209,  953,  209, 1417,  209,  209, 1417, 1417,  209,
      209,  209, 1417,  209, 1417,  209,  209, 1417, 1417, 1417,
      209,  954, 1417, 1417,  209,  209,  209,  955, 1417,  209,
      209,  209,  956,  209,  209,  209, 1417,  209,  209,  209,
      209, 1417,  209,  209,  957, 1417, 1417,  209, 1417, 1417,
     1417, 1417, 1417, 1417,  955, 1417,  209, 1417,  209,  956,

      209,  209,  209, 1417,  209,  209,  209, 1417, 1417,  209,
      209,  957, 1417,  209,  209,  209,  959, 1417,  209, 1417,
      209,  958,  962, 1417,  209,  209,  209,  209,  209,  209,
      960,  209, 1417, 1417,  209, 1417,  209, 1417,  209,  209,
      209, 1417,  209,  959, 1417,  209, 1417,  209,  958,  962,
     1417,  209,  209,  209,  209,  209,  209,  960,  209,  961,
      963,  209,  209,  209, 1417,  209,  209,  209,  209,  209,
      209,  209,  209, 1417, 1417,  209,  209, 1417, 1417, 1417,
      209,  209, 1417, 1417, 1417, 1417,  961,  963, 1417,  209,
     1417, 1417, 1417, 1417,  209,  209,  209,  209,  209,  209,

     1417, 1417,  209,  209,  209, 1417,  209,  209,  209, 1417,
      209,  209,  209, 1417,  964, 1417,  209,  209, 1417, 1417,
     1417, 1417,  209,  209, 1417,  209, 1417,  965, 1417, 1417,
      209,  209, 1417,  209, 1417,  209, 1417,  209,  209,  209,
     1417,  964, 1417,  209,  209, 1417,  209, 1417,  209,  209,
      209, 1417,  209,  209,  965,  966, 1417,  209,  209,  209,
     1417,  209,  209, 1417, 1417, 1417,  209,  967, 1417, 1417,
     1417,  209, 1417,  209, 1417,  209, 1417, 1417,  968,  969,
      209, 1417,  966, 1417, 1417,  209,  209, 1417,  209,  209,
      209,  209,  209,  209,  967, 1417,  209,  209,  209, 1417,

      970,  209,  209, 1417,  209,  968,  969, 1417, 1417, 1417,
      209, 1417, 1417, 1417, 1417, 1417,  209,  209,  209,  209,
      209, 1417,  209,  209,  209, 1417,  209,  970,  209,  209,
      209,  209,  209, 1417,  209, 1417, 1417,  209, 1417, 1417,
      209, 1417,  209, 1417,  209,  971, 1417,  209,  209,  209,
      209, 1417,  973,  209,  972, 1417,  209,  209,  209,  209,
      209,  209,  209, 1417,  209, 1417,  209,  209,  209,  209,
      209,  209,  971, 1417,  209,  209,  209,  209,  209,  973,
      209,  972, 1417,  209,  974,  209, 1417,  209,  209,  209,
      209,  209,  209,  209, 1417,  209, 1417,  209,  209, 1417,

      209,  209,  209,  209,  209,  209,  209,  209,  209, 1417,
      209,  974,  209,  975,  209,  209,  976,  209, 1417,  209,
      209,  209,  209, 1417, 1417,  209,  209,  209, 1417,  209,
     1417,  209, 1417,  209, 1417,  209, 1417,  209, 1417,  209,
      975,  209, 1417,  976,  209, 1417,  209,  209,  209,  209,
      209,  209,  209,  209,  978,  209,  209,  977,  209,  209,
     1417, 1417,  209, 1417,  209,  209, 1417, 1417,  979, 1417,
     1417,  209, 1417,  209,  209,  209, 1417,  209,  209,  209,
     1417,  978,  209,  209,  977,  209,  209, 1417, 1417,  209,
     1417,  209,  209, 1417, 1417,  979,  209, 1417,  209, 1417,

     1417,  209,  209,  209,  209, 1417,  209,  209,  980,  209,
      981,  209, 1417,  982,  209, 1417,  209, 1417, 1417,  209,
     1417, 1417, 1417,  209, 1417,  209, 1417, 1417, 1417, 1417,
      209,  209, 1417,  209,  209,  980,  209,  981,  209, 1417,
      982,  209, 1417,  209, 1417, 1417,  209,  983,  209,  985,
      209,  209,  209, 1417,  209,  209,  209, 1417,  984,  209,
      209,  209, 1417, 1417,  209, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417,  983,  209,  985,  209,  209,  209,
     1417,  209,  209,  209, 1417,  984,  209,  209,  209, 1417,
      209,  209,  209,  209,  209,  209,  209,  209, 1417, 1417,

      209,  209,  209, 1417, 1417,  209,  209, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417,  209, 1417,  209,
      209,  209,  209,  209,  209, 1417, 1417,  209,  209,  209,
     1417, 1417,  209,  209,  209, 1417,  209,  209,  987,  209,
      209,  209,  986, 1417,  209,  209,  209, 1417, 1417,  209,
      209, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417,  209, 1417,  209,  209,  987,  209,  209,  209,  986,
      988,  209,  209,  209,  209,  209,  209,  209,  989,  209,
      209, 1417,  209,  992,  209,  209,  209,  209,  209,  209,
      209,  990,  991, 1417,  209,  209,  209,  988,  209,  209,

     1417,  209,  209, 1417, 1417,  989,  209,  209, 1417,  209,
      992,  209,  209,  209,  209,  209,  209,  209,  990,  991,
      209,  209,  209,  209,  994,  209,  209,  209,  209,  209,
      209, 1417,  209,  993,  209, 1417, 1417, 1417,  209,  209,
      209, 1417, 1417, 1417, 1417, 1417, 1417,  209,  209, 1417,
     1417,  994, 1417, 1417,  209,  209,  209,  209, 1417,  209,
      993,  209,  995, 1417,  209,  209,  209,  209,  209, 1417,
     1417, 1417,  996,  209,  209,  209,  209,  209, 1417, 1417,
     1417, 1417,  209,  209,  209, 1417,  997, 1417, 1417,  995,
     1417,  209,  209,  209, 1417,  209, 1417, 1417, 1417,  996,

      209,  209,  209,  209,  209, 1417,  209, 1417, 1417,  209,
      209,  209,  209,  997,  209,  998, 1417,  209,  209,  209,
      209,  209,  209, 1417,  209,  999,  209,  209, 1417,  209,
     1000, 1417, 1417,  209,  209, 1417,  209,  209, 1417,  209,
     1417,  209,  998, 1417,  209,  209,  209, 1417,  209,  209,
     1417,  209,  999,  209,  209,  209, 1001, 1000, 1417,  209,
      209,  209, 1417,  209,  209,  209,  209, 1417, 1417, 1417,
     1002, 1417, 1417,  209,  209,  209,  209, 1417,  209, 1417,
     1417, 1417,  209, 1001,  209, 1417,  209,  209, 1417, 1417,
     1417, 1417,  209,  209,  209, 1417, 1003, 1002, 1417, 1417,

      209,  209,  209,  209,  209,  209, 1417, 1417, 1004,  209,
      209,  209,  209,  209, 1417, 1417, 1417, 1417,  209,  209,
      209,  209,  209, 1003, 1417, 1417,  209,  209,  209,  209,
     1005,  209,  209, 1417, 1417, 1004,  209,  209, 1417,  209,
      209, 1417,  209, 1417, 1417,  209,  209,  209,  209,  209,
      209, 1417,  209,  209,  209,  209,  209, 1005,  209,  209,
      209, 1006,  209, 1417, 1417, 1007,  209, 1417,  209,  209,
      209, 1008,  209, 1417,  209,  209, 1417,  209,  209,  209,
     1417,  209,  209, 1417,  209,  209, 1417,  209, 1006,  209,
     1417, 1417, 1007,  209,  209,  209,  209,  209, 1008,  209,

      209,  209, 1417, 1011, 1009,  209,  209, 1417,  209,  209,
     1010,  209,  209, 1417,  209,  209,  209, 1417, 1012,  209,
      209,  209,  209,  209,  209, 1417, 1417,  209,  209, 1417,
     1011, 1009, 1417,  209, 1417,  209, 1417, 1010,  209,  209,
      209,  209,  209,  209,  209, 1012,  209,  209,  209,  209,
      209,  209,  209, 1014, 1013,  209,  209,  209,  209, 1417,
      209,  209, 1417,  209, 1417,  209,  209,  209,  209, 1417,
     1417,  209,  209,  209, 1417,  209, 1015,  209, 1417,  209,
     1014, 1013,  209,  209,  209,  209, 1417,  209,  209, 1417,
      209, 1417,  209,  209, 1017,  209, 1417,  209,  209,  209,

      209,  209, 1417, 1015,  209, 1417,  209,  209, 1417,  209,
      209, 1417, 1016, 1417,  209, 1417, 1018,  209, 1417,  209,
     1417, 1017, 1417, 1417,  209,  209,  209, 1417,  209, 1417,
     1417,  209,  209,  209,  209, 1417,  209,  209, 1417, 1016,
     1417,  209,  209, 1018,  209,  209, 1417, 1417, 1417,  209,
     1417, 1417,  209,  209,  209,  209,  209, 1417, 1417,  209,
     1417, 1019, 1417,  209, 1417,  209,  209, 1417,  209,  209,
      209, 1417,  209, 1417, 1417, 1020,  209, 1417, 1021,  209,
      209,  209,  209,  209,  209, 1417,  209,  209, 1019,  209,
     1417,  209,  209,  209,  209,  209,  209,  209, 1417,  209,

     1417, 1417, 1020, 1417, 1417, 1021, 1417,  209,  209, 1417,
      209,  209, 1417,  209,  209,  209,  209, 1022,  209, 1417,
      209,  209,  209,  209, 1023, 1417,  209, 1417, 1417,  209,
     1417,  209, 1417,  209,  209,  209, 1417,  209,  209, 1025,
     1024, 1417,  209,  209, 1022, 1417, 1417,  209, 1417,  209,
      209, 1023,  209, 1417, 1417, 1417,  209,  209,  209, 1417,
      209,  209,  209, 1417, 1417,  209, 1025, 1024, 1417, 1417,
      209, 1027, 1417,  209, 1417,  209,  209,  209,  209,  209,
      209, 1026, 1417,  209,  209,  209, 1028, 1417,  209,  209,
      209,  209, 1417, 1417, 1029,  209,  209, 1417, 1027, 1417,

      209,  209,  209,  209, 1417,  209,  209,  209, 1026, 1417,
      209,  209,  209, 1028, 1417,  209,  209,  209,  209, 1417,
      209, 1029,  209,  209, 1417,  209,  209, 1417,  209,  209,
      209, 1417, 1417,  209,  209,  209,  209, 1417,  209, 1417,
      209, 1030, 1417,  209, 1031,  209, 1417,  209,  209, 1417,
      209, 1417,  209,  209,  209, 1417,  209,  209, 1417, 1417,
     1417,  209,  209,  209,  209, 1417,  209,  209, 1030, 1417,
      209, 1031,  209, 1417, 1417,  209,  209,  209,  209, 1417,
      209,  209,  209, 1417,  209, 1032,  209, 1417, 1417,  209,
      209,  209, 1417,  209,  209, 1417, 1417,  209, 1417, 1417,

     1417, 1417, 1417,  209, 1417,  209, 1417,  209,  209,  209,
      209,  209, 1032,  209, 1417,  209,  209,  209, 1417, 1417,
      209,  209,  209, 1417,  209, 1417,  209, 1417,  209,  209,
     1417, 1417, 1417,  209,  209,  209, 1110,  209,  209, 1417,
     1417, 1417,  209, 1417,  209, 1417, 1417,  209, 1111,  209,
     1417,  209, 1417,  209,  209,  209,  209, 1417, 1417, 1417,
      209,  209, 1417, 1110,  209,  209,  209, 1417, 1112, 1113,
      209,  209, 1417,  209,  209, 1111,  209, 1417,  209,  209,
     1417,  209, 1417, 1417,  209, 1417,  209, 1417, 1114,  209,
     1417,  209,  209,  209,  209, 1112, 1113,  209,  209, 1417,

      209,  209, 1417,  209, 1417,  209,  209, 1417,  209, 1417,
     1417,  209, 1417,  209,  209, 1114,  209, 1417,  209,  209,
     1417,  209, 1116, 1417,  209,  209,  209, 1117,  209, 1115,
      209, 1417,  209, 1417,  209,  209,  209, 1417,  209, 1417,
      209,  209, 1119, 1417, 1417,  209,  209,  209,  209, 1116,
     1417,  209,  209,  209, 1117,  209, 1115,  209, 1118,  209,
      209,  209, 1417,  209,  209,  209, 1417,  209, 1417, 1119,
      209, 1417, 1417,  209,  209,  209,  209, 1417, 1120,  209,
      209, 1417,  209,  209,  209, 1118, 1417,  209,  209,  209,
     1121,  209,  209, 1417,  209, 1417,  209,  209, 1417, 1417,

     1417, 1417, 1122,  209,  209, 1120, 1417,  209,  209,  209,
      209,  209,  209, 1417,  209,  209,  209, 1121, 1123,  209,
     1417,  209,  209,  209,  209,  209,  209, 1124,  209, 1122,
      209,  209,  209, 1417, 1417,  209,  209,  209,  209,  209,
     1417,  209, 1417, 1417, 1417, 1123,  209, 1417, 1417,  209,
     1417,  209,  209,  209, 1124,  209, 1125,  209,  209,  209,
     1417, 1417, 1126,  209,  209,  209,  209,  209,  209,  209,
      209, 1417, 1417,  209,  209, 1129, 1127,  209,  209,  209,
     1417, 1417,  209, 1125, 1128,  209,  209,  209,  209, 1126,
     1417, 1417,  209,  209,  209,  209,  209,  209,  209, 1417,

     1417,  209, 1129, 1127,  209,  209,  209, 1417,  209,  209,
     1417, 1128, 1130,  209,  209,  209,  209,  209, 1417,  209,
      209,  209,  209, 1417, 1131,  209,  209,  209, 1133, 1417,
      209, 1417,  209,  209, 1417,  209, 1417,  209,  209, 1130,
      209, 1417, 1417,  209,  209, 1417,  209,  209,  209,  209,
      209, 1131, 1417,  209,  209, 1133,  209,  209, 1134,  209,
      209, 1132,  209, 1417,  209,  209,  209,  209,  209, 1417,
     1135,  209,  209,  209,  209,  209,  209,  209,  209, 1417,
      209,  209,  209,  209, 1417, 1134, 1136, 1137, 1132,  209,
      209,  209,  209,  209, 1417,  209, 1417, 1135,  209,  209,

     1417,  209,  209,  209,  209,  209,  209,  209,  209,  209,
     1417, 1138, 1417, 1136, 1137, 1417,  209,  209,  209,  209,
      209, 1417,  209, 1140, 1139,  209,  209, 1417, 1417,  209,
      209,  209,  209,  209, 1143,  209,  209, 1417, 1138, 1417,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
     1140, 1139,  209,  209,  209, 1417,  209,  209, 1417,  209,
     1417, 1143,  209,  209,  209, 1417,  209,  209,  209,  209,
      209,  209,  209,  209, 1417,  209,  209, 1417,  209,  209,
      209,  209, 1417,  209, 1141, 1144,  209, 1417, 1417,  209,
      209,  209, 1417,  209, 1142, 1417, 1417,  209, 1417,  209,

     1417, 1417,  209,  209,  209,  209,  209,  209, 1417,  209,
      209, 1141, 1144,  209,  209, 1145,  209,  209, 1417, 1417,
      209, 1142,  209,  209, 1417,  209,  209,  209, 1417,  209,
      209,  209,  209, 1417, 1417,  209,  209, 1417, 1417, 1417,
     1417,  209, 1145, 1417,  209, 1417,  209,  209, 1417,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1417,  209,
      209, 1146,  209, 1417, 1417,  209, 1417,  209, 1417,  209,
     1417,  209, 1417,  209,  209, 1417, 1417, 1417,  209,  209,
      209, 1417,  209,  209, 1417, 1148, 1417,  209, 1146,  209,
     1417,  209,  209,  209,  209,  209,  209, 1417,  209, 1147,

     1417,  209, 1417,  209, 1417,  209,  209,  209, 1417,  209,
     1417, 1417, 1148, 1417, 1149, 1417,  209, 1150,  209,  209,
      209, 1151,  209,  209, 1417,  209, 1147, 1417,  209, 1417,
      209, 1417,  209,  209,  209,  209,  209,  209, 1417, 1417,
     1417, 1149,  209, 1417, 1150, 1417,  209,  209, 1151,  209,
      209,  209, 1417, 1417, 1417,  209,  209, 1152, 1417, 1417,
      209,  209,  209, 1417,  209,  209, 1417,  209,  209,  209,
      209, 1417,  209, 1417,  209,  209,  209,  209,  209,  209,
      209,  209, 1417,  209, 1152, 1417,  209, 1417,  209, 1417,
     1417,  209,  209, 1417,  209,  209, 1417,  209, 1417,  209,

     1417, 1153,  209, 1417,  209,  209,  209,  209,  209, 1417,
      209,  209,  209,  209, 1417, 1417, 1417, 1154,  209, 1417,
     1417,  209,  209, 1155, 1417, 1417, 1417, 1417, 1153, 1417,
     1417, 1417,  209, 1417,  209, 1417,  209,  209,  209,  209,
     1417,  209, 1417, 1417, 1154,  209,  209,  209,  209,  209,
     1155, 1417,  209, 1156, 1157, 1417, 1417,  209,  209, 1417,
      209,  209, 1417,  209, 1417,  209, 1417, 1417,  209, 1417,
      209, 1417,  209,  209,  209, 1417, 1417, 1417, 1417,  209,
     1156, 1157, 1417, 1417,  209,  209,  209,  209,  209,  209,
     1417,  209,  209,  209, 1158, 1417,  209,  209,  209, 1159,

      209,  209,  209,  209, 1417, 1417, 1417,  209, 1417,  209,
     1417, 1417,  209,  209, 1417,  209,  209, 1417,  209,  209,
      209, 1158, 1417,  209, 1417,  209, 1159,  209,  209,  209,
      209, 1417, 1417,  209,  209, 1417,  209,  209, 1417,  209,
     1161,  209, 1417,  209, 1417,  209,  209, 1417, 1160, 1417,
     1417,  209, 1417,  209, 1417, 1417, 1417, 1417, 1417, 1417,
      209,  209, 1417, 1417,  209, 1417, 1417, 1161,  209,  209,
      209, 1417,  209,  209, 1417, 1160, 1417,  209,  209,  209,
      209,  209, 1162, 1417, 1417, 1417, 1417,  209,  209,  209,
     1163,  209, 1417, 1417, 1417,  209,  209,  209, 1417, 1417,

      209,  209, 1417, 1164,  209, 1417,  209,  209,  209, 1162,
     1417,  209, 1417,  209,  209,  209,  209, 1163,  209, 1165,
     1417, 1417,  209,  209,  209,  209, 1417,  209,  209, 1417,
     1164,  209, 1417, 1417,  209,  209, 1417,  209,  209, 1417,
      209, 1166,  209, 1417, 1417,  209, 1165,  209, 1417,  209,
      209, 1417,  209, 1167,  209,  209, 1417,  209,  209,  209,
     1417,  209,  209,  209,  209,  209, 1417,  209, 1166,  209,
     1168,  209,  209, 1417,  209,  209,  209,  209, 1417,  209,
     1167,  209,  209,  209,  209,  209,  209, 1170,  209,  209,
      209,  209,  209,  209,  209,  209,  209, 1168,  209, 1417,

     1169, 1417,  209,  209,  209,  209,  209, 1417,  209, 1417,
      209, 1172,  209, 1417, 1170,  209,  209, 1417,  209,  209,
      209, 1417,  209, 1171,  209,  209, 1417, 1169,  209,  209,
      209, 1417,  209,  209,  209,  209, 1417, 1417, 1172,  209,
     1417,  209,  209,  209,  209, 1417,  209, 1417, 1173,  209,
     1171,  209,  209,  209, 1417,  209,  209,  209, 1417,  209,
      209,  209,  209, 1174,  209,  209,  209,  209,  209,  209,
      209,  209,  209, 1175, 1417, 1173,  209,  209, 1417, 1417,
      209, 1417, 1417, 1417,  209, 1417,  209, 1417, 1417, 1417,
     1174,  209,  209, 1417,  209, 1176,  209, 1417, 1177,  209,

     1175, 1417, 1417,  209,  209, 1178,  209, 1417,  209,  209,
      209,  209,  209,  209,  209,  209,  209, 1417,  209,  209,
     1417,  209, 1176, 1417,  209, 1177, 1417, 1417, 1417, 1417,
      209, 1417, 1178,  209, 1417,  209,  209,  209,  209,  209,
      209,  209,  209,  209, 1417,  209,  209, 1417,  209, 1179,
     1417,  209, 1417,  209, 1181, 1417, 1180,  209,  209,  209,
     1417,  209,  209,  209,  209,  209,  209,  209, 1417,  209,
     1182, 1417,  209, 1417,  209,  209, 1179,  209, 1417, 1417,
      209, 1181,  209, 1180,  209,  209,  209, 1183,  209,  209,
      209,  209,  209,  209,  209, 1184,  209, 1182,  209,  209,

      209,  209,  209, 1417,  209,  209,  209, 1417,  209,  209,
      209, 1417, 1417,  209, 1183, 1417, 1417,  209,  209,  209,
     1417, 1417, 1184, 1417,  209,  209, 1417,  209, 1417,  209,
     1417, 1417,  209,  209, 1417,  209,  209,  209,  209, 1417,
      209, 1417, 1417,  209,  209,  209,  209, 1417,  209, 1233,
      209,  209, 1234,  209, 1235, 1417,  209,  209,  209,  209,
     1417, 1417,  209,  209,  209,  209, 1417, 1417,  209,  209,
      209, 1417,  209, 1417,  209,  209, 1233,  209,  209, 1234,
      209, 1235, 1417, 1417,  209,  209,  209, 1417,  209,  209,
      209,  209, 1236, 1417, 1417,  209,  209,  209, 1417,  209,

     1417,  209,  209, 1417,  209,  209,  209, 1417, 1417, 1417,
     1417,  209, 1417, 1417, 1417,  209,  209,  209,  209, 1236,
     1237, 1417, 1238, 1417,  209,  209,  209, 1417, 1417,  209,
      209,  209,  209,  209, 1417, 1417,  209, 1417,  209, 1417,
      209, 1417,  209,  209, 1417,  209,  209, 1237,  209, 1238,
      209, 1239,  209,  209, 1417, 1240,  209,  209, 1417,  209,
      209, 1417, 1417,  209,  209, 1417,  209,  209, 1417,  209,
     1417,  209, 1241,  209, 1417,  209,  209,  209, 1239, 1417,
     1417, 1417, 1240,  209, 1417, 1417, 1417,  209,  209, 1417,
      209,  209, 1417,  209, 1242,  209,  209, 1417,  209, 1241,

      209,  209,  209,  209,  209, 1417,  209, 1417, 1417,  209,
     1417, 1417, 1417, 1417,  209,  209, 1417,  209,  209, 1417,
      209, 1242,  209,  209, 1417,  209, 1243,  209,  209,  209,
      209,  209,  209,  209,  209, 1417,  209, 1417, 1417, 1244,
     1417,  209, 1417, 1417,  209,  209, 1417,  209,  209, 1245,
      209, 1417,  209, 1243, 1417,  209, 1417,  209, 1246,  209,
      209,  209, 1417, 1417, 1417, 1417, 1244,  209, 1417,  209,
     1417,  209, 1417, 1417,  209,  209, 1245,  209, 1417,  209,
     1417, 1247,  209,  209, 1417, 1246, 1417,  209,  209, 1417,
      209, 1417,  209,  209,  209, 1417,  209,  209, 1248, 1417,

     1417,  209,  209, 1417, 1417, 1417,  209, 1417, 1247,  209,
      209,  209, 1417, 1417, 1417,  209,  209,  209, 1249,  209,
      209,  209, 1417, 1417,  209, 1248, 1417, 1417,  209,  209,
      209, 1417,  209, 1417,  209,  209,  209, 1417,  209,  209,
      209, 1417, 1250,  209,  209, 1249, 1417, 1417,  209, 1417,
     1417,  209, 1417,  209, 1417,  209, 1417,  209,  209,  209,
     1417,  209,  209,  209, 1417, 1417,  209,  209, 1417, 1250,
      209,  209,  209, 1417,  209, 1417,  209,  209,  209, 1417,
      209,  209,  209, 1417, 1417,  209,  209, 1417, 1417, 1417,
      209, 1417, 1251,  209, 1417,  209,  209,  209, 1417,  209,

      209,  209,  209,  209,  209,  209,  209, 1417,  209,  209,
      209, 1417,  209,  209, 1417, 1417,  209, 1417, 1417, 1251,
      209, 1417,  209,  209, 1417, 1417,  209,  209,  209,  209,
     1252, 1417,  209,  209,  209,  209,  209,  209, 1417,  209,
      209,  209, 1253,  209,  209, 1417,  209, 1417, 1254, 1417,
     1417, 1417, 1417,  209,  209,  209,  209, 1252, 1417, 1417,
      209,  209,  209,  209,  209, 1417,  209,  209,  209, 1253,
      209,  209, 1417,  209,  209, 1254,  209, 1417,  209, 1417,
      209,  209,  209,  209, 1417, 1417, 1417,  209,  209, 1417,
      209,  209,  209,  209, 1417, 1417,  209,  209,  209, 1417,

      209,  209,  209,  209,  209,  209, 1417,  209, 1417,  209,
      209, 1417,  209, 1417,  209,  209, 1417,  209,  209,  209,
      209, 1417,  209,  209,  209,  209,  209,  209, 1417,  209,
     1417,  209,  209, 1417,  209, 1255, 1256,  209, 1417,  209,
      209,  209,  209, 1417, 1257,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209, 1417,  209, 1417,  209,  209,
      209,  209, 1255, 1256, 1417, 1417, 1417,  209,  209,  209,
      209, 1257,  209,  209, 1417,  209,  209,  209, 1417,  209,
     1417,  209,  209,  209,  209,  209,  209,  209, 1417, 1417,
     1417, 1258,  209, 1417, 1417,  209,  209,  209,  209,  209,

      209, 1417, 1417,  209, 1417,  209, 1417, 1417, 1417,  209,
      209,  209, 1417,  209, 1259, 1417,  209, 1260, 1258,  209,
     1417,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209, 1417,  209, 1417,  209,  209, 1417,  209, 1417, 1417,
      209, 1259, 1417,  209, 1260, 1417, 1417, 1417,  209,  209,
     1417,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209, 1417,  209,  209, 1261,  209,  209, 1417,
      209, 1417, 1262, 1417, 1417, 1417, 1417, 1417,  209,  209,
      209,  209, 1417, 1417, 1263,  209,  209,  209,  209, 1417,
      209,  209,  209, 1261, 1264,  209, 1417,  209,  209, 1262,

      209, 1417,  209, 1417,  209,  209,  209,  209, 1417, 1417,
     1417, 1263,  209, 1417,  209,  209,  209,  209, 1417, 1417,
      209, 1264, 1265, 1417, 1417,  209,  209,  209, 1266,  209,
      209,  209, 1417,  209,  209, 1417,  209, 1417, 1417,  209,
      209,  209, 1267,  209,  209, 1417, 1417,  209,  209, 1265,
      209, 1417, 1417,  209,  209, 1266, 1417,  209,  209, 1417,
      209,  209, 1417,  209,  209, 1268,  209,  209,  209, 1267,
      209,  209,  209, 1269,  209,  209, 1417,  209,  209,  209,
     1417,  209, 1417, 1417,  209,  209, 1417,  209, 1417, 1417,
     1417,  209, 1268,  209, 1417,  209,  209,  209, 1270,  209,

     1269,  209,  209,  209,  209,  209,  209, 1417,  209,  209,
     1271,  209,  209, 1417,  209, 1417, 1417,  209, 1417, 1417,
     1417, 1417,  209,  209, 1417, 1270,  209, 1417,  209,  209,
      209,  209, 1417,  209, 1272,  209,  209, 1271,  209,  209,
     1417,  209, 1417, 1417,  209,  209, 1305,  209, 1417,  209,
      209, 1417,  209,  209, 1417,  209,  209,  209, 1273, 1274,
      209, 1272, 1417, 1417, 1417,  209,  209, 1417,  209,  209,
      209,  209,  209, 1305,  209,  209,  209,  209, 1417,  209,
      209,  209, 1417,  209,  209, 1273, 1274, 1417, 1417, 1417,
     1417, 1417,  209,  209,  209,  209,  209,  209,  209,  209,

     1275, 1417,  209,  209,  209, 1276, 1417,  209,  209, 1417,
      209, 1417,  209,  209, 1417,  209,  209,  209,  209,  209,
      209,  209,  209,  209, 1417,  209,  209, 1275,  209, 1417,
     1417,  209, 1276, 1417,  209, 1417,  209,  209, 1417,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1417,  209,
      209, 1417,  209, 1417, 1417,  209, 1417,  209, 1417,  209,
      209,  209,  209,  209,  209, 1417, 1277,  209,  209,  209,
     1417, 1417,  209,  209, 1417, 1417, 1278, 1417,  209, 1417,
     1417, 1417, 1417,  209,  209, 1417,  209,  209,  209,  209,
      209,  209,  209, 1277,  209, 1304,  209,  209, 1417,  209,

     1417, 1417,  209, 1278,  209,  209,  209, 1417, 1417, 1417,
      209,  209, 1417, 1417, 1417,  209,  209,  209,  209,  209,
      209, 1417, 1304, 1417,  209,  209, 1417, 1417, 1417,  209,
      209,  209,  209,  209,  209, 1417, 1417, 1417,  209,  209,
     1417, 1417, 1417,  209,  209,  209,  209,  209,  209, 1417,
     1417, 1417,  209,  209, 1417, 1417, 1417,  209,  209,  209,
      209,  209,  209, 1417,  209, 1417,  209,  209,  209, 1417,
     1417,  209,  209,  209,  209,  209, 1417, 1417,  209, 1417,
      209, 1417,  209, 1417,  209,  209,  209,  209,  209,  209,
      209,  209, 1306, 1282,  209,  209,  209, 1417,  209,  209,

     1307,  209, 1417, 1417,  209,  209,  209, 1417, 1417,  209,
      209,  209, 1417,  209, 1417,  209, 1417,  209,  209, 1417,
      209, 1417,  209,  209, 1417,  209, 1308, 1307,  209, 1417,
      209,  209, 1417,  209, 1417, 1417,  209,  209,  209, 1417,
     1309, 1417, 1417, 1417,  209,  209,  209,  209,  209,  209,
     1417, 1417,  209, 1308,  209,  209,  209,  209, 1417, 1417,
     1417, 1417,  209,  209,  209,  209,  209, 1309, 1417, 1417,
      209,  209,  209,  209, 1310,  209,  209, 1417,  209,  209,
     1417,  209, 1417,  209,  209, 1417,  209, 1417, 1417,  209,
     1417,  209,  209,  209,  209, 1417,  209,  209, 1417,  209,

      209, 1310,  209,  209,  209,  209, 1417, 1311, 1417, 1417,
      209,  209,  209,  209, 1417, 1417, 1417, 1417,  209,  209,
      209,  209,  209,  209, 1417, 1417,  209,  209,  209,  209,
      209,  209, 1417, 1417, 1311, 1417,  209,  209,  209,  209,
     1417, 1417, 1417, 1417, 1417,  209,  209,  209, 1417,  209,
     1417, 1417,  209,  209, 1312,  209, 1417,  209, 1417,  209,
      209, 1417,  209,  209,  209,  209, 1417,  209, 1417, 1313,
     1417, 1417,  209,  209, 1417, 1417, 1417, 1417,  209,  209,
      209, 1312, 1417, 1417, 1417,  209,  209,  209, 1417,  209,
      209,  209, 1417, 1417,  209, 1417, 1313, 1417, 1417,  209,

     1417, 1314,  209,  209,  209,  209, 1316,  209,  209,  209,
      209, 1417,  209,  209,  209, 1417,  209,  209, 1417, 1417,
      209, 1417,  209, 1417, 1417, 1417,  209,  209, 1314,  209,
      209,  209,  209, 1316, 1417,  209,  209,  209,  209, 1417,
      209,  209,  209,  209,  209, 1417,  209,  209, 1317,  209,
     1315,  209, 1417,  209,  209,  209,  209, 1318,  209,  209,
     1417, 1417,  209, 1417, 1417,  209, 1417,  209, 1417,  209,
     1417,  209, 1417,  209,  209, 1317,  209, 1315,  209, 1417,
     1417,  209,  209,  209, 1318,  209,  209, 1417,  209,  209,
      209, 1417, 1417, 1417,  209,  209, 1417,  209, 1417,  209,

      209,  209, 1417,  209,  209, 1319, 1417, 1417,  209,  209,
     1417, 1417, 1417,  209, 1417,  209, 1417,  209, 1417, 1417,
     1320,  209,  209,  209,  209, 1417,  209,  209,  209, 1417,
     1417,  209, 1319,  209, 1417, 1417,  209,  209, 1417,  209,
     1417, 1417, 1417, 1417,  209, 1417, 1417, 1320,  209,  209,
      209,  209, 1417,  209, 1417,  209, 1417, 1417,  209, 1417,
      209, 1417, 1417,  209,  209,  209,  209,  209, 1417, 1417,
     1417,  209,  209, 1321, 1417, 1417,  209,  209,  209,  209,
      209,  209, 1417, 1417, 1417,  209,  209, 1417, 1417, 1417,
      209,  209,  209, 1417,  209,  209, 1417,  209, 1417,  209,

     1321, 1322,  209, 1417,  209, 1417,  209,  209,  209,  209,
     1323,  209, 1417,  209, 1417, 1417,  209, 1417,  209, 1417,
     1417,  209,  209,  209,  209,  209, 1417, 1417, 1322,  209,
      209, 1324, 1417, 1417,  209,  209,  209, 1323,  209, 1417,
     1417, 1325, 1417,  209, 1417,  209, 1417, 1417,  209, 1326,
      209,  209,  209,  209, 1417, 1417, 1417,  209, 1324,  209,
     1417,  209,  209,  209, 1417, 1417, 1417,  209, 1325,  209,
     1417,  209,  209,  209, 1417,  209, 1326, 1417,  209, 1417,
      209,  209, 1417,  209, 1417, 1417,  209, 1417,  209, 1417,
      209,  209, 1417,  209,  209, 1417,  209,  209,  209, 1417,

      209,  209,  209,  209, 1417,  209, 1343, 1417,  209, 1417,
      209,  209, 1417,  209, 1344,  209, 1417,  209,  209, 1417,
      209,  209, 1346, 1417,  209, 1417, 1417,  209,  209, 1417,
      209, 1417,  209, 1343, 1417, 1417, 1417, 1417,  209, 1417,
      209, 1344,  209,  209,  209,  209, 1417, 1417,  209, 1346,
      209,  209, 1417,  209,  209,  209, 1417, 1417,  209, 1347,
     1417, 1417,  209,  209,  209, 1417, 1417, 1417, 1417,  209,
      209, 1417,  209, 1417,  209, 1417, 1417,  209,  209, 1417,
      209,  209,  209,  209, 1417,  209, 1347, 1348,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1417,  209,

     1417,  209,  209, 1349,  209, 1417, 1417,  209,  209, 1417,
      209,  209, 1417,  209, 1348,  209, 1417, 1417,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1417,  209,
     1349,  209,  209, 1417,  209, 1417, 1417,  209,  209, 1417,
      209,  209, 1417,  209,  209,  209, 1351, 1350,  209, 1417,
      209,  209,  209,  209,  209, 1352,  209, 1417, 1417,  209,
      209, 1417,  209, 1417,  209, 1417, 1417,  209,  209, 1417,
      209,  209,  209, 1351, 1350,  209, 1417, 1417,  209,  209,
      209,  209, 1352,  209, 1417, 1417,  209,  209,  209,  209,
      209,  209, 1417, 1417,  209,  209, 1417, 1417, 1417,  209,

      209,  209,  209, 1417,  209,  209,  209, 1417,  209,  209,
     1417,  209, 1417,  209,  209,  209, 1417,  209,  209, 1417,
      209, 1353,  209, 1417, 1355, 1417, 1417,  209,  209,  209,
      209,  209,  209,  209, 1417,  209,  209,  209,  209,  209,
      209,  209, 1417,  209, 1354,  209, 1417,  209, 1353, 1417,
     1417, 1355, 1417,  209, 1417,  209, 1417,  209, 1356,  209,
      209, 1417,  209,  209,  209, 1417,  209,  209, 1417,  209,
      209, 1354,  209, 1365, 1417, 1366, 1359,  209, 1417,  209,
      209, 1417,  209,  209, 1417, 1356,  209,  209, 1368, 1417,
      209,  209,  209,  209, 1417, 1417,  209,  209,  209, 1417,

     1365,  209, 1417, 1417,  209,  209,  209,  209,  209, 1417,
      209,  209, 1417,  209,  209, 1368, 1417,  209,  209,  209,
      209,  209, 1417,  209,  209,  209,  209, 1417,  209, 1417,
      209, 1417,  209,  209,  209,  209,  209, 1417,  209, 1417,
      209, 1417, 1417, 1417,  209, 1417,  209,  209,  209,  209,
      209, 1417, 1417,  209, 1369, 1417, 1417,  209, 1417,  209,
      209, 1417, 1417,  209, 1417,  209, 1417,  209,  209, 1417,
      209, 1417,  209,  209,  209,  209,  209,  209, 1417, 1417,
      209, 1369, 1417, 1417, 1417, 1417,  209, 1417, 1417,  209,
     1417,  209,  209, 1417,  209,  209,  209,  209,  209,  209,

      209,  209,  209, 1417,  209,  209, 1417,  209, 1417,  209,
      209,  209, 1417,  209, 1417,  209,  209, 1417,  209, 1370,
     1417,  209, 1417,  209, 1417,  209, 1417,  209,  209,  209,
     1417,  209,  209, 1417, 1417,  209,  209,  209,  209,  209,
      209, 1417,  209, 1377, 1417,  209, 1370,  209,  209,  209,
     1417,  209, 1417,  209, 1417,  209,  209,  209,  209,  209,
     1417,  209,  209, 1380, 1417, 1417,  209,  209,  209,  209,
     1377, 1385,  209,  209,  209,  209,  209, 1417,  209,  209,
      209,  209,  209,  209,  209,  209,  209, 1391,  209,  209,
     1380,  209,  209, 1417,  209,  209,  209,  209, 1385,  209,

      209, 1417,  209, 1417, 1417, 1417,  209, 1417,  209, 1417,
      209, 1417,  209,  209, 1391,  209,  209, 1417,  209,  209,
      209, 1397, 1417, 1417,  209,  209,  209,  209, 1417,  209,
     1417, 1417, 1417, 1417,  209, 1417, 1417, 1417, 1417,  209,
      209, 1417,  209, 1417, 1417, 1417, 1417,  209, 1397, 1417,
     1417, 1417,  209, 1417,  209, 1417,  209, 1417, 1417, 1417,
     1417,  209, 1417, 1417, 1417, 1417,  209,   47,   47,   47,
       47,   47,   90, 1417, 1417,   90,   90,  193,  193,  193,
     1417,  193,  195, 1417,  195,  195,  195,  198, 1417,  198,
      198,  198,  209, 1417,  209,  209,  209,    7, 1417, 1417,

     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417
    } ;

static const flex_int16_t yy_chk[9476] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   16,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   19,   19,   22,   23,   22,   28,   31,   23,   24,
       32,   22,   28,   22,   23,   45,   24,   22,   22,  102,

       22,   22,  103,   24,   23, 1420,   24,   50,   50,   24,
       22,   23,   22,   28,   31,   23,   24,   32,   22,   28,
       22,   23,   45,   24,   22,   22,  102,   22,   22,  103,
       24,   23,   29,   24,   25, 1414,   24,   26,   25,   26,
       29,   57,   25,   33,   26,  106,   29,   33,   25,   26,
     1413,   25,   57,   33,   34,   44,   44, 1412,   34,   29,
     1411,   25,   34, 1409,   26,   25,   26,   29,   34,   25,
       33,   26,  106,   29,   33,   25,   26,   35,   25,   27,
       33,   34,   44,   44,   43,   34, 1407,   27,  107,   34,
       27,   35,   43,   27,   30,   34,   27,   35,   35,   27,

       30,   30,   30, 1405,   35,   37,   27,   30,   51,   51,
     1403,   43,   60,   60,   27,  107,   37,   27,   35,   43,
       27,   30,   37,   27,   35,   35,   27,   30,   30,   30,
       36,  104,   37,   39,   30,   88,   88,   39,   36,  104,
      108,   39,   36,   37,  111,   36,   36,   39, 1401,   37,
      196,  196,  105, 1196, 1196,  105, 1399,   36,  104, 1396,
       39, 1393,  112, 1390,   39,   36,  104,  108,   39,   36,
     1387,  111,   36,   36,   39,   40,   42,   40,   42,  105,
       40,   42,  105,   40,   69,   40,   69,   40,   40,  112,
       69,   69,   40,   40, 1384,  109,   69,  109, 1381,  114,

      115, 1376,   40,   42,   40,   42,  114,   40,   42,  118,
       40,   69,   40,   69,   40,   40,  122,   69,   69,   40,
       40,   41,  109,   69,  109,   41,  114,  115,   41,   41,
      121,  121,  119,  114,  123,   41,  118,  119,   41, 1329,
     1329, 1371, 1364,  122, 1357, 1342, 1327, 1303,   41, 1279,
     1232, 1185,   41, 1109, 1033,   41,   41,  121,  121,  119,
      931,  123,   41,  829,  119,   41,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   63,   63,  117,
       63,   63,   63,   63,   63,   63,   63,  699,   70,  117,

      574,  569,   70,  436,  302,  124,   70,   63,   63,   63,
      125,  126,   70,   63,   72,   63,  117,  128,   72,  129,
      130,   63,   70,   63,   72,   70,  117,   63,   63,   70,
       63,   63,  124,   70,   72,  132,  201,  125,  126,   70,
       63,   72,   63,  198,  128,   72,  129,  130,   63,   70,
       63,   72,  133,   93,   63,   63,   73,   63,   63,   90,
       73,   72,  132,   63,   64,   64,   73,   64,   64,   64,
       64,   64,   64,   64,   87,  134,   73,  135,   74,  133,
      110,  110,   74,   73,   64,   64,   64,   73,   74,   62,
      137,   64,   75,   73,  110,   64,   75,  138,   74,   61,

       75,   64,  134,   73,  135,   74,   75,  110,  110,   74,
       55,   64,   53,   52,   48,   74,   75,  137,   64,   75,
       46,  110,   64,   75,  138,   74,   79,   75,   64,  136,
       79,   21,  136,   75,   20,   83,   79,   83,   64,   83,
       64,   65,   83,   75,   14,   65,   79,   83,   65,   65,
       11,  140,  141,   79,  143,   65,  136,   79,   65,  136,
        7,   65,   83,   79,   83,   65,   83,   86,   65,   83,
        4,   86,   65,   79,   83,   65,   65,   86,  140,  141,
        3,  143,   65,    0,  144,   65,  145,   86,   65,  146,
        0,   80,   65,   66,   86,   80,  131,   66,   86,   80,

      149,   66,  131,  150,   86,   80,  147,   66,  147,  151,
       66,  144,    0,  145,   86,   80,  146,   66,   80,  152,
       66,  153,   80,  131,   66,    0,   80,  149,   66,  131,
      150,    0,   80,  147,   66,  147,  151,   66,    0,   84,
      155,    0,   80,   84,   66,   67,  152,   84,  153,   67,
      156,    0,   67,   84,   67,   67,  157,  154,   85,   67,
      154,   85,   85,   84,   67,   67,   84,  155,   85,    0,
       84,  159,   67,    0,   84,  160,   67,  156,   85,   67,
       84,   67,   67,  157,  154,   85,   67,  154,   85,   85,
       84,   67,   67,   68,  161,   85,  142,    0,  159,  162,

       68,   68,  160,  163,   68,   85,  142,   68,  165,  167,
       68,  142,  142,   68,    0,  116,  116,  116,  168,  116,
       68,  161,    0,  142,  116,    0,  162,   68,   68,  168,
      163,   68,    0,  142,   68,  165,  167,   68,  142,  142,
       68,   71,  116,  116,  116,  168,  116,   71,   71,   71,
      148,  116,  148,  120,   71,  120,  168,  164,  120,   71,
        0,  164,  169,  148,  120,  172,    0,    0,   71,  173,
      174,  120,    0,    0,   71,   71,   71,  148,  175,  148,
      120,   71,  120,    0,  164,  120,   71,   76,  164,  169,
      148,  120,  172,  127,   76,  127,  173,  174,  120,  127,

      166,   76,  170,  171,   76,  175,  127,   76,   76,    0,
      127,  170,  176,  166,   76,  177,    0,  171,  166,  170,
      127,   76,  127,    0,  178,  180,  127,  166,   76,  170,
      171,   76,    0,  127,   76,   76,   77,  127,  170,  176,
      166,   77,  177,   77,  171,  166,  170,  181,  179,   77,
       77,  178,  180,   77,  182,    0,   77,   77,    0,  179,
        0,  185,  183,   77,    0,    0,  189,    0,   77,    0,
       77,  190,    0,  187,  181,  179,   77,   77,    0,  187,
       77,  182,  183,   77,   77,   78,  179,  184,  185,  183,
      188,  186,   78,  189,  184,  186,   78,  184,  190,   78,

      187,  191,   78,  188,    0,   78,  187,  305,    0,  183,
        0,    0,   78,  307,  184,  308,    0,  188,  186,   78,
        0,  184,  186,   78,  184,  310,   78,  209,  191,   78,
      188,  209,   78,   81,  305,   81,  312,  209,   81,   81,
      307,   81,  308,   81,  313,   81,   81,  209,  210,  210,
       81,   81,  310,  210,  209,   81,    0,    0,  209,  210,
       81,    0,   81,  312,  209,   81,   81,    0,   81,  210,
       81,  313,   81,   81,  209,  210,  210,   81,   81,  315,
      210,  316,   81,   82,  211,  220,  210,   82,  211,  220,
       82,   82,  317,  318,  211,  220,  210,   82,  319,  211,

       82,  320,  322,  323,  211,  220,  315,   82,  316,    0,
       82,  211,  220,    0,   82,  211,  220,   82,   82,  317,
      318,  211,  220,    0,   82,  319,  211,   82,  320,  322,
      323,  211,  220,    0,   82,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  212,  324,  212,

      214,  325,  214,  326,  212,  212,  214,  214,    0,  212,
        0,  327,  214,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,    0,  212,  324,  212,  214,  325,  214,
      326,  212,  212,  214,  214,  215,  212,  213,  327,  214,
      213,    0,  328,    0,  215,  216,  215,  216,  213,    0,
      213,  215,  216,  216,  329,  213,  215,  216,  330,    0,
      213,  332,  215,    0,  213,    0,  217,  213,  217,  328,
      217,  215,  216,  215,  216,  213,  217,  213,  215,  216,
      216,  329,  213,  215,  216,  330,  217,  213,  332,    0,
      219,    0,  219,  217,  219,  217,    0,  217,  333,    0,

      219,  331,    0,  217,  334,  331,  321,    0,  321,    0,
      219,  335,  337,  217,  218,  218,  218,  219,  218,  219,
        0,  219,    0,  321,  218,  333,  221,  219,  331,  218,
      221,  334,  331,  321,  218,  321,  221,  219,  335,  337,
        0,  218,  218,  218,  338,  218,  221,  222,    0,  222,
      321,  218,  336,  221,  222,    0,  218,  221,  225,  222,
        0,  218,  225,  221,  223,  339,  340,  336,  225,  341,
      342,  338,  344,  221,  222,  223,  222,  223,  225,  336,
        0,  222,  223,  345,  346,  225,  222,  223,    0,  225,
        0,  223,  339,  340,  336,  225,  341,  342,  347,  344,

        0,    0,  223,  231,  223,  225,  348,  231,  226,  223,
      345,  346,  226,  231,  223,  224,  224,  224,  226,  224,
        0,  226,  224,  231,  224,  347,  349,  224,  226,  350,
      231,  351,  352,  348,  231,  226,  353,  227,  354,  226,
      231,  227,  224,  224,  224,  226,  224,  227,  226,  224,
      231,  224,  227,  349,  224,  226,  350,  227,  351,  352,
        0,  355,  356,  353,  227,  354,    0,  357,  227,    0,
      358,    0,    0,    0,  227,  359,    0,    0,    0,  227,
      360,    0,  361,  362,  227,  228,    0,  228,  355,  356,
      228,  363,  364,  229,  357,  229,  228,  358,  228,  229,

      229,  365,  359,  228,  230,  229,  230,  360,  228,  361,
      362,  230,  228,  230,  228,  366,  230,  228,  363,  364,
      229,  367,  229,  228,    0,  228,  229,  229,  365,  233,
      228,  230,  229,  230,  232,  228,  232,  233,  230,  233,
      230,  232,  366,  230,  233,    0,  232,  368,  367,  233,
      369,  234,  370,  372,    0,  373,  233,  368,  374,  375,
      234,  232,  234,  232,  233,  377,  233,  234,  232,  379,
      380,  233,  234,  232,  368,    0,  233,  369,  234,  370,
      372,  236,  373,  236,  368,  374,  375,  234,  236,  234,
        0,  381,  377,  236,  234,    0,  379,  380,  382,  234,

      235,  238,  235,  384,  385,  238,  235,  237,  236,  237,
      236,  238,  235,  235,  237,  236,  376,  235,  381,  237,
      236,  238,  235,    0,    0,  382,  376,  235,  238,  235,
      384,  385,  238,  235,  237,  386,  237,  387,  238,  235,
      235,  237,  388,  376,  235,  239,  237,  239,  238,  235,
      240,  239,  239,  376,  240,  242,  241,  239,  241,  242,
      240,  389,  386,  241,  387,  242,    0,    0,  241,  388,
      240,    0,  239,    0,  239,  242,  390,  240,  239,  239,
      392,  240,  242,  241,  239,  241,  242,  240,  389,  243,
      241,  394,  242,  243,  244,  241,  244,  240,  245,  243,

      245,  244,  242,  390,  244,  245,  244,  392,  395,  243,
      245,    0,  247,    0,  247,  391,  243,    0,  394,  247,
      243,  244,    0,  244,  247,  245,  243,  245,  244,    0,
      393,  244,  245,  244,  391,  395,  243,  245,  246,  247,
      246,  247,  391,  393,  248,  246,  247,  246,  248,  249,
      246,  247,  396,  249,  248,  397,  251,  393,  251,  249,
      249,  391,    0,  251,  248,  246,    0,  246,  251,  249,
      393,  248,  246,  398,  246,  248,  249,  246,    0,  396,
      249,  248,  397,  251,  252,  251,  249,  249,  252,  253,
      251,  248,    0,  253,  252,  251,  249,  250,    0,  253,

      398,    0,  399,    0,  252,  250,  400,  250,    0,  253,
      401,  252,  250,  250,  402,  252,  253,  250,  254,  254,
      253,  252,  254,  257,  250,  257,  253,  403,  254,  399,
      257,  252,  250,  400,  250,  257,  253,  401,  254,  250,
      250,  402,  404,    0,  250,  254,  254,    0,    0,  254,
      257,  406,  257,  407,  403,  254,  408,  257,  409,    0,
      410,  258,  257,  258,    0,  254,  255,  258,  258,  404,
      255,  269,  255,  258,  255,  269,  255,  411,  406,  412,
      407,  269,  414,  408,  415,  409,  255,  410,  258,    0,
      258,  269,    0,  255,  258,  258,    0,  255,  269,  255,

      258,  255,  269,  255,  411,    0,  412,  416,  269,  414,
        0,  415,  417,  255,  256,  418,  256,  259,  269,  259,
      420,  260,  421,  260,  259,  256,  422,  256,  260,  259,
      424,  421,  256,  260,  416,  425,    0,  256,    0,  417,
        0,  256,  418,  256,  259,    0,  259,  420,  260,  421,
      260,  259,  256,  422,  256,  260,  259,  424,  421,  256,
      260,  261,  425,  261,  256,  263,  427,  263,  261,  261,
      428,  429,  263,  261,    0,  430,    0,  263,  431,    0,
        0,    0,    0,  433,    0,    0,    0,    0,  261,  423,
      261,  423,  263,  427,  263,  261,  261,  428,  429,  263,

      261,  262,  430,  262,  263,  431,  264,  271,  262,  262,
      433,  271,  262,  262,  265,  271,  423,  264,  423,  264,
      265,  271,  265,    0,  264,  434,    0,  265,  262,  264,
      262,  271,  265,  264,  271,  262,  262,  570,  271,  262,
      262,  265,  271,  266,  264,  266,  264,  265,  271,  265,
      266,  264,  434,  267,  265,  266,  264,  571,  271,  265,
        0,  267,  432,  267,  570,  572,  432,  268,  267,  268,
      266,  573,  266,  267,  268,  268,    0,  266,  575,  268,
      267,    0,  266,    0,  571,    0,  576,  272,  267,  432,
      267,  272,  572,  432,  268,  267,  268,  272,  573,  270,

      267,  268,  268,  270,  577,  575,  268,  272,  273,  270,
      273,    0,  270,  576,  272,  273,    0,    0,  272,  270,
      273,    0,    0,    0,  272,    0,  270,  274,  578,    0,
      270,  577,  579,  580,  272,  273,  270,  273,  274,  270,
      274,  276,  273,  276,  275,  274,  270,  273,  276,  275,
      274,  275,  276,  276,  274,  578,  275,  582,  277,  579,
      580,  275,  277,    0,  277,  274,  585,  274,  276,  277,
      276,  275,  274,  586,  277,  276,  275,  274,  275,  276,
      276,  588,  590,  275,  582,  277,    0,    0,  275,  277,
      279,  277,    0,  585,  279,  280,  277,    0,  279,  280,

      586,  277,  278,  591,  279,  280,  587,    0,  588,  590,
      587,  278,    0,  278,  279,  280,    0,  279,  278,  278,
      281,  279,  280,  278,  281,  279,  280,    0,  281,  278,
      591,  279,  280,  587,  281,    0,  592,  587,  278,  282,
      278,  279,  280,  282,  281,  278,  278,  281,  593,  282,
      278,  281,  282,  594,  283,  281,    0,  595,  283,  282,
      597,  281,  283,  592,  598,  599,  282,    0,  283,  284,
      282,  281,  600,  284,    0,  593,  282,  284,  283,  282,
      594,  283,  601,  284,  595,  283,  282,  597,  602,  283,
        0,  598,  599,  284,  286,  283,  284,  286,  285,  600,

      284,  286,  285,    0,  284,  283,  285,  286,  285,  601,
      284,  603,  604,    0,  605,  602,  608,  286,  285,    0,
      284,  286,  609,  610,  286,  285,  611,  612,  286,  285,
      287,  287,  287,  285,  286,  285,  288,  287,  603,  604,
      288,  605,  287,  608,  286,  285,  288,    0,  613,  609,
      610,    0,  614,  611,  612,    0,  288,  287,  287,  287,
      293,  293,  289,  288,  287,  293,  289,  288,  616,  287,
      289,  293,  289,  288,  290,  613,    0,  617,  290,  614,
      618,  293,  289,  288,  290,  290,    0,  293,  293,  289,
      621,  622,  293,  289,  290,  616,  291,  289,  293,  289,

      624,  290,    0,  291,  617,  290,    0,  618,  293,  289,
      291,  290,  290,  291,    0,  294,  291,  621,  622,  294,
        0,  290,  626,  291,    0,  294,  295,  624,  295,  442,
      291,  442,  295,  295,  627,  294,  442,  291,  295,    0,
      291,  442,  294,  291,  292,  628,  294,  292,  629,  626,
      630,  292,  294,  295,  292,  295,  442,  292,  442,  295,
      295,  627,  294,  442,  631,  295,  296,  292,  442,  634,
      296,  292,  628,    0,  292,  629,  296,  630,  292,  296,
      443,  292,  443,    0,  292,  297,  296,  443,    0,  297,
      638,  631,  443,  296,  292,  297,  634,  296,    0,  640,

      298,    0,    0,  296,  298,  297,  296,  443,    0,  443,
      298,  641,  297,  296,  443,  298,  297,  638,    0,  443,
      298,  299,  297,  643,  438,  299,  640,  298,  438,  299,
      632,  298,  297,  645,  438,  299,  646,  298,  641,  644,
      644,  632,  298,  647,  438,  299,    0,  298,  299,    0,
      643,  438,  299,    0,    0,  438,  299,  632,    0,  649,
      645,  438,  299,  646,  650,  651,  644,  644,  632,  652,
      647,  438,  299,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  439,  440,  441,  649,  439,  440,  441,
        0,  650,  651,  439,  440,  441,  652,    0,  654,  655,

      657,  658,    0,  439,  440,  441,  444,  659,    0,  660,
      439,  440,  441,  662,  439,  440,  441,  444,  663,  444,
      439,  440,  441,  664,  444,  654,  655,  657,  658,  444,
      439,  440,  441,  444,  659,  445,  660,  445,  665,  446,
      662,    0,  445,  446,  444,  663,  444,  445,  447,  446,
      664,  444,  447,  448,  667,  668,  444,  448,  447,  446,
        0,  447,  445,  448,  445,  665,  446,  449,  447,  445,
      446,  449,    0,  448,  445,  447,  446,  449,  669,  447,
      448,  667,  668,    0,  448,  447,  446,  449,  447,  450,
      448,    0,  451,  450,  449,  447,  451,  452,  449,  450,

      448,  452,  451,  670,  449,  669,  453,  452,  453,  450,
      451,  673,  451,  453,  449,    0,  450,  452,  453,  451,
      450,    0,  674,  451,  452,    0,  450,  675,  452,  451,
      670,  676,  677,  453,  452,  453,  450,  451,  673,  451,
      453,  454,  456,  454,  452,  453,  456,  457,  454,  674,
      678,  457,  456,  454,  675,  456,    0,  457,  676,  677,
        0,  681,  456,  457,    0,    0,    0,  457,  454,  456,
      454,    0,    0,  456,  457,  454,    0,  678,  457,  456,
      454,  455,  456,  455,  457,    0,  682,  455,  681,  456,
      457,  458,  459,  455,  457,  458,  459,  684,  455,  458,

        0,  458,  459,  455,  685,  686,    0,  459,  455,  687,
      455,  458,  459,  682,  455,  688,  689,  460,  458,  459,
      455,  460,  458,  459,  684,  455,  458,  460,  458,  459,
      455,  685,  686,  461,  459,  461,  687,  460,  458,  459,
      461,    0,  688,  689,  460,  461,    0,    0,  460,    0,
      462,    0,  690,    0,  460,    0,  691,    0,  692,    0,
      461,  462,  461,  462,  460,    0,  694,  461,  462,  463,
      465,  463,  461,  462,  465,  696,  463,  462,  465,  690,
      464,  463,  464,  691,  465,  692,  464,  464,  462,    0,
      462,    0,  464,  694,  465,  462,  463,  465,  463,  698,

      462,  465,  696,  463,  832,  465,  834,  464,  463,  464,
      466,  465,  466,  464,  464,    0,  467,  466,  467,  464,
      468,  465,  466,  467,  468,  835,  698,  836,  467,    0,
      468,  832,  838,  834,  469,    0,  839,  466,  469,  466,
      468,    0,  469,  467,  466,  467,  840,  468,  469,  466,
      467,  468,  835,  841,  836,  467,  470,  468,  469,  838,
      470,  469,  471,  839,  471,  469,  470,  468,  471,  469,
      842,  470,  843,  840,  471,  469,  470,  844,    0,  845,
      841,  846,  472,  470,  471,  469,  472,  470,    0,  471,
      473,  471,  472,  470,  473,  471,  848,  842,  470,  843,

      473,  471,  472,  470,  844,  473,  845,  850,  846,  472,
      473,  471,  851,  472,  852,  474,  853,  473,  474,  472,
      475,  473,  474,  848,  475,  854,  855,  473,  474,  472,
      475,  475,  473,  856,  850,  858,    0,  473,  474,  851,
      475,  852,  474,  853,  476,  474,  477,  475,  476,  474,
      477,  475,  854,  855,  476,  474,  477,  475,  475,  479,
      856,  859,  858,  479,  476,  474,  477,  475,  478,  479,
      860,  476,  478,  477,  861,  476,  478,  477,    0,  479,
        0,  476,  478,  477,    0,    0,  479,  862,  859,  863,
      479,  476,  478,  477,  864,  478,  479,  860,  480,  478,

      480,  861,  865,  478,  480,  481,  479,  481,  866,  478,
      480,  482,  481,  482,  862,  867,  863,  481,  482,  478,
      480,  864,    0,  482,    0,  480,    0,  480,  870,  865,
      871,  480,  481,    0,  481,  866,  872,  480,  482,  481,
      482,    0,  867,  873,  481,  482,  483,  480,  483,  484,
      482,  484,  483,  483,  874,  870,  484,  871,  483,  877,
      486,  484,  485,  872,  486,    0,  485,  880,  486,  881,
      873,  883,  485,  483,  486,  483,  484,    0,  484,  483,
      483,  874,  485,  484,  486,  483,  877,  486,  484,  485,
      487,  486,  487,  485,  880,  486,  881,  487,  883,  485,

      886,  486,  487,  488,  488,  488,  489,  489,  489,  485,
      488,  486,    0,  489,  490,  488,  490,  487,  489,  487,
        0,  490,    0,    0,  487,    0,  490,  886,  889,  487,
      488,  488,  488,  489,  489,  489,  890,  488,    0,  491,
      489,  490,  488,  490,  882,  489,  891,  882,  490,  491,
      492,  491,  492,  490,  493,  889,  491,  492,  493,  492,
      493,  491,  492,  890,    0,  493,  491,    0,    0,  892,
      493,  882,    0,  891,  882,  893,  491,  492,  491,  492,
      894,  493,    0,  491,  492,  493,  492,  493,  491,  492,
      494,  495,  493,  897,  494,  495,  892,  493,    0,  496,

      494,  495,  893,  496,    0,  898,  495,  894,    0,  496,
      494,  495,  496,    0,  899,  900,    0,  494,  495,  496,
      897,  494,  495,    0,  901,  497,  496,  494,  495,  497,
      496,  497,  898,  495,  903,  497,  496,  494,  495,  496,
      498,  899,  900,  499,  498,  497,  496,  499,    0,  904,
      498,  901,  497,  499,    0,  500,  497,  906,  497,  500,
      498,  903,  497,  499,    0,  500,    0,  498,  907,  501,
      499,  498,  497,  501,  499,  500,  904,  498,  908,  501,
      499,  502,  500,  909,  906,  502,  500,  498,    0,  501,
      499,  502,  500,  503,    0,  907,  501,  503,  911,    0,

      501,  502,  500,  503,    0,  908,  501,  912,  502,  503,
      909,  913,  502,  503,    0,  504,  501,  504,  502,  505,
      503,  505,  504,    0,  503,  911,  505,  504,  502,    0,
      503,  505,    0,    0,  912,  915,  503,  507,  913,    0,
      503,  507,  504,  506,  504,  506,  505,  507,  505,  504,
      506,  506,    0,  505,  504,  506,  508,  507,  505,  511,
      508,  511,  915,  511,  507,  916,  508,    0,  507,  511,
      506,    0,  506,  917,  507,  918,  508,  506,  506,  511,
      509,  509,  506,  508,  507,  509,  511,  508,  511,  919,
      511,  509,  916,  508,  512,  513,  511,  513,  512,  513,

      917,  509,  918,  508,  512,  513,  511,  509,  509,  920,
        0,  922,  509,    0,  512,  513,  919,  923,  509,    0,
      924,  512,  513,    0,  513,  512,  513,  926,  509,  510,
      514,  512,  513,  510,  514,  927,  920,  510,  922,  510,
      514,  512,  513,  510,  923,    0,  514,  924,  515,    0,
      514,    0,  515,  510,  926,    0,  510,  514,  515,  928,
      510,  514,  927,  515,  510,    0,  510,  514,  515, 1034,
      510, 1035,  516,  514,  517,  515,  516,  514,  517,  515,
      510, 1036,  516,  518,  517,  515,  928,  518,  516, 1038,
      515,  518,  516,    0,  517,  515, 1034,  518, 1035,  516,

        0,  517,    0,  516, 1040,  517,    0,  518, 1036,  516,
      518,  517, 1041, 1042,  518,  516, 1038, 1043,  518,  516,
      519,  517,  519,  520,  518,  520,  521,  519,  521,  520,
      520, 1040,  519,  521,  518,  520,    0, 1044,  521, 1041,
     1042,  522, 1046,    0, 1043,  522,    0,  519, 1048,  519,
      520,  522,  520,  521,  519,  521,  520,  520, 1049,  519,
      521,  522,  520,  523, 1044,  521,  524,  523,  522, 1046,
      524, 1050,  522,  523, 1051, 1048,  524, 1052,  522,  524,
        0, 1053, 1055,  523, 1057, 1049,  524,    0,  522, 1061,
      523,    0,    0,  524,  523,    0,    0,  524, 1050,    0,

      523, 1051, 1063,  524, 1052,  526,  524,  526, 1053, 1055,
      523, 1057,  526,  524,  525, 1064, 1061,  526,  525,  528,
      528,  528,  525,  530, 1065,  530,  528, 1072,  525, 1063,
      530,  528,  526,  525,  526,  530,    0, 1073,  525,  526,
     1074,  525, 1064, 1077,  526,  525,  528,  528,  528,  525,
      530, 1065,  530,  528, 1072,  525,  529,  530,  528, 1079,
      525,  529,  530,  529, 1073,  525,  527, 1074,  529,    0,
     1077, 1081, 1083,  529,    0,  527, 1084,  527,  531,  527,
     1085, 1086,  527,  529, 1087,    0, 1079,  527,  529,  531,
      529,  531, 1089,  527,    0,  529,  531, 1090, 1081, 1083,

      529,  531,  527, 1084,  527,  531,  527, 1085, 1086,  527,
      534, 1087,  534,  532,  527,  532,  531,  534,  531, 1089,
      532,  532,  534,  531, 1090,  532, 1091,  533,  531, 1092,
     1094,  533, 1096,  533,  535,    0,  535,  534,  533,  534,
      532,  535,  532,  533,  534,    0,  535,  532,  532,  534,
        0, 1098,  532, 1091,  533,    0, 1092, 1094,  533, 1096,
      533,  535,  536,  535, 1099,  533,  536,  537,  535,    0,
      533,  537,  536,  535, 1100,  538,  539,  537, 1098,  538,
      539, 1101,  536, 1102,    0,  538,  539,  537,    0,  536,
     1107, 1099, 1108,  536,  537,  538,  539,    0,  537,  536,

        0, 1100,  538,  539,  537,    0,  538,  539, 1101,  536,
     1102,  540,  538,  539,  537,  540,  541, 1107, 1187, 1108,
      541,  540,  538,  539,  540,  543,  541,  543, 1192,  542,
     1197,  540,  543,  542,  541, 1198,  541,  543,  540,  542,
      542, 1199,  540,  541, 1202, 1187,    0,  541,  540,  542,
        0,  540,  543,  541,  543, 1192,  542, 1197,  540,  543,
      542,  541, 1198,  541,  543, 1203,  542,  542, 1199,    0,
      544, 1202,  544,  545, 1207,  545,  542,  544,  544, 1209,
      545,  545,  544, 1210,  546,  545,  546,    0, 1213,    0,
      546,  546, 1203,    0,    0,    0,  546,  544, 1214,  544,

      545, 1207,  545, 1215,  544,  544, 1209,  545,  545,  544,
     1210,  546,  545,  546,  547, 1213,  547,  546,  546,    0,
      548,  547,  548,  546,    0, 1214,  547,  548, 1216,    0,
     1215, 1219,  548,  549, 1220,  549,    0,  549,    0, 1223,
      549,  547, 1225,  547,  550,  549,  550,  548,  547,  548,
     1226,  550,  550,  547,  548, 1216,  550,    0, 1219,  548,
      549, 1220,  549,  551,  549,  551, 1223,  549,    0, 1225,
      551,  550,  549,  550,    0,  551,  552, 1226,  550,  550,
      552,  553,  554,  550,  554,  553,  552, 1227,    0,  554,
      551,  553,  551, 1228,  554,  556,  552,  551, 1229,  556,

     1280,  553,  551,  552, 1281,  556, 1283,  552,  553,  554,
      555,  554,  553,  552, 1227,  556,  554,  555,  553,  555,
     1228,  554,  556,  552,  555, 1229,  556, 1280,  553,  555,
      558, 1281,  556, 1283,  558,  557, 1285,  555,    0,  557,
      558, 1288,  556,    0,  555,  557,  555,  557, 1289,    0,
      558,  555,    0,    0, 1292,  557,  555,  558, 1293, 1294,
      560,  558,  557, 1285,  560,  559,  557,  558, 1288,  559,
      560, 1298,  557,  559,  557, 1289,  561,  558,  561,  559,
      560, 1292,  557,  561,    0, 1293, 1294,  560,  561,  559,
     1299,  560,  559, 1282, 1282, 1300,  559,  560, 1298, 1302,

      559,    0,  562,  561,  562,  561,  559,  560,    0,  562,
      561,  562,  563, 1328,  562,  561,  559, 1299, 1330, 1306,
     1306,  563, 1300,  563,    0, 1332, 1302, 1335,  563,  562,
        0,  562, 1282,  563,    0,  564,  562,  564,  562,  563,
     1328,  562,  564, 1340,    0, 1330,  564,  564,  563,  565,
      563,  565, 1332, 1345, 1335,  563,  565,  565, 1306, 1282,
      563,  565,  564, 1358,  564,  566, 1360,  566,    0,  564,
     1340,  566,  566,  564,  564,  567,  565,  566,  565,  567,
     1345,  567,    0,  565,  565, 1306,  567,    0,  565,    0,
     1358,  567,  566, 1360,  566, 1359, 1359,    0,  566,  566,

     1363, 1367,  567,  568,  566,  568,  567, 1372,  567,  568,
      568,    0,    0,  567,  700,  568,  700,  701,  567,  701,
      700,  700, 1373,  701,  701, 1378,  700, 1363, 1367,  701,
      568,    0,  568, 1382, 1372,  702,  568,  568, 1359,  702,
        0,  700,  568,  700,  701,  702,  701,  700,  700, 1373,
      701,  701, 1378,  700,  703,  702,  701,  704,  703, 1383,
     1382,  704,  702, 1386,  703, 1359,  702,  704, 1388,    0,
        0, 1389,  702, 1392,  703, 1366, 1366,  704,    0,  704,
     1395,  703,  702, 1398,  704,  703, 1383, 1400,  704,  705,
     1386,  703,  706,  705,  704, 1388,  706,  705, 1389,    0,

     1392,  703,  706,  705,  704,  706,    0, 1395, 1402, 1404,
     1398,    0,  706,  705, 1400,  707,  705,  707, 1366,  706,
      705,  708,  707,  706,  705,  708,  709,  707,  709,  706,
      705,  708,  706,  709, 1406, 1402, 1404,    0,  709,  706,
      705,  708,  707,    0,  707, 1366,  710,  711,  708,  707,
      710,  711,  708,  709,  707,  709,  710,  711,  708,    0,
      709, 1406,    0,    0,    0,  709,  710,  711,  708,    0,
        0,  712,  713,  710,  711,  712,  713,  710,  711,  712,
        0,    0,  713,  710,  711,  712,    0,  714,    0,    0,
        0,  714,  713,  710,  711,  712,  715,  714,  712,  713,

      715,  717,  712,  713,  715,  717,  712,  714,    0,  713,
      715,  717,  712,    0,  714,    0,    0,    0,  714,  713,
      715,  717,  712,  715,  714,  716,  718,  715,  717,  716,
      718,  715,  717,  716,  714,  716,  718,  715,  717,  718,
        0,    0,    0,    0,    0,  716,  718,  715,  717,    0,
        0,  719,  716,  718,  720,  719,  716,  718,  720,    0,
      716,  719,  716,  718,  720,    0,  718,    0,  722,  720,
      722,  719,  716,  718,  720,  722,    0,    0,  719,  721,
      722,  720,  719,  721,    0,  720,    0,    0,  719,  721,
        0,  720,    0,    0,  721,  722,  720,  722,  719,  721,

        0,  720,  722,    0,  723,    0,  721,  722,  723,    0,
      721,    0,    0,    0,  723,  724,  721,    0,  724,  725,
        0,  721,  724,  725,  723,    0,  721,    0,  724,  725,
        0,  723,    0,  726,  725,  723,    0,  726,  724,  725,
        0,  723,  724,  726,    0,  724,  725,    0,    0,  724,
      725,  723,    0,  726,    0,  724,  725,    0,    0,    0,
      726,  725,    0,    0,  726,  724,  725,  727,    0,  727,
      726,  728,  728,  728,  727,  729,    0,  729,  728,  727,
      726,    0,  729,  728,  729,    0,    0,  729,    0,    0,
        0,    0,    0,    0,  727,    0,  727,    0,  728,  728,

      728,  727,  729,    0,  729,  728,  727,    0,    0,  729,
      728,  729,    0,  730,  729,  730,  731,    0,  734,    0,
      730,  730,  734,    0,  732,  730,  732,  731,  734,  731,
      732,  732,    0,    0,  731,    0,  732,    0,  734,  731,
      730,    0,  730,  731,    0,  734,    0,  730,  730,  734,
        0,  732,  730,  732,  731,  734,  731,  732,  732,  733,
      735,  731,  735,  732,    0,  734,  731,  735,  733,  736,
      733,  736,  735,    0,    0,  733,  736,    0,    0,    0,
      733,  736,    0,    0,    0,    0,  733,  735,    0,  735,
        0,    0,    0,    0,  735,  733,  736,  733,  736,  735,

        0,    0,  733,  736,  737,    0,  737,  733,  736,    0,
      738,  737,  738,    0,  738,    0,  737,  738,    0,    0,
        0,    0,  738,  739,    0,  739,    0,  739,    0,    0,
      739,  737,    0,  737,    0,  739,    0,  738,  737,  738,
        0,  738,    0,  737,  738,    0,  740,    0,  740,  738,
      739,    0,  739,  740,  739,  740,    0,  739,  740,  741,
        0,  741,  739,    0,    0,    0,  741,  741,    0,    0,
        0,  741,    0,  740,    0,  740,    0,    0,  742,  743,
      740,    0,  740,    0,    0,  740,  741,    0,  741,  742,
      743,  742,  743,  741,  741,    0,  742,  743,  741,    0,

      744,  742,  743,    0,  744,  742,  743,    0,    0,    0,
      744,    0,    0,    0,    0,    0,  742,  743,  742,  743,
      744,    0,  745,  742,  743,    0,  745,  744,  742,  743,
      746,  744,  745,    0,  746,    0,    0,  744,    0,    0,
      746,    0,  745,    0,  747,  746,    0,  744,  747,  745,
      746,    0,  748,  745,  747,    0,  748,  746,  749,  745,
      748,  746,  749,    0,  747,    0,  748,  746,  749,  745,
      750,  747,  746,    0,  750,  747,  748,  746,  749,  748,
      750,  747,    0,  748,  751,  749,    0,  748,  751,  749,
      750,  747,  751,  748,    0,  749,    0,  750,  751,    0,

      753,  750,  752,  748,  753,  749,  752,  750,  751,    0,
      753,  751,  752,  752,  754,  751,  754,  750,    0,  751,
      753,  754,  752,    0,    0,  751,  754,  753,    0,  752,
        0,  753,    0,  752,    0,  751,    0,  753,    0,  752,
      752,  754,    0,  754,  755,    0,  755,  753,  754,  752,
      756,  755,  756,  754,  757,  758,  755,  756,  757,  758,
        0,    0,  756,    0,  757,  758,    0,    0,  758,    0,
        0,  755,    0,  755,  757,  758,    0,  756,  755,  756,
        0,  757,  758,  755,  756,  757,  758,    0,    0,  756,
        0,  757,  758,    0,    0,  758,  759,    0,  759,    0,

        0,  757,  758,  759,  760,    0,  760,  761,  759,  761,
      760,  760,    0,  761,  761,    0,  760,    0,    0,  761,
        0,    0,    0,  759,    0,  759,    0,    0,    0,    0,
      759,  760,    0,  760,  761,  759,  761,  760,  760,    0,
      761,  761,    0,  760,    0,    0,  761,  762,  763,  764,
      763,  764,  762,    0,  762,  763,  764,    0,  762,  762,
      763,  764,    0,    0,  762,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  762,  763,  764,  763,  764,  762,
        0,  762,  763,  764,    0,  762,  762,  763,  764,    0,
      765,  762,  765,  766,  767,  766,  767,  765,    0,    0,

      766,  767,  765,    0,    0,  766,  767,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  765,    0,  765,
      766,  767,  766,  767,  765,    0,    0,  766,  767,  765,
        0,    0,  766,  767,  768,    0,  768,  769,  770,  769,
      770,  768,  768,    0,  769,  770,  768,    0,    0,  769,
      770,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  768,    0,  768,  769,  770,  769,  770,  768,  768,
      771,  769,  770,  768,  771,  772,  769,  770,  773,  772,
      771,    0,  773,  775,  774,  772,  774,  775,  773,  775,
      771,  774,  774,    0,  775,  772,  774,  771,  773,  775,

        0,  771,  772,    0,    0,  773,  772,  771,    0,  773,
      775,  774,  772,  774,  775,  773,  775,  771,  774,  774,
      777,  775,  772,  774,  777,  773,  775,  776,  778,  776,
      777,    0,  778,  776,  776,    0,    0,    0,  778,  776,
      777,    0,    0,    0,    0,    0,    0,  777,  778,    0,
        0,  777,    0,    0,  776,  778,  776,  777,    0,  778,
      776,  776,  779,    0,  779,  778,  776,  777,  779,    0,
        0,    0,  780,  781,  779,  778,  780,  781,    0,    0,
        0,    0,  780,  781,  779,    0,  781,    0,    0,  779,
        0,  779,  780,  781,    0,  779,    0,    0,    0,  780,

      781,  779,  782,  780,  781,    0,  782,    0,    0,  780,
      781,  779,  782,  781,  783,  782,    0,  784,  783,  780,
      781,  784,  782,    0,  783,  784,  785,  784,    0,  782,
      785,    0,    0,  782,  783,    0,  785,  784,    0,  782,
        0,  783,  782,    0,  784,  783,  785,    0,  784,  782,
        0,  783,  784,  785,  784,  786,  787,  785,    0,  786,
      787,  783,    0,  785,  784,  786,  787,    0,    0,    0,
      788,    0,    0,  785,  788,  786,  787,    0,  788,    0,
        0,    0,  786,  787,  788,    0,  786,  787,    0,    0,
        0,    0,  786,  787,  788,    0,  789,  788,    0,    0,

      789,  788,  786,  787,  789,  788,    0,    0,  790,  791,
      789,  788,  790,  791,    0,    0,    0,    0,  790,  791,
      789,  788,  792,  789,    0,    0,  792,  789,  790,  791,
      792,  789,  792,    0,    0,  790,  791,  789,    0,  790,
      791,    0,  792,    0,    0,  790,  791,  789,  793,  792,
      794,    0,  793,  792,  794,  790,  791,  792,  793,  792,
      794,  793,  796,    0,    0,  794,  796,    0,  793,  792,
      794,  795,  796,    0,  795,  793,    0,  794,  795,  793,
        0,  794,  796,    0,  795,  793,    0,  794,  793,  796,
        0,    0,  794,  796,  795,  793,  797,  794,  795,  796,

      797,  795,    0,  799,  797,  795,  797,    0,  798,  796,
      798,  795,  799,    0,  799,  798,  797,    0,  800,  799,
      798,  795,  800,  797,  799,    0,    0,  797,  800,    0,
      799,  797,    0,  797,    0,  798,    0,  798,  800,  799,
      801,  799,  798,  797,  801,  800,  799,  798,  802,  800,
      801,  799,  802,  804,  803,  800,  803,  804,  802,    0,
      801,  803,    0,  804,    0,  800,  803,  801,  802,    0,
        0,  801,  805,  804,    0,  802,  805,  801,    0,  802,
      804,  803,  805,  803,  804,  802,    0,  801,  803,    0,
      804,    0,  805,  803,  807,  802,    0,  806,  807,  805,

      804,  806,    0,  805,  807,    0,  808,  806,    0,  805,
      808,    0,  806,    0,  807,    0,  808,  806,    0,  805,
        0,  807,    0,    0,  806,  807,  808,    0,  806,    0,
        0,  807,  809,  808,  806,    0,  809,  808,    0,  806,
        0,  807,  809,  808,  806,  810,    0,    0,    0,  810,
        0,    0,  809,  808,  811,  810,  811,    0,    0,  809,
        0,  811,    0,  809,    0,  810,  811,    0,  812,  809,
      812,    0,  810,    0,    0,  812,  810,    0,  814,  809,
      812,  811,  810,  811,  813,    0,  813,  814,  811,  814,
        0,  813,  810,  811,  814,  812,  813,  812,    0,  814,

        0,    0,  812,    0,    0,  814,    0,  812,  815,    0,
      815,  813,    0,  813,  814,  815,  814,  815,  813,    0,
      815,  814,  816,  813,  816,    0,  814,    0,    0,  816,
        0,  817,    0,  817,  816,  815,    0,  815,  817,  818,
      817,    0,  815,  817,  815,    0,    0,  815,    0,  816,
      818,  816,  818,    0,    0,    0,  816,  818,  817,    0,
      817,  816,  818,    0,    0,  817,  818,  817,    0,    0,
      817,  820,    0,  819,    0,  819,  820,  818,  820,  818,
      819,  819,    0,  820,  818,  819,  821,    0,  820,  818,
      821,  822,    0,    0,  822,  822,  821,    0,  820,    0,

      819,  822,  819,  820,    0,  820,  821,  819,  819,    0,
      820,  822,  819,  821,    0,  820,  823,  821,  822,    0,
      823,  822,  822,  821,    0,  824,  823,    0,  822,  824,
      825,    0,    0,  821,  825,  824,  823,    0,  822,    0,
      825,  824,    0,  823,  826,  824,    0,  823,  826,    0,
      825,    0,  824,  823,  826,    0,  824,  825,    0,    0,
        0,  825,  824,  823,  826,    0,  827,  825,  824,    0,
      827,  826,  824,    0,    0,  826,  827,  825,  828,    0,
      828,  826,  932,    0,  932,  828,  827,    0,    0,  932,
      828,  826,    0,  827,  932,    0,    0,  827,    0,    0,

        0,    0,    0,  827,    0,  828,    0,  828,  933,  932,
      933,  932,  828,  827,    0,  933,  932,  828,    0,    0,
      933,  932,  934,    0,  934,    0,  935,    0,  935,  934,
        0,    0,    0,  935,  934,  933,  934,  933,  935,    0,
        0,    0,  933,    0,  936,    0,    0,  933,  936,  934,
        0,  934,    0,  935,  936,  935,  934,    0,    0,    0,
      935,  934,    0,  934,  936,  935,  937,    0,  937,  938,
      937,  936,    0,  938,  939,  936,  937,    0,  939,  938,
        0,  936,    0,    0,  939,    0,  937,    0,  940,  938,
        0,  936,  940,  937,  939,  937,  938,  937,  940,    0,

      938,  939,    0,  937,    0,  939,  938,    0,  940,    0,
        0,  939,    0,  937,  941,  940,  938,    0,  941,  940,
        0,  939,  942,    0,  941,  940,  942,  943,  943,  941,
      942,    0,  943,    0,  941,  940,  942,    0,  943,    0,
      945,  941,  945,    0,    0,  941,  942,  945,  943,  942,
        0,  941,  945,  942,  943,  943,  941,  942,  944,  943,
      944,  941,    0,  942,  944,  943,    0,  945,    0,  945,
      944,    0,    0,  942,  945,  943,  946,    0,  946,  945,
      944,    0,  947,  946,  947,  944,    0,  944,  946,  947,
      947,  944,  948,    0,  947,    0,  948,  944,    0,    0,

        0,    0,  948,  946,  949,  946,    0,  944,  949,  947,
      946,  947,  948,    0,  949,  946,  947,  947,  950,  948,
        0,  947,  950,  948,  949,  952,  951,  952,  950,  948,
      951,  949,  952,    0,    0,  949,  951,  952,  950,  948,
        0,  949,    0,    0,    0,  950,  951,    0,    0,  950,
        0,  949,  952,  951,  952,  950,  953,  951,  954,  952,
        0,    0,  954,  951,  952,  950,  955,  953,  954,  953,
      955,    0,    0,  951,  953,  957,  955,  957,  954,  953,
        0,    0,  957,  953,  956,  954,  955,  957,  956,  954,
        0,    0,  956,  955,  953,  954,  953,  955,  956,    0,

        0,  953,  957,  955,  957,  954,  953,    0,  956,  957,
        0,  956,  958,  955,  957,  956,  958,  959,    0,  956,
      960,  959,  958,    0,  960,  956,  962,  959,  962,    0,
      960,    0,  958,  962,    0,  956,    0,  959,  962,  958,
      960,    0,    0,  958,  959,    0,  961,  960,  959,  958,
      961,  960,    0,  962,  959,  962,  961,  960,  963,  958,
      962,  961,  963,    0,  959,  962,  961,  960,  963,    0,
      964,  965,  966,  961,  964,  965,  966,  961,  963,    0,
      964,  965,  966,  961,    0,  963,  965,  966,  961,  963,
      964,  965,  966,  961,    0,  963,    0,  964,  965,  966,

        0,  964,  965,  966,  967,  963,  967,  964,  965,  966,
        0,  967,    0,  965,  966,    0,  967,  964,  965,  966,
      968,    0,  970,  969,  968,  969,  970,    0,    0,  969,
      968,  967,  970,  967,  974,  969,  974,    0,  967,    0,
      968,  974,  970,  967,  971,  969,  974,  968,  971,  970,
      969,  968,  969,  970,  971,    0,  969,  968,    0,  970,
        0,  974,  969,  974,  971,    0,  972,  968,  974,  970,
      972,  971,  969,  974,    0,  971,  972,    0,  975,  973,
      975,  971,    0,  973,  972,  975,  972,    0,    0,  973,
      975,  971,    0,  972,  973,    0,    0,  972,    0,  973,

        0,    0,  977,  972,  977,  975,  973,  975,    0,  977,
      973,  972,  975,  972,  977,  976,  973,  975,    0,    0,
      976,  973,  976,  978,    0,  978,  973,  976,    0,  977,
      978,  977,  976,    0,    0,  978,  977,    0,    0,    0,
        0,  977,  976,    0,  980,    0,  980,  976,    0,  976,
      978,  980,  978,  979,  976,  979,  980,  978,    0,  976,
      979,  979,  978,    0,    0,  979,    0,  981,    0,  981,
        0,  980,    0,  980,  981,    0,    0,    0,  980,  981,
      979,    0,  979,  980,    0,  983,    0,  979,  979,  983,
        0,  982,  979,  982,  981,  983,  981,    0,  982,  982,

        0,  981,    0,  982,    0,  983,  981,  984,    0,  984,
        0,    0,  983,    0,  984,    0,  983,  984,  982,  984,
      982,  985,  983,  985,    0,  982,  982,    0,  985,    0,
      982,    0,  983,  985,  984,  986,  984,  986,    0,    0,
        0,  984,  986,    0,  984,    0,  984,  986,  985,  987,
      985,  987,    0,    0,    0,  985,  987,  988,    0,    0,
      985,  987,  986,    0,  986,  988,    0,  988,  989,  986,
      989,    0,  988,    0,  986,  989,  987,  988,  987,  990,
      989,  990,    0,  987,  988,    0,  990,    0,  987,    0,
        0,  990,  988,    0,  988,  989,    0,  989,    0,  988,

        0,  991,  989,    0,  988,  991,  990,  989,  990,    0,
      992,  991,  992,  990,    0,    0,    0,  992,  990,    0,
        0,  991,  992,  993,    0,    0,    0,    0,  991,    0,
        0,    0,  991,    0,  993,    0,  993,  992,  991,  992,
        0,  993,    0,    0,  992,  994,  993,  994,  991,  992,
      993,    0,  994,  994,  995,    0,    0,  994,  995,    0,
      995,  993,    0,  993,    0,  995,    0,    0,  993,    0,
      995,    0,  994,  993,  994,    0,    0,    0,    0,  994,
      994,  995,    0,    0,  994,  995,  996,  995,  996,  997,
        0,  997,  995,  996,  996,    0,  997,  995,  996,  999,

      998,  997,  998,  999,    0,    0,    0,  998,    0,  999,
        0,    0,  998,  996,    0,  996,  997,    0,  997,  999,
      996,  996,    0,  997,    0,  996,  999,  998,  997,  998,
      999,    0,    0, 1000,  998,    0,  999, 1000,    0,  998,
     1001, 1001,    0, 1000,    0, 1001,  999,    0, 1000,    0,
        0, 1001,    0, 1000,    0,    0,    0,    0,    0,    0,
     1000, 1001,    0,    0, 1000,    0,    0, 1001, 1001, 1002,
     1000,    0, 1001, 1002,    0, 1000,    0, 1003, 1001, 1002,
     1000, 1003, 1002,    0,    0,    0,    0, 1003, 1001, 1002,
     1003, 1004,    0,    0,    0, 1004, 1002, 1003,    0,    0,

     1002, 1004,    0, 1005, 1003,    0, 1002, 1005, 1003, 1002,
        0, 1004,    0, 1005, 1003, 1006, 1002, 1003, 1004, 1006,
        0,    0, 1004, 1005, 1003, 1006,    0, 1007, 1004,    0,
     1005, 1007,    0,    0, 1005, 1006,    0, 1007, 1004,    0,
     1005, 1008, 1006,    0,    0, 1008, 1006, 1007,    0, 1008,
     1005,    0, 1006, 1009, 1007, 1008,    0, 1009, 1007, 1012,
        0, 1009, 1006, 1012, 1007, 1008,    0, 1009, 1008, 1012,
     1010, 1010, 1008,    0, 1007, 1010, 1008, 1009,    0, 1012,
     1009, 1010, 1008, 1013, 1009, 1011, 1012, 1013, 1009, 1011,
     1012, 1010, 1008, 1013, 1009, 1011, 1012, 1010, 1010,    0,

     1011,    0, 1010, 1013, 1009, 1011, 1012,    0, 1010,    0,
     1013, 1015, 1011,    0, 1013, 1015, 1011,    0, 1010, 1015,
     1013,    0, 1011, 1014, 1014, 1015,    0, 1011, 1014, 1016,
     1013,    0, 1011, 1016, 1014, 1015,    0,    0, 1015, 1016,
        0, 1017, 1015, 1017, 1014,    0, 1015,    0, 1017, 1016,
     1014, 1014, 1015, 1017,    0, 1014, 1016, 1018,    0, 1018,
     1016, 1014, 1015, 1018, 1018, 1019, 1016, 1019, 1017, 1018,
     1017, 1014, 1019, 1019,    0, 1017, 1016, 1019,    0,    0,
     1017,    0,    0,    0, 1018,    0, 1018,    0,    0,    0,
     1018, 1018, 1019,    0, 1019, 1020, 1018,    0, 1021, 1019,

     1019,    0,    0, 1022, 1019, 1022, 1020,    0, 1020, 1021,
     1022, 1021, 1023, 1020, 1023, 1022, 1021,    0, 1020, 1023,
        0, 1021, 1020,    0, 1023, 1021,    0,    0,    0,    0,
     1022,    0, 1022, 1020,    0, 1020, 1021, 1022, 1021, 1023,
     1020, 1023, 1022, 1021,    0, 1020, 1023,    0, 1021, 1024,
        0, 1023,    0, 1024, 1026,    0, 1025, 1025, 1026, 1024,
        0, 1025, 1027, 1028, 1026, 1028, 1027, 1025,    0, 1024,
     1028,    0, 1027,    0, 1026, 1028, 1024, 1025,    0,    0,
     1024, 1026, 1027, 1025, 1025, 1026, 1024, 1029, 1025, 1027,
     1028, 1026, 1028, 1027, 1025, 1030, 1024, 1028, 1029, 1027,

     1029, 1026, 1028,    0, 1025, 1029, 1030,    0, 1030, 1027,
     1029,    0,    0, 1030, 1029,    0,    0, 1031, 1030, 1031,
        0,    0, 1030,    0, 1031, 1029,    0, 1029,    0, 1031,
        0,    0, 1029, 1030,    0, 1030, 1032, 1029, 1032,    0,
     1030,    0,    0, 1032, 1031, 1030, 1031,    0, 1032, 1110,
     1111, 1031, 1111, 1110, 1112,    0, 1031, 1111, 1112, 1110,
        0,    0, 1111, 1032, 1112, 1032,    0,    0, 1113, 1110,
     1032,    0, 1113,    0, 1112, 1032, 1110, 1111, 1113, 1111,
     1110, 1112,    0,    0, 1111, 1112, 1110,    0, 1113, 1111,
     1114, 1112, 1114,    0,    0, 1113, 1110, 1114,    0, 1113,

        0, 1112, 1114,    0, 1115, 1113, 1115,    0,    0,    0,
        0, 1115,    0,    0,    0, 1113, 1115, 1114, 1116, 1114,
     1116,    0, 1117,    0, 1114, 1116, 1117,    0,    0, 1114,
     1116, 1115, 1117, 1115,    0,    0, 1118,    0, 1115,    0,
     1118,    0, 1117, 1115,    0, 1116, 1118, 1116, 1119, 1117,
     1119, 1118, 1116, 1117,    0, 1119, 1118, 1116,    0, 1117,
     1119,    0,    0, 1118, 1120,    0, 1120, 1118,    0, 1117,
        0, 1120, 1120, 1118,    0, 1119, 1120, 1119, 1118,    0,
        0,    0, 1119, 1118,    0,    0,    0, 1119, 1121,    0,
     1121, 1120,    0, 1120, 1122, 1121, 1122,    0, 1120, 1120,

     1121, 1122, 1123, 1120, 1123,    0, 1122,    0,    0, 1123,
        0,    0,    0,    0, 1123, 1121,    0, 1121, 1124,    0,
     1124, 1122, 1121, 1122,    0, 1124, 1124, 1121, 1122, 1123,
     1124, 1123, 1125, 1122, 1125,    0, 1123,    0,    0, 1125,
        0, 1123,    0,    0, 1125, 1124,    0, 1124, 1126, 1126,
     1126,    0, 1124, 1124,    0, 1126,    0, 1124, 1127, 1125,
     1126, 1125,    0,    0,    0,    0, 1125, 1127,    0, 1127,
        0, 1125,    0,    0, 1127, 1126, 1126, 1126,    0, 1127,
        0, 1128, 1126, 1128,    0, 1127,    0, 1126, 1128,    0,
     1129,    0, 1129, 1128, 1127,    0, 1127, 1129, 1129,    0,

        0, 1127, 1129,    0,    0,    0, 1127,    0, 1128, 1130,
     1128, 1130,    0,    0,    0, 1128, 1130, 1129, 1131, 1129,
     1128, 1130,    0,    0, 1129, 1129,    0,    0, 1131, 1129,
     1131,    0, 1132,    0, 1132, 1131, 1130,    0, 1130, 1132,
     1131,    0, 1133, 1130, 1132, 1131,    0,    0, 1130,    0,
        0, 1133,    0, 1133,    0, 1131,    0, 1131, 1133, 1132,
        0, 1132, 1131, 1133,    0,    0, 1132, 1131,    0, 1133,
     1134, 1132, 1134,    0, 1135,    0, 1135, 1134, 1133,    0,
     1133, 1135, 1134,    0,    0, 1133, 1135,    0,    0,    0,
     1133,    0, 1137, 1136,    0, 1136, 1137, 1134,    0, 1134,

     1136, 1135, 1137, 1135, 1134, 1136, 1138,    0, 1135, 1134,
     1138,    0, 1137, 1135,    0,    0, 1138,    0,    0, 1137,
     1136,    0, 1136, 1137,    0,    0, 1138, 1136, 1139, 1137,
     1139,    0, 1136, 1138, 1140, 1139, 1140, 1138,    0, 1137,
     1139, 1140, 1140, 1138, 1141,    0, 1140,    0, 1141,    0,
        0,    0,    0, 1138, 1141, 1139, 1142, 1139,    0,    0,
     1142, 1140, 1139, 1140, 1141,    0, 1142, 1139, 1140, 1140,
     1143, 1141,    0, 1140, 1143, 1141, 1142,    0, 1144,    0,
     1143, 1141, 1144, 1142,    0,    0,    0, 1142, 1144,    0,
     1143, 1141, 1145, 1142,    0,    0, 1145, 1143, 1144,    0,

     1146, 1143, 1145, 1142, 1146, 1144,    0, 1143,    0, 1144,
     1146,    0, 1145,    0, 1147, 1144,    0, 1143, 1147, 1145,
     1146,    0, 1148, 1145, 1147, 1144, 1148, 1146,    0, 1145,
        0, 1146, 1148,    0, 1147, 1148, 1149, 1146,    0, 1145,
     1149, 1147, 1148,    0, 1150, 1147, 1149, 1146, 1150, 1148,
     1151, 1147, 1150, 1148, 1151,    0, 1149,    0, 1150, 1148,
     1151, 1147, 1148, 1149,    0,    0,    0, 1149, 1150, 1148,
     1151, 1150, 1152, 1149,    0, 1150, 1152, 1151,    0, 1150,
        0, 1151, 1152, 1149, 1153, 1150, 1153, 1151,    0,    0,
        0, 1153, 1152,    0,    0, 1150, 1153, 1151, 1154, 1152,

     1154,    0,    0, 1152,    0, 1154,    0,    0,    0, 1152,
     1154, 1153,    0, 1153, 1155,    0, 1155, 1157, 1153, 1152,
        0, 1155, 1156, 1153, 1156, 1154, 1155, 1154, 1157, 1156,
     1157,    0, 1154,    0, 1156, 1157,    0, 1154,    0,    0,
     1157, 1155,    0, 1155, 1157,    0,    0,    0, 1155, 1156,
        0, 1156, 1158, 1155, 1158, 1157, 1156, 1157, 1159, 1158,
     1159, 1156, 1157,    0, 1158, 1159, 1159, 1157, 1160,    0,
     1159,    0, 1160,    0,    0,    0,    0,    0, 1160, 1158,
     1161, 1158,    0,    0, 1161, 1159, 1158, 1159, 1160,    0,
     1161, 1158, 1159, 1159, 1162, 1160,    0, 1159, 1162, 1160,

     1161,    0, 1163,    0, 1162, 1160, 1163, 1161,    0,    0,
        0, 1161, 1163,    0, 1162, 1160, 1164, 1161,    0,    0,
     1164, 1162, 1163,    0,    0, 1162, 1164, 1161, 1165, 1163,
     1165, 1162,    0, 1163, 1165,    0, 1164,    0,    0, 1163,
     1165, 1162, 1166, 1164, 1166,    0,    0, 1164, 1166, 1163,
     1165,    0,    0, 1164, 1166, 1165,    0, 1165, 1167,    0,
     1167, 1165,    0, 1164, 1166, 1167, 1168, 1165, 1168, 1166,
     1167, 1166, 1169, 1168, 1169, 1166,    0, 1165, 1168, 1169,
        0, 1166,    0,    0, 1169, 1167,    0, 1167,    0,    0,
        0, 1166, 1167, 1168,    0, 1168, 1170, 1167, 1170, 1169,

     1168, 1169, 1171, 1170, 1171, 1168, 1169,    0, 1170, 1171,
     1172, 1169, 1172,    0, 1171,    0,    0, 1172,    0,    0,
        0,    0, 1172, 1170,    0, 1170, 1173,    0, 1173, 1171,
     1170, 1171,    0, 1173, 1174, 1170, 1171, 1172, 1173, 1172,
        0, 1171,    0,    0, 1172, 1174, 1239, 1174,    0, 1172,
     1239,    0, 1174, 1173,    0, 1173, 1239, 1174, 1175, 1176,
     1173, 1174,    0,    0,    0, 1173, 1239,    0, 1176, 1175,
     1176, 1175, 1174, 1239, 1174, 1176, 1175, 1239,    0, 1174,
     1176, 1175,    0, 1239, 1174, 1175, 1176,    0,    0,    0,
        0,    0, 1177, 1239, 1177, 1176, 1175, 1176, 1175, 1177,

     1177,    0, 1176, 1175, 1177, 1178,    0, 1176, 1175,    0,
     1179,    0, 1179, 1178,    0, 1178, 1180, 1179, 1180, 1177,
     1178, 1177, 1179, 1180,    0, 1178, 1177, 1177, 1180,    0,
        0, 1177, 1178,    0, 1181,    0, 1181, 1179,    0, 1179,
     1178, 1181, 1178, 1180, 1179, 1180, 1181, 1178,    0, 1179,
     1180,    0, 1178,    0,    0, 1180,    0, 1182,    0, 1182,
     1183, 1181, 1183, 1181, 1182,    0, 1183, 1183, 1181, 1182,
        0,    0, 1183, 1181,    0,    0, 1184,    0, 1184,    0,
        0,    0,    0, 1184, 1182,    0, 1182, 1183, 1184, 1183,
     1233, 1182, 1233, 1183, 1183, 1234, 1182, 1233,    0, 1183,

        0,    0, 1233, 1184, 1234, 1184, 1234,    0,    0,    0,
     1184, 1234,    0,    0,    0, 1184, 1234, 1233, 1235, 1233,
     1235,    0, 1234,    0, 1233, 1235,    0,    0,    0, 1233,
     1235, 1234, 1236, 1234, 1236,    0,    0,    0, 1234, 1236,
        0,    0,    0, 1234, 1236, 1235, 1237, 1235, 1237,    0,
        0,    0, 1235, 1237,    0,    0,    0, 1235, 1237, 1236,
     1238, 1236, 1238,    0, 1240,    0, 1236, 1238, 1240,    0,
        0, 1236, 1238, 1237, 1240, 1237,    0,    0, 1241,    0,
     1237,    0, 1241,    0, 1240, 1237, 1242, 1238, 1241, 1238,
     1242, 1240, 1243, 1243, 1238, 1240, 1242,    0, 1241, 1238,

     1244, 1240,    0,    0, 1244, 1241, 1242,    0,    0, 1241,
     1244, 1240,    0, 1242,    0, 1241,    0, 1242, 1243,    0,
     1244,    0, 1243, 1242,    0, 1241, 1245, 1244, 1243,    0,
     1245, 1244,    0, 1242,    0,    0, 1245, 1244, 1243,    0,
     1246,    0,    0,    0, 1246, 1243, 1245, 1244, 1246, 1243,
        0,    0, 1247, 1245, 1246, 1243, 1247, 1245,    0,    0,
        0,    0, 1247, 1245, 1246, 1243, 1248, 1246,    0,    0,
     1248, 1246, 1247, 1245, 1249, 1246, 1248,    0, 1249, 1247,
        0, 1246,    0, 1247, 1249,    0, 1248,    0,    0, 1247,
        0, 1246, 1250, 1248, 1249,    0, 1250, 1248,    0, 1247,

     1251, 1249, 1250, 1248, 1251, 1249,    0, 1250,    0,    0,
     1251, 1249, 1250, 1248,    0,    0,    0,    0, 1252, 1250,
     1251, 1249, 1252, 1250,    0,    0, 1253, 1251, 1252, 1250,
     1253, 1251,    0,    0, 1250,    0, 1253, 1251, 1252, 1250,
        0,    0,    0,    0,    0, 1252, 1253, 1251,    0, 1252,
        0,    0, 1254, 1253, 1254, 1252,    0, 1253,    0, 1254,
     1255,    0, 1255, 1253, 1254, 1252,    0, 1255,    0, 1256,
        0,    0, 1255, 1253,    0,    0,    0,    0, 1256, 1254,
     1256, 1254,    0,    0,    0, 1256, 1254, 1255,    0, 1255,
     1256, 1254,    0,    0, 1255,    0, 1256,    0,    0, 1255,

        0, 1257, 1258, 1257, 1258, 1256, 1261, 1256, 1257, 1258,
     1261,    0, 1256, 1257, 1258,    0, 1261, 1256,    0,    0,
     1259,    0, 1259,    0,    0,    0, 1261, 1259, 1257, 1258,
     1257, 1258, 1259, 1261,    0, 1257, 1258, 1261, 1262,    0,
     1257, 1258, 1262, 1261, 1260,    0, 1260, 1259, 1262, 1259,
     1260, 1260,    0, 1261, 1259, 1263, 1260, 1263, 1262, 1259,
        0,    0, 1263,    0,    0, 1262,    0, 1263,    0, 1262,
        0, 1260,    0, 1260, 1264, 1262, 1264, 1260, 1260,    0,
        0, 1264, 1263, 1260, 1263, 1262, 1264,    0, 1265, 1263,
     1265,    0,    0,    0, 1263, 1265,    0, 1266,    0, 1266,

     1265, 1264,    0, 1264, 1266, 1266,    0,    0, 1264, 1266,
        0,    0,    0, 1264,    0, 1265,    0, 1265,    0,    0,
     1267, 1267, 1265, 1267, 1266,    0, 1266, 1265, 1267,    0,
        0, 1266, 1266, 1267,    0,    0, 1266, 1268,    0, 1268,
        0,    0,    0,    0, 1268,    0,    0, 1267, 1267, 1268,
     1267, 1269,    0, 1269,    0, 1267,    0,    0, 1269,    0,
     1267,    0,    0, 1269, 1268, 1270, 1268, 1270,    0,    0,
        0, 1268, 1270, 1270,    0,    0, 1268, 1270, 1269, 1271,
     1269, 1271,    0,    0,    0, 1269, 1271,    0,    0,    0,
     1269, 1271, 1270,    0, 1270, 1272,    0, 1272,    0, 1270,

     1270, 1272, 1272,    0, 1270,    0, 1271, 1272, 1271, 1273,
     1273, 1273,    0, 1271,    0,    0, 1273,    0, 1271,    0,
        0, 1273, 1272, 1274, 1272, 1274,    0,    0, 1272, 1272,
     1274, 1274,    0,    0, 1272, 1274, 1273, 1273, 1273,    0,
        0, 1275,    0, 1273,    0, 1275,    0,    0, 1273, 1276,
     1274, 1275, 1274, 1276,    0,    0,    0, 1274, 1274, 1276,
        0, 1275, 1274, 1277,    0,    0,    0, 1277, 1275, 1276,
        0, 1278, 1275, 1277,    0, 1278, 1276,    0, 1275,    0,
     1276, 1278,    0, 1277,    0,    0, 1276,    0, 1275,    0,
     1277, 1278,    0, 1304, 1277,    0, 1276, 1304, 1278,    0,

     1277, 1305, 1278, 1304,    0, 1305, 1304,    0, 1278,    0,
     1277, 1305,    0, 1304, 1305, 1307,    0, 1307, 1278,    0,
     1304, 1305, 1307,    0, 1304,    0,    0, 1307, 1305,    0,
     1304,    0, 1305, 1304,    0,    0,    0,    0, 1305,    0,
     1304, 1305, 1307, 1308, 1307, 1308,    0,    0, 1305, 1307,
     1308, 1309,    0, 1309, 1307, 1308,    0,    0, 1309, 1309,
        0,    0, 1310, 1309, 1310,    0,    0,    0,    0, 1310,
     1308,    0, 1308,    0, 1310,    0,    0, 1308, 1309,    0,
     1309, 1311, 1308, 1311,    0, 1309, 1309, 1312, 1311, 1310,
     1309, 1310, 1312, 1311, 1312, 1313, 1310, 1313,    0, 1312,

        0, 1310, 1313, 1313, 1312,    0,    0, 1313, 1311,    0,
     1311, 1314,    0, 1314, 1312, 1311,    0,    0, 1314, 1312,
     1311, 1312, 1313, 1314, 1313, 1315, 1312, 1315,    0, 1313,
     1313, 1312, 1315,    0, 1313,    0,    0, 1315, 1314,    0,
     1314, 1316,    0, 1316, 1317, 1314, 1317, 1316, 1316,    0,
     1314, 1317, 1315, 1316, 1315, 1318, 1317,    0,    0, 1315,
     1318,    0, 1318,    0, 1315,    0,    0, 1318, 1316,    0,
     1316, 1317, 1318, 1317, 1316, 1316,    0,    0, 1317, 1319,
     1316, 1319, 1318, 1317,    0,    0, 1319, 1318, 1320, 1318,
     1320, 1319,    0,    0, 1318, 1320,    0,    0,    0, 1318,

     1320, 1322, 1321,    0, 1321, 1322, 1319,    0, 1319, 1321,
        0, 1322,    0, 1319, 1321, 1320,    0, 1320, 1319,    0,
     1324, 1322, 1320,    0, 1324,    0,    0, 1320, 1322, 1321,
     1324, 1321, 1322, 1323,    0, 1325, 1321, 1323, 1322, 1325,
     1324, 1321,    0, 1323, 1323, 1325,    0, 1324, 1322,    0,
        0, 1324,    0, 1323,    0, 1325,    0, 1324, 1326, 1326,
     1323,    0, 1325, 1326, 1323,    0, 1325, 1324,    0, 1326,
     1323, 1323, 1325, 1343,    0, 1344, 1344, 1343,    0, 1326,
     1323,    0, 1325, 1343,    0, 1326, 1326, 1346, 1347,    0,
     1326, 1346, 1347, 1343,    0,    0, 1326, 1346, 1347,    0,

     1343, 1344,    0,    0, 1343, 1344, 1326, 1346, 1347,    0,
     1343, 1344,    0, 1348, 1346, 1347,    0, 1348, 1346, 1347,
     1343, 1344,    0, 1348, 1346, 1347, 1349,    0, 1344,    0,
     1349,    0, 1344, 1348, 1346, 1347, 1349,    0, 1344,    0,
     1348,    0,    0,    0, 1348,    0, 1349, 1350, 1344, 1350,
     1348,    0,    0, 1349, 1350,    0,    0, 1349,    0, 1350,
     1348,    0,    0, 1349,    0, 1351,    0, 1351, 1352,    0,
     1352,    0, 1351, 1349, 1350, 1352, 1350, 1351,    0,    0,
     1352, 1350,    0,    0,    0,    0, 1350,    0,    0, 1353,
        0, 1353, 1351,    0, 1351, 1352, 1353, 1352, 1354, 1351,

     1354, 1353, 1352,    0, 1351, 1354,    0, 1352,    0, 1355,
     1354, 1356,    0, 1355,    0, 1356, 1353,    0, 1353, 1355,
        0, 1356,    0, 1353,    0, 1354,    0, 1354, 1353, 1355,
        0, 1356, 1354,    0,    0, 1365, 1355, 1354, 1356, 1365,
     1355,    0, 1356, 1365,    0, 1365, 1355, 1368, 1356, 1369,
        0, 1368,    0, 1369,    0, 1365, 1355, 1368, 1356, 1369,
        0, 1370, 1365, 1370,    0,    0, 1365, 1368, 1370, 1369,
     1365, 1377, 1365, 1370, 1368, 1377, 1369,    0, 1368, 1380,
     1369, 1377, 1365, 1380, 1368, 1385, 1369, 1385, 1370, 1380,
     1370, 1377, 1385,    0, 1368, 1370, 1369, 1385, 1377, 1380,

     1370,    0, 1377,    0,    0,    0, 1380,    0, 1377,    0,
     1380,    0, 1385, 1391, 1385, 1391, 1380,    0, 1377, 1385,
     1391, 1391,    0,    0, 1385, 1391, 1380, 1397,    0, 1397,
        0,    0,    0,    0, 1397,    0,    0,    0,    0, 1397,
     1391,    0, 1391,    0,    0,    0,    0, 1391, 1391,    0,
        0,    0, 1391,    0, 1397,    0, 1397,    0,    0,    0,
        0, 1397,    0,    0,    0,    0, 1397, 1418, 1418, 1418,
     1418, 1418, 1419,    0,    0, 1419, 1419, 1421, 1421, 1421,
        0, 1421, 1422,    0, 1422, 1422, 1422, 1423,    0, 1423,
     1423, 1423, 1424,    0, 1424, 1424, 1424, 1417, 1417, 1417,

     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../cache/Mallocator.h"
#include "sql_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3232 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3246 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3533 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1418 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1417 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(AUTO_INCREMENT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(AVERAGE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(AVERAGE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COMMENT)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(COUNT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(START)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 240 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 180:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
TOKEN(EQ)
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
TOKEN(NE)
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
TOKEN(NE)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
TOKEN(LE)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
TOKEN(GE)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 248 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 188:
#line 254 "flex_lexer.l"
case 189:
YY_RULE_SETUP
#line 254 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 190:
YY_RULE_SETUP
#line 264 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 269 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = new storage::MString(yytext + 1, strlen(yytext)-1);
  return SQL_STRING;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 285 "flex_lexer.l"
{
  yylval->sval = new storage::MString(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 290 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 291 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 292 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 293 "flex_lexer.l"
{ BEGIN 0; yylval->sval = new storage::MString(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 294 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 296 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 298 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4614 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1418 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1418 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1417);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 298 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

