RepidDB数据库简介
RapidDB是完全独立开发的数据库， 不依赖于任何现有的产品。使用c++20语言，基于STL和boost库开发。该数据库相比于目前的数据库产品，最主要的特点就是速度快，随机插入和查询的速度能够达到一百五十万条记录每秒以上，产品的用途是内存数据库，嵌入式数据库，单机数据库，分布式数据库也在设计中。
	Rapid数据库速度这么快的原因基于以下方面：
1.	自己实现了SpinLock，替代std::mutex，经过测试，SpinLock的加锁释放的速度在mutex两倍以上。
2.	设计实现了一套内存池，内存池中充分利用了thread_local特性，设计了双重缓存池，有一个中的缓存池，每个thread有自己的缓冲池，这样需要申请释放内存可以首先使用thread自己的缓存池，当没有或者过多的时候，才需要一次从总的内存池申请或者释放一批内存，这样可以做到每次申请或释放内存的时间只有正常申请释放不到十分之一的时间。
3.	改进了b+ tree的实现，传统的b+ tree 每次读写直接对页内存进行操作，当页需要分裂时，需要锁定多个节点，特殊情况下会从叶节点一直锁定到根节点，会照成大量的冲突和等待，因此大大加大了访问的时间。而在改进的b+ tree中，每个页内部实现了页-记录二级管理，插入修改的记录直接放在对记录管理的数组中，不需要直接写入页内存，也不需要考虑页分裂，而在专门的task中统一对需要保存，分裂的页进行处理，这样可以减少锁的次数，极大地节省时间。
4.	使用了线程池和协程，所有的操作都会分解成一个个的task，每个task在等待时可以退出执行线程，进入等待队列，这样可以极大的加强线程的利用率，从而提高效率。
5.	提出并使用了delay-free的概念，对于大量读，极少修改的对象，在读的时候不加锁，修改、删除操作并不会直接操作与对象，而是new出一个新对象，并把数据拷贝到新的对象中进行修改，而对数据的完整性验证放在其他地方保证，例如b+ tree的root page的完整性正确性。通过该技术，可以减少访问瓶颈，极大地提高效率。

除此之外，Rapid还有以下特长：
1.	实现了临时MVCC功能，可以在事务执行期间保存多个版本，用于事务的回滚等操作。
2.	每条记录都会有全局唯一的ID，按照时间先后顺序递增，可以方便的实现乐观锁，并保存多个快照的功能。
3.	独立实现了SQL解析功能，可以根据用户的需要添加修改SQL命令。
